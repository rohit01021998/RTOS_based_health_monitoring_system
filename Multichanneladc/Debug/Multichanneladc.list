
Multichanneladc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800a5c0  0800a5c0  0000b5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa98  0800aa98  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa98  0800aa98  0000ba98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaa0  0800aaa0  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaa0  0800aaa0  0000baa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aaa4  0800aaa4  0000baa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800aaa8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004970  200001d8  0800ac80  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b48  0800ac80  0000cb48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017832  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000394f  00000000  00000000  00023a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  00027390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001093  00000000  00000000  000288f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262fc  00000000  00000000  00029983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190a2  00000000  00000000  0004fc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8a7b  00000000  00000000  00068d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015179c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a68  00000000  00000000  001517e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00158248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a5a4 	.word	0x0800a5a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800a5a4 	.word	0x0800a5a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8000f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200001f4 	.word	0x200001f4
 8000fa8:	20000248 	.word	0x20000248

08000fac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8000fbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	4a06      	ldr	r2, [pc, #24]	@ (8000fdc <vApplicationGetTimerTaskMemory+0x30>)
 8000fc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	20000448 	.word	0x20000448
 8000fdc:	2000049c 	.word	0x2000049c

08000fe0 <HAL_GPIO_EXTI_Callback>:
{
	convCompleted = 1;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	debug_mode=1;
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_GPIO_EXTI_Callback+0x24>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
	debug_start_screen=1;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <HAL_GPIO_EXTI_Callback+0x28>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000a88 	.word	0x20000a88
 8001008:	20000a8c 	.word	0x20000a8c

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b090      	sub	sp, #64	@ 0x40
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f001 f8cb 	bl	80021ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f863 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f000 f9f1 	bl	8001400 <MX_GPIO_Init>
  MX_ADC1_Init();
 800101e:	f000 f8d1 	bl	80011c4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001022:	f000 f9c3 	bl	80013ac <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001026:	f000 f91f 	bl	8001268 <MX_ADC2_Init>
  MX_TIM1_Init();
 800102a:	f000 f96f 	bl	800130c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 800102e:	f000 fb12 	bl	8001656 <lcd_init>

  // store the chars into the CGRAM
  //lcd_send_cmd(0x40);
  //for (int i=0; i<8; i++) lcd_send_data(cc5[i]);

  lcd_clear();
 8001032:	f000 fae7 	bl	8001604 <lcd_clear>
  //lcd_put_cur(0,0);
  //lcd_send_data(heart); // displaying heart.
  lcd_put_cur(0,0);
 8001036:	2100      	movs	r1, #0
 8001038:	2000      	movs	r0, #0
 800103a:	f000 faed 	bl	8001618 <lcd_put_cur>
  lcd_send_string(" Health Monitor");
 800103e:	4820      	ldr	r0, [pc, #128]	@ (80010c0 <main+0xb4>)
 8001040:	f000 fb22 	bl	8001688 <lcd_send_string>
  lcd_put_cur(1,0);
 8001044:	2100      	movs	r1, #0
 8001046:	2001      	movs	r0, #1
 8001048:	f000 fae6 	bl	8001618 <lcd_put_cur>
  lcd_send_string("     System");
 800104c:	481d      	ldr	r0, [pc, #116]	@ (80010c4 <main+0xb8>)
 800104e:	f000 fb1b 	bl	8001688 <lcd_send_string>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of a_min_timer */
  osTimerDef(a_min_timer, Callback_a_min_timer);
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <main+0xbc>)
 8001054:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001056:	2300      	movs	r3, #0
 8001058:	63fb      	str	r3, [r7, #60]	@ 0x3c
  a_min_timerHandle = osTimerCreate(osTimer(a_min_timer), osTimerPeriodic, NULL);
 800105a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800105e:	2200      	movs	r2, #0
 8001060:	2101      	movs	r1, #1
 8001062:	4618      	mov	r0, r3
 8001064:	f003 feb8 	bl	8004dd8 <osTimerCreate>
 8001068:	4603      	mov	r3, r0
 800106a:	4a18      	ldr	r2, [pc, #96]	@ (80010cc <main+0xc0>)
 800106c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PulseTask */
  osThreadDef(PulseTask, StartPulseTask, osPriorityAboveNormal, 0, 128);
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <main+0xc4>)
 8001070:	f107 041c 	add.w	r4, r7, #28
 8001074:	461d      	mov	r5, r3
 8001076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PulseTaskHandle = osThreadCreate(osThread(PulseTask), NULL);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f003 fe44 	bl	8004d16 <osThreadCreate>
 800108e:	4603      	mov	r3, r0
 8001090:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <main+0xc8>)
 8001092:	6013      	str	r3, [r2, #0]

  /* definition and creation of TempTask */
  osThreadDef(TempTask, StartTempTask, osPriorityAboveNormal, 0, 128);
 8001094:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <main+0xcc>)
 8001096:	463c      	mov	r4, r7
 8001098:	461d      	mov	r5, r3
 800109a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TempTaskHandle = osThreadCreate(osThread(TempTask), NULL);
 80010a6:	463b      	mov	r3, r7
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fe33 	bl	8004d16 <osThreadCreate>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <main+0xd0>)
 80010b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010b6:	f003 fe27 	bl	8004d08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ba:	bf00      	nop
 80010bc:	e7fd      	b.n	80010ba <main+0xae>
 80010be:	bf00      	nop
 80010c0:	0800a5c0 	.word	0x0800a5c0
 80010c4:	0800a5d0 	.word	0x0800a5d0
 80010c8:	08001869 	.word	0x08001869
 80010cc:	200009c4 	.word	0x200009c4
 80010d0:	0800a5e8 	.word	0x0800a5e8
 80010d4:	200009bc 	.word	0x200009bc
 80010d8:	0800a610 	.word	0x0800a610
 80010dc:	200009c0 	.word	0x200009c0

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	@ 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	2234      	movs	r2, #52	@ 0x34
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f007 f98f 	bl	8008412 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b2c      	ldr	r3, [pc, #176]	@ (80011bc <SystemClock_Config+0xdc>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110c:	4a2b      	ldr	r2, [pc, #172]	@ (80011bc <SystemClock_Config+0xdc>)
 800110e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001112:	6413      	str	r3, [r2, #64]	@ 0x40
 8001114:	4b29      	ldr	r3, [pc, #164]	@ (80011bc <SystemClock_Config+0xdc>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	4b26      	ldr	r3, [pc, #152]	@ (80011c0 <SystemClock_Config+0xe0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a25      	ldr	r2, [pc, #148]	@ (80011c0 <SystemClock_Config+0xe0>)
 800112a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <SystemClock_Config+0xe0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113c:	2302      	movs	r3, #2
 800113e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001144:	2310      	movs	r3, #16
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001148:	2302      	movs	r3, #2
 800114a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800114c:	2300      	movs	r3, #0
 800114e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001150:	2308      	movs	r3, #8
 8001152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001154:	23b4      	movs	r3, #180	@ 0xb4
 8001156:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001158:	2302      	movs	r3, #2
 800115a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800115c:	2302      	movs	r3, #2
 800115e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001160:	2302      	movs	r3, #2
 8001162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fa83 	bl	8003674 <HAL_RCC_OscConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001174:	f000 fd5e 	bl	8001c34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001178:	f001 ff36 	bl	8002fe8 <HAL_PWREx_EnableOverDrive>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001182:	f000 fd57 	bl	8001c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118a:	2302      	movs	r3, #2
 800118c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001192:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2105      	movs	r1, #5
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 ff6f 	bl	8003088 <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80011b0:	f000 fd40 	bl	8001c34 <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3750      	adds	r7, #80	@ 0x50
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_ADC1_Init+0x98>)
 80011d8:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <MX_ADC1_Init+0x9c>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_ADC1_Init+0x98>)
 80011de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_ADC1_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_ADC1_Init+0x98>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_ADC1_Init+0x98>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <MX_ADC1_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_ADC1_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <MX_ADC1_Init+0x98>)
 8001206:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <MX_ADC1_Init+0xa0>)
 8001208:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_ADC1_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_ADC1_Init+0x98>)
 8001212:	2201      	movs	r2, #1
 8001214:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_ADC1_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_ADC1_Init+0x98>)
 8001220:	2201      	movs	r2, #1
 8001222:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001224:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_ADC1_Init+0x98>)
 8001226:	f001 f827 	bl	8002278 <HAL_ADC_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001230:	f000 fd00 	bl	8001c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_ADC1_Init+0x98>)
 8001246:	f001 f9f9 	bl	800263c <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001250:	f000 fcf0 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000089c 	.word	0x2000089c
 8001260:	40012000 	.word	0x40012000
 8001264:	0f000001 	.word	0x0f000001

08001268 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800127a:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <MX_ADC2_Init+0x98>)
 800127c:	4a21      	ldr	r2, [pc, #132]	@ (8001304 <MX_ADC2_Init+0x9c>)
 800127e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_ADC2_Init+0x98>)
 8001282:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001286:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <MX_ADC2_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_ADC2_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_ADC2_Init+0x98>)
 8001296:	2201      	movs	r2, #1
 8001298:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_ADC2_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_ADC2_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <MX_ADC2_Init+0x98>)
 80012aa:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <MX_ADC2_Init+0xa0>)
 80012ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ae:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <MX_ADC2_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <MX_ADC2_Init+0x98>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_ADC2_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <MX_ADC2_Init+0x98>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012c8:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_ADC2_Init+0x98>)
 80012ca:	f000 ffd5 	bl	8002278 <HAL_ADC_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80012d4:	f000 fcae 	bl	8001c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012d8:	2301      	movs	r3, #1
 80012da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	@ (8001300 <MX_ADC2_Init+0x98>)
 80012ea:	f001 f9a7 	bl	800263c <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80012f4:	f000 fc9e 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200008e4 	.word	0x200008e4
 8001304:	40012100 	.word	0x40012100
 8001308:	0f000001 	.word	0x0f000001

0800130c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001328:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <MX_TIM1_Init+0x98>)
 800132a:	4a1f      	ldr	r2, [pc, #124]	@ (80013a8 <MX_TIM1_Init+0x9c>)
 800132c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 800132e:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <MX_TIM1_Init+0x98>)
 8001330:	2254      	movs	r2, #84	@ 0x54
 8001332:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <MX_TIM1_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800133a:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <MX_TIM1_Init+0x98>)
 800133c:	22ff      	movs	r2, #255	@ 0xff
 800133e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <MX_TIM1_Init+0x98>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001346:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <MX_TIM1_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <MX_TIM1_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001352:	4814      	ldr	r0, [pc, #80]	@ (80013a4 <MX_TIM1_Init+0x98>)
 8001354:	f002 fc2c 	bl	8003bb0 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800135e:	f000 fc69 	bl	8001c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4619      	mov	r1, r3
 800136e:	480d      	ldr	r0, [pc, #52]	@ (80013a4 <MX_TIM1_Init+0x98>)
 8001370:	f002 fdce 	bl	8003f10 <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800137a:	f000 fc5b 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001386:	463b      	mov	r3, r7
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <MX_TIM1_Init+0x98>)
 800138c:	f002 fff6 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001396:	f000 fc4d 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000092c 	.word	0x2000092c
 80013a8:	40010000 	.word	0x40010000

080013ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <MX_USART2_UART_Init+0x50>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013e4:	f003 f85a 	bl	800449c <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ee:	f000 fc21 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000974 	.word	0x20000974
 80013fc:	40004400 	.word	0x40004400

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b35      	ldr	r3, [pc, #212]	@ (80014f0 <MX_GPIO_Init+0xf0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a34      	ldr	r2, [pc, #208]	@ (80014f0 <MX_GPIO_Init+0xf0>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b32      	ldr	r3, [pc, #200]	@ (80014f0 <MX_GPIO_Init+0xf0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <MX_GPIO_Init+0xf0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a2d      	ldr	r2, [pc, #180]	@ (80014f0 <MX_GPIO_Init+0xf0>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b2b      	ldr	r3, [pc, #172]	@ (80014f0 <MX_GPIO_Init+0xf0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <MX_GPIO_Init+0xf0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a26      	ldr	r2, [pc, #152]	@ (80014f0 <MX_GPIO_Init+0xf0>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <MX_GPIO_Init+0xf0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2120      	movs	r1, #32
 800146e:	4821      	ldr	r0, [pc, #132]	@ (80014f4 <MX_GPIO_Init+0xf4>)
 8001470:	f001 fd88 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 71fe 	mov.w	r1, #508	@ 0x1fc
 800147a:	481f      	ldr	r0, [pc, #124]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 800147c:	f001 fd82 	bl	8002f84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001486:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	4819      	ldr	r0, [pc, #100]	@ (80014fc <MX_GPIO_Init+0xfc>)
 8001498:	f001 fbe0 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800149c:	2320      	movs	r3, #32
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4810      	ldr	r0, [pc, #64]	@ (80014f4 <MX_GPIO_Init+0xf4>)
 80014b4:	f001 fbd2 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 PB4 PB5
                           PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80014b8:	f44f 73fe 	mov.w	r3, #508	@ 0x1fc
 80014bc:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <MX_GPIO_Init+0xf8>)
 80014d2:	f001 fbc3 	bl	8002c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2105      	movs	r1, #5
 80014da:	2028      	movs	r0, #40	@ 0x28
 80014dc:	f001 fb94 	bl	8002c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014e0:	2028      	movs	r0, #40	@ 0x28
 80014e2:	f001 fbad 	bl	8002c40 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40020800 	.word	0x40020800

08001500 <send_to_lcd>:


/******************************************************/

void send_to_lcd (char data, int rs)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	2104      	movs	r1, #4
 8001514:	4820      	ldr	r0, [pc, #128]	@ (8001598 <send_to_lcd+0x98>)
 8001516:	f001 fd35 	bl	8002f84 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800152c:	481a      	ldr	r0, [pc, #104]	@ (8001598 <send_to_lcd+0x98>)
 800152e:	f001 fd29 	bl	8002f84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	2180      	movs	r1, #128	@ 0x80
 8001542:	4815      	ldr	r0, [pc, #84]	@ (8001598 <send_to_lcd+0x98>)
 8001544:	f001 fd1e 	bl	8002f84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	2140      	movs	r1, #64	@ 0x40
 8001558:	480f      	ldr	r0, [pc, #60]	@ (8001598 <send_to_lcd+0x98>)
 800155a:	f001 fd13 	bl	8002f84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	2120      	movs	r1, #32
 800156a:	480b      	ldr	r0, [pc, #44]	@ (8001598 <send_to_lcd+0x98>)
 800156c:	f001 fd0a 	bl	8002f84 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8001570:	2201      	movs	r2, #1
 8001572:	2110      	movs	r1, #16
 8001574:	4808      	ldr	r0, [pc, #32]	@ (8001598 <send_to_lcd+0x98>)
 8001576:	f001 fd05 	bl	8002f84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800157a:	2001      	movs	r0, #1
 800157c:	f000 fe58 	bl	8002230 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2110      	movs	r1, #16
 8001584:	4804      	ldr	r0, [pc, #16]	@ (8001598 <send_to_lcd+0x98>)
 8001586:	f001 fcfd 	bl	8002f84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f000 fe50 	bl	8002230 <HAL_Delay>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40020400 	.word	0x40020400

0800159c <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ffa5 	bl	8001500 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff9c 	bl	8001500 <send_to_lcd>
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2101      	movs	r1, #1
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff8b 	bl	8001500 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2101      	movs	r1, #1
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff82 	bl	8001500 <send_to_lcd>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <lcd_clear>:

void lcd_clear (void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff ffc7 	bl	800159c <lcd_send_cmd>
	HAL_Delay(1);
 800160e:	2001      	movs	r0, #1
 8001610:	f000 fe0e 	bl	8002230 <HAL_Delay>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
    switch (row)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <lcd_put_cur+0x18>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d005      	beq.n	800163a <lcd_put_cur+0x22>
 800162e:	e009      	b.n	8001644 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001636:	603b      	str	r3, [r7, #0]
            break;
 8001638:	e004      	b.n	8001644 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001640:	603b      	str	r3, [r7, #0]
            break;
 8001642:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ffa7 	bl	800159c <lcd_send_cmd>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <lcd_init>:


void lcd_init (void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0

	HAL_Delay(10);
 800165a:	200a      	movs	r0, #10
 800165c:	f000 fde8 	bl	8002230 <HAL_Delay>
	lcd_send_cmd (0x02);
 8001660:	2002      	movs	r0, #2
 8001662:	f7ff ff9b 	bl	800159c <lcd_send_cmd>
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001666:	2028      	movs	r0, #40	@ 0x28
 8001668:	f7ff ff98 	bl	800159c <lcd_send_cmd>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800166c:	2008      	movs	r0, #8
 800166e:	f7ff ff95 	bl	800159c <lcd_send_cmd>
	lcd_send_cmd (0x01);  // clear display
 8001672:	2001      	movs	r0, #1
 8001674:	f7ff ff92 	bl	800159c <lcd_send_cmd>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001678:	2006      	movs	r0, #6
 800167a:	f7ff ff8f 	bl	800159c <lcd_send_cmd>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800167e:	200c      	movs	r0, #12
 8001680:	f7ff ff8c 	bl	800159c <lcd_send_cmd>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001690:	e006      	b.n	80016a0 <lcd_send_string+0x18>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff98 	bl	80015d0 <lcd_send_data>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f4      	bne.n	8001692 <lcd_send_string+0xa>
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <StartPulseTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartPulseTask */
void StartPulseTask(void const * argument)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//sprintf(msg,"Pulse task called\r\n");
	if(debug_mode==0){
 80016bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001778 <StartPulseTask+0xc4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d107      	bne.n	80016d4 <StartPulseTask+0x20>
	osTimerStart(a_min_timerHandle,10000);
 80016c4:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <StartPulseTask+0xc8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fbb7 	bl	8004e40 <osTimerStart>
 80016d2:	e00a      	b.n	80016ea <StartPulseTask+0x36>
	}
	else
	{
	osTimerStop(a_min_timerHandle);
 80016d4:	4b29      	ldr	r3, [pc, #164]	@ (800177c <StartPulseTask+0xc8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f003 fbf5 	bl	8004ec8 <osTimerStop>
	osTimerStart(a_min_timerHandle,20);
 80016de:	4b27      	ldr	r3, [pc, #156]	@ (800177c <StartPulseTask+0xc8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2114      	movs	r1, #20
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fbab 	bl	8004e40 <osTimerStart>
  for(;;)
  {
	 //sprintf(msg,"Pulse task called\r\n");
	 //HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),HAL_MAX_DELAY);

	 HAL_ADC_Start(&hadc1);
 80016ea:	4825      	ldr	r0, [pc, #148]	@ (8001780 <StartPulseTask+0xcc>)
 80016ec:	f000 fe08 	bl	8002300 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	4822      	ldr	r0, [pc, #136]	@ (8001780 <StartPulseTask+0xcc>)
 80016f6:	f000 ff08 	bl	800250a <HAL_ADC_PollForConversion>
	 ADC1_value = HAL_ADC_GetValue(&hadc1);
 80016fa:	4821      	ldr	r0, [pc, #132]	@ (8001780 <StartPulseTask+0xcc>)
 80016fc:	f000 ff90 	bl	8002620 <HAL_ADC_GetValue>
 8001700:	4603      	mov	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <StartPulseTask+0xd0>)
 8001706:	801a      	strh	r2, [r3, #0]
	 HAL_ADC_Stop(&hadc1);
 8001708:	481d      	ldr	r0, [pc, #116]	@ (8001780 <StartPulseTask+0xcc>)
 800170a:	f000 fecb 	bl	80024a4 <HAL_ADC_Stop>

	 //sprintf(msg,"Pulse: %hu\r\n",ADC1_value);
	 //HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),HAL_MAX_DELAY);

	  if(ADC1_value>4000 && last_ADC1_value<4000)
 800170e:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <StartPulseTask+0xd0>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001716:	d920      	bls.n	800175a <StartPulseTask+0xa6>
 8001718:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <StartPulseTask+0xd4>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001720:	d21b      	bcs.n	800175a <StartPulseTask+0xa6>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2120      	movs	r1, #32
 8001726:	4819      	ldr	r0, [pc, #100]	@ (800178c <StartPulseTask+0xd8>)
 8001728:	f001 fc2c 	bl	8002f84 <HAL_GPIO_WritePin>
		  osDelay(50);
 800172c:	2032      	movs	r0, #50	@ 0x32
 800172e:	f003 fb3e 	bl	8004dae <osDelay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2120      	movs	r1, #32
 8001736:	4815      	ldr	r0, [pc, #84]	@ (800178c <StartPulseTask+0xd8>)
 8001738:	f001 fc24 	bl	8002f84 <HAL_GPIO_WritePin>
		  osDelay(50);
 800173c:	2032      	movs	r0, #50	@ 0x32
 800173e:	f003 fb36 	bl	8004dae <osDelay>
		  BPM[i]=BPM[i]+1;
 8001742:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <StartPulseTask+0xdc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a13      	ldr	r2, [pc, #76]	@ (8001794 <StartPulseTask+0xe0>)
 8001748:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800174c:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <StartPulseTask+0xdc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3201      	adds	r2, #1
 8001752:	4910      	ldr	r1, [pc, #64]	@ (8001794 <StartPulseTask+0xe0>)
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001758:	e004      	b.n	8001764 <StartPulseTask+0xb0>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2120      	movs	r1, #32
 800175e:	480b      	ldr	r0, [pc, #44]	@ (800178c <StartPulseTask+0xd8>)
 8001760:	f001 fc10 	bl	8002f84 <HAL_GPIO_WritePin>
	  }

	  last_ADC1_value=ADC1_value;
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <StartPulseTask+0xd0>)
 8001766:	881a      	ldrh	r2, [r3, #0]
 8001768:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <StartPulseTask+0xd4>)
 800176a:	801a      	strh	r2, [r3, #0]

     osDelay(300);
 800176c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001770:	f003 fb1d 	bl	8004dae <osDelay>
	 HAL_ADC_Start(&hadc1);
 8001774:	e7b9      	b.n	80016ea <StartPulseTask+0x36>
 8001776:	bf00      	nop
 8001778:	20000a88 	.word	0x20000a88
 800177c:	200009c4 	.word	0x200009c4
 8001780:	2000089c 	.word	0x2000089c
 8001784:	20000a90 	.word	0x20000a90
 8001788:	20000a98 	.word	0x20000a98
 800178c:	40020000 	.word	0x40020000
 8001790:	20000a84 	.word	0x20000a84
 8001794:	20000a7c 	.word	0x20000a7c

08001798 <StartTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTempTask */
void StartTempTask(void const * argument)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  //sprintf(msg,"Temp task called\r\n");
	  	 //HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),HAL_MAX_DELAY);

	  	 while(temp_loop<30)
 80017a0:	e025      	b.n	80017ee <StartTempTask+0x56>
	  	 {
	  	 HAL_ADC_Start(&hadc2);
 80017a2:	482c      	ldr	r0, [pc, #176]	@ (8001854 <StartTempTask+0xbc>)
 80017a4:	f000 fdac 	bl	8002300 <HAL_ADC_Start>
	  	 HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	4829      	ldr	r0, [pc, #164]	@ (8001854 <StartTempTask+0xbc>)
 80017ae:	f000 feac 	bl	800250a <HAL_ADC_PollForConversion>
	  	 ADC2_value = HAL_ADC_GetValue(&hadc2);
 80017b2:	4828      	ldr	r0, [pc, #160]	@ (8001854 <StartTempTask+0xbc>)
 80017b4:	f000 ff34 	bl	8002620 <HAL_ADC_GetValue>
 80017b8:	ee07 0a90 	vmov	s15, r0
 80017bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c0:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <StartTempTask+0xc0>)
 80017c2:	edc3 7a00 	vstr	s15, [r3]
	  	 HAL_ADC_Stop(&hadc2);
 80017c6:	4823      	ldr	r0, [pc, #140]	@ (8001854 <StartTempTask+0xbc>)
 80017c8:	f000 fe6c 	bl	80024a4 <HAL_ADC_Stop>
	  	 temp_sensor_raw_data[temp_loop]=ADC2_value;
 80017cc:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <StartTempTask+0xc0>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	4b22      	ldr	r3, [pc, #136]	@ (800185c <StartTempTask+0xc4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017da:	ee17 1a90 	vmov	r1, s15
 80017de:	4a20      	ldr	r2, [pc, #128]	@ (8001860 <StartTempTask+0xc8>)
 80017e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	 temp_loop++;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <StartTempTask+0xc4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <StartTempTask+0xc4>)
 80017ec:	6013      	str	r3, [r2, #0]
	  	 while(temp_loop<30)
 80017ee:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <StartTempTask+0xc4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b1d      	cmp	r3, #29
 80017f4:	ddd5      	ble.n	80017a2 <StartTempTask+0xa>
	  	 }

	  	 temp_loop=0;
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <StartTempTask+0xc4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

	  	 while(temp_loop<30)
 80017fc:	e015      	b.n	800182a <StartTempTask+0x92>
	  	 {
	  	 temp_average_raw = temp_average_raw + temp_sensor_raw_data[temp_loop];
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <StartTempTask+0xc4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <StartTempTask+0xc8>)
 8001804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001810:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <StartTempTask+0xcc>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181a:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <StartTempTask+0xcc>)
 800181c:	edc3 7a00 	vstr	s15, [r3]
	  	 temp_loop++;
 8001820:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <StartTempTask+0xc4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <StartTempTask+0xc4>)
 8001828:	6013      	str	r3, [r2, #0]
	  	 while(temp_loop<30)
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <StartTempTask+0xc4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b1d      	cmp	r3, #29
 8001830:	dde5      	ble.n	80017fe <StartTempTask+0x66>
	  	 }

	  	 temp_average_raw=temp_average_raw/30;
 8001832:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <StartTempTask+0xcc>)
 8001834:	ed93 7a00 	vldr	s14, [r3]
 8001838:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 800183c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <StartTempTask+0xcc>)
 8001842:	edc3 7a00 	vstr	s15, [r3]
	  	 temp_loop=0;
 8001846:	4b05      	ldr	r3, [pc, #20]	@ (800185c <StartTempTask+0xc4>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
	     osDelay(1);
 800184c:	2001      	movs	r0, #1
 800184e:	f003 faae 	bl	8004dae <osDelay>
	  	 while(temp_loop<30)
 8001852:	e7cc      	b.n	80017ee <StartTempTask+0x56>
 8001854:	200008e4 	.word	0x200008e4
 8001858:	20000a94 	.word	0x20000a94
 800185c:	20000b14 	.word	0x20000b14
 8001860:	20000a9c 	.word	0x20000a9c
 8001864:	20000b18 	.word	0x20000b18

08001868 <Callback_a_min_timer>:
  /* USER CODE END StartTempTask */
}

/* Callback_a_min_timer function */
void Callback_a_min_timer(void const * argument)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback_a_min_timer */
	int final=0;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
	int temp_final=0;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]

	// debug mode message start.
	if(debug_start_screen==1)
 8001878:	4bab      	ldr	r3, [pc, #684]	@ (8001b28 <Callback_a_min_timer+0x2c0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d11e      	bne.n	80018be <Callback_a_min_timer+0x56>
	{
		sprintf(msg_a,"Activating");
 8001880:	49aa      	ldr	r1, [pc, #680]	@ (8001b2c <Callback_a_min_timer+0x2c4>)
 8001882:	48ab      	ldr	r0, [pc, #684]	@ (8001b30 <Callback_a_min_timer+0x2c8>)
 8001884:	f006 fd62 	bl	800834c <siprintf>
		sprintf(msg_b,"Debug Mode...");
 8001888:	49aa      	ldr	r1, [pc, #680]	@ (8001b34 <Callback_a_min_timer+0x2cc>)
 800188a:	48ab      	ldr	r0, [pc, #684]	@ (8001b38 <Callback_a_min_timer+0x2d0>)
 800188c:	f006 fd5e 	bl	800834c <siprintf>
		lcd_clear();
 8001890:	f7ff feb8 	bl	8001604 <lcd_clear>
		lcd_put_cur(0,0);
 8001894:	2100      	movs	r1, #0
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff febe 	bl	8001618 <lcd_put_cur>
	    lcd_send_string(msg_a);
 800189c:	48a4      	ldr	r0, [pc, #656]	@ (8001b30 <Callback_a_min_timer+0x2c8>)
 800189e:	f7ff fef3 	bl	8001688 <lcd_send_string>
	    lcd_put_cur(1,0);
 80018a2:	2100      	movs	r1, #0
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7ff feb7 	bl	8001618 <lcd_put_cur>
	    lcd_send_string(msg_b);
 80018aa:	48a3      	ldr	r0, [pc, #652]	@ (8001b38 <Callback_a_min_timer+0x2d0>)
 80018ac:	f7ff feec 	bl	8001688 <lcd_send_string>
	    debug_start_screen=0;
 80018b0:	4b9d      	ldr	r3, [pc, #628]	@ (8001b28 <Callback_a_min_timer+0x2c0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
	    osDelay(2000);
 80018b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018ba:	f003 fa78 	bl	8004dae <osDelay>
	};

	// debug mode message end.

	//sprintf(msg,"Timer task working\r\n");
	HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),HAL_MAX_DELAY);
 80018be:	489f      	ldr	r0, [pc, #636]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 80018c0:	f7fe fcf6 	bl	80002b0 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	499b      	ldr	r1, [pc, #620]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 80018ce:	489c      	ldr	r0, [pc, #624]	@ (8001b40 <Callback_a_min_timer+0x2d8>)
 80018d0:	f002 fe34 	bl	800453c <HAL_UART_Transmit>

	final = BPM[i]*6;
 80018d4:	4b9b      	ldr	r3, [pc, #620]	@ (8001b44 <Callback_a_min_timer+0x2dc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a9b      	ldr	r2, [pc, #620]	@ (8001b48 <Callback_a_min_timer+0x2e0>)
 80018da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]

	TEMP[i]= (temp_average_raw/4095)*2.4;
 80018e8:	4b98      	ldr	r3, [pc, #608]	@ (8001b4c <Callback_a_min_timer+0x2e4>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8001b50 <Callback_a_min_timer+0x2e8>
 80018f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018f6:	ee16 0a90 	vmov	r0, s13
 80018fa:	f7fe fe45 	bl	8000588 <__aeabi_f2d>
 80018fe:	a388      	add	r3, pc, #544	@ (adr r3, 8001b20 <Callback_a_min_timer+0x2b8>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe fe98 	bl	8000638 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	498d      	ldr	r1, [pc, #564]	@ (8001b44 <Callback_a_min_timer+0x2dc>)
 800190e:	680c      	ldr	r4, [r1, #0]
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f968 	bl	8000be8 <__aeabi_d2f>
 8001918:	4602      	mov	r2, r0
 800191a:	498e      	ldr	r1, [pc, #568]	@ (8001b54 <Callback_a_min_timer+0x2ec>)
 800191c:	00a3      	lsls	r3, r4, #2
 800191e:	440b      	add	r3, r1
 8001920:	601a      	str	r2, [r3, #0]
	TEMP[i]= TEMP[i]*100;
 8001922:	4b88      	ldr	r3, [pc, #544]	@ (8001b44 <Callback_a_min_timer+0x2dc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a8b      	ldr	r2, [pc, #556]	@ (8001b54 <Callback_a_min_timer+0x2ec>)
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	4b84      	ldr	r3, [pc, #528]	@ (8001b44 <Callback_a_min_timer+0x2dc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001b58 <Callback_a_min_timer+0x2f0>
 8001938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193c:	4a85      	ldr	r2, [pc, #532]	@ (8001b54 <Callback_a_min_timer+0x2ec>)
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	edc3 7a00 	vstr	s15, [r3]
	temp_final = (int)TEMP[i];
 8001946:	4b7f      	ldr	r3, [pc, #508]	@ (8001b44 <Callback_a_min_timer+0x2dc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a82      	ldr	r2, [pc, #520]	@ (8001b54 <Callback_a_min_timer+0x2ec>)
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001958:	ee17 3a90 	vmov	r3, s15
 800195c:	60bb      	str	r3, [r7, #8]

	if(final>59)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b3b      	cmp	r3, #59	@ 0x3b
 8001962:	dd61      	ble.n	8001a28 <Callback_a_min_timer+0x1c0>
	{

		if (debug_mode==0)
 8001964:	4b7d      	ldr	r3, [pc, #500]	@ (8001b5c <Callback_a_min_timer+0x2f4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d13a      	bne.n	80019e2 <Callback_a_min_timer+0x17a>
		{
			sprintf(msg,"BPM: %d\r\n",final);
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	497c      	ldr	r1, [pc, #496]	@ (8001b60 <Callback_a_min_timer+0x2f8>)
 8001970:	4872      	ldr	r0, [pc, #456]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 8001972:	f006 fceb 	bl	800834c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),HAL_MAX_DELAY);
 8001976:	4871      	ldr	r0, [pc, #452]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 8001978:	f7fe fc9a 	bl	80002b0 <strlen>
 800197c:	4603      	mov	r3, r0
 800197e:	b29a      	uxth	r2, r3
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	496d      	ldr	r1, [pc, #436]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 8001986:	486e      	ldr	r0, [pc, #440]	@ (8001b40 <Callback_a_min_timer+0x2d8>)
 8001988:	f002 fdd8 	bl	800453c <HAL_UART_Transmit>

			sprintf(msg,"Temp: %d *C\r\n",temp_final);
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	4975      	ldr	r1, [pc, #468]	@ (8001b64 <Callback_a_min_timer+0x2fc>)
 8001990:	486a      	ldr	r0, [pc, #424]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 8001992:	f006 fcdb 	bl	800834c <siprintf>
			HAL_UART_Transmit(&huart2,msg,strlen(msg),HAL_MAX_DELAY);
 8001996:	4869      	ldr	r0, [pc, #420]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 8001998:	f7fe fc8a 	bl	80002b0 <strlen>
 800199c:	4603      	mov	r3, r0
 800199e:	b29a      	uxth	r2, r3
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	4965      	ldr	r1, [pc, #404]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 80019a6:	4866      	ldr	r0, [pc, #408]	@ (8001b40 <Callback_a_min_timer+0x2d8>)
 80019a8:	f002 fdc8 	bl	800453c <HAL_UART_Transmit>

			sprintf(msg_a,"BPM: %d",final);
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	496e      	ldr	r1, [pc, #440]	@ (8001b68 <Callback_a_min_timer+0x300>)
 80019b0:	485f      	ldr	r0, [pc, #380]	@ (8001b30 <Callback_a_min_timer+0x2c8>)
 80019b2:	f006 fccb 	bl	800834c <siprintf>
			sprintf(msg_b,"Temp: %d C",temp_final);
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	496c      	ldr	r1, [pc, #432]	@ (8001b6c <Callback_a_min_timer+0x304>)
 80019ba:	485f      	ldr	r0, [pc, #380]	@ (8001b38 <Callback_a_min_timer+0x2d0>)
 80019bc:	f006 fcc6 	bl	800834c <siprintf>
			 lcd_clear();
 80019c0:	f7ff fe20 	bl	8001604 <lcd_clear>
			 lcd_put_cur(0,0);
 80019c4:	2100      	movs	r1, #0
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff fe26 	bl	8001618 <lcd_put_cur>
			 lcd_send_string(msg_a);
 80019cc:	4858      	ldr	r0, [pc, #352]	@ (8001b30 <Callback_a_min_timer+0x2c8>)
 80019ce:	f7ff fe5b 	bl	8001688 <lcd_send_string>
			 lcd_put_cur(1,0);
 80019d2:	2100      	movs	r1, #0
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7ff fe1f 	bl	8001618 <lcd_put_cur>
			 lcd_send_string(msg_b);
 80019da:	4857      	ldr	r0, [pc, #348]	@ (8001b38 <Callback_a_min_timer+0x2d0>)
 80019dc:	f7ff fe54 	bl	8001688 <lcd_send_string>
 80019e0:	e0fa      	b.n	8001bd8 <Callback_a_min_timer+0x370>
		}
		else
		{
			sprintf(msg_a,"ADC1: %d",ADC1_value);
 80019e2:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <Callback_a_min_timer+0x308>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4962      	ldr	r1, [pc, #392]	@ (8001b74 <Callback_a_min_timer+0x30c>)
 80019ea:	4851      	ldr	r0, [pc, #324]	@ (8001b30 <Callback_a_min_timer+0x2c8>)
 80019ec:	f006 fcae 	bl	800834c <siprintf>
			sprintf(msg_b,"ADC2: %d",(int)ADC2_value);
 80019f0:	4b61      	ldr	r3, [pc, #388]	@ (8001b78 <Callback_a_min_timer+0x310>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019fa:	ee17 2a90 	vmov	r2, s15
 80019fe:	495f      	ldr	r1, [pc, #380]	@ (8001b7c <Callback_a_min_timer+0x314>)
 8001a00:	484d      	ldr	r0, [pc, #308]	@ (8001b38 <Callback_a_min_timer+0x2d0>)
 8001a02:	f006 fca3 	bl	800834c <siprintf>
			lcd_clear();
 8001a06:	f7ff fdfd 	bl	8001604 <lcd_clear>
			lcd_put_cur(0,0);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff fe03 	bl	8001618 <lcd_put_cur>
			lcd_send_string(msg_a);
 8001a12:	4847      	ldr	r0, [pc, #284]	@ (8001b30 <Callback_a_min_timer+0x2c8>)
 8001a14:	f7ff fe38 	bl	8001688 <lcd_send_string>
			lcd_put_cur(1,0);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f7ff fdfc 	bl	8001618 <lcd_put_cur>
			lcd_send_string(msg_b);
 8001a20:	4845      	ldr	r0, [pc, #276]	@ (8001b38 <Callback_a_min_timer+0x2d0>)
 8001a22:	f7ff fe31 	bl	8001688 <lcd_send_string>
 8001a26:	e0d7      	b.n	8001bd8 <Callback_a_min_timer+0x370>
		}

	}


	else if(final<59 && final>10)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a2c:	dc49      	bgt.n	8001ac2 <Callback_a_min_timer+0x25a>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b0a      	cmp	r3, #10
 8001a32:	dd46      	ble.n	8001ac2 <Callback_a_min_timer+0x25a>
	{


		if (debug_mode==0)
 8001a34:	4b49      	ldr	r3, [pc, #292]	@ (8001b5c <Callback_a_min_timer+0x2f4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d11f      	bne.n	8001a7c <Callback_a_min_timer+0x214>
		{
			sprintf(msg,"Recording data...\r\n");
 8001a3c:	4950      	ldr	r1, [pc, #320]	@ (8001b80 <Callback_a_min_timer+0x318>)
 8001a3e:	483f      	ldr	r0, [pc, #252]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 8001a40:	f006 fc84 	bl	800834c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),HAL_MAX_DELAY);
 8001a44:	483d      	ldr	r0, [pc, #244]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 8001a46:	f7fe fc33 	bl	80002b0 <strlen>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	493a      	ldr	r1, [pc, #232]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 8001a54:	483a      	ldr	r0, [pc, #232]	@ (8001b40 <Callback_a_min_timer+0x2d8>)
 8001a56:	f002 fd71 	bl	800453c <HAL_UART_Transmit>

			 lcd_clear();
 8001a5a:	f7ff fdd3 	bl	8001604 <lcd_clear>
			 lcd_put_cur(0,0);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fdd9 	bl	8001618 <lcd_put_cur>
			 lcd_send_string("Recording");
 8001a66:	4847      	ldr	r0, [pc, #284]	@ (8001b84 <Callback_a_min_timer+0x31c>)
 8001a68:	f7ff fe0e 	bl	8001688 <lcd_send_string>
			 lcd_put_cur(1,0);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f7ff fdd2 	bl	8001618 <lcd_put_cur>
			 lcd_send_string("Data....");
 8001a74:	4844      	ldr	r0, [pc, #272]	@ (8001b88 <Callback_a_min_timer+0x320>)
 8001a76:	f7ff fe07 	bl	8001688 <lcd_send_string>
		if (debug_mode==0)
 8001a7a:	e0ad      	b.n	8001bd8 <Callback_a_min_timer+0x370>
		}
		else
		{
			sprintf(msg_a,"ADC1: %d",ADC1_value);
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b70 <Callback_a_min_timer+0x308>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	493c      	ldr	r1, [pc, #240]	@ (8001b74 <Callback_a_min_timer+0x30c>)
 8001a84:	482a      	ldr	r0, [pc, #168]	@ (8001b30 <Callback_a_min_timer+0x2c8>)
 8001a86:	f006 fc61 	bl	800834c <siprintf>
			sprintf(msg_b,"ADC2: %d",(int)ADC2_value);
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b78 <Callback_a_min_timer+0x310>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a94:	ee17 2a90 	vmov	r2, s15
 8001a98:	4938      	ldr	r1, [pc, #224]	@ (8001b7c <Callback_a_min_timer+0x314>)
 8001a9a:	4827      	ldr	r0, [pc, #156]	@ (8001b38 <Callback_a_min_timer+0x2d0>)
 8001a9c:	f006 fc56 	bl	800834c <siprintf>
			lcd_clear();
 8001aa0:	f7ff fdb0 	bl	8001604 <lcd_clear>
			lcd_put_cur(0,0);
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff fdb6 	bl	8001618 <lcd_put_cur>
			lcd_send_string(msg_a);
 8001aac:	4820      	ldr	r0, [pc, #128]	@ (8001b30 <Callback_a_min_timer+0x2c8>)
 8001aae:	f7ff fdeb 	bl	8001688 <lcd_send_string>
			lcd_put_cur(1,0);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7ff fdaf 	bl	8001618 <lcd_put_cur>
			lcd_send_string(msg_b);
 8001aba:	481f      	ldr	r0, [pc, #124]	@ (8001b38 <Callback_a_min_timer+0x2d0>)
 8001abc:	f7ff fde4 	bl	8001688 <lcd_send_string>
		if (debug_mode==0)
 8001ac0:	e08a      	b.n	8001bd8 <Callback_a_min_timer+0x370>
		}


	}
	else if (final<10)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b09      	cmp	r3, #9
 8001ac6:	f300 8087 	bgt.w	8001bd8 <Callback_a_min_timer+0x370>
	{

		if (debug_mode==0)
 8001aca:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <Callback_a_min_timer+0x2f4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d160      	bne.n	8001b94 <Callback_a_min_timer+0x32c>
				{
			sprintf(msg,"Please put your finger on sensor\r\n");
 8001ad2:	492e      	ldr	r1, [pc, #184]	@ (8001b8c <Callback_a_min_timer+0x324>)
 8001ad4:	4819      	ldr	r0, [pc, #100]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 8001ad6:	f006 fc39 	bl	800834c <siprintf>
			sprintf(msg_b,"Temp: %d C",temp_final);
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	4923      	ldr	r1, [pc, #140]	@ (8001b6c <Callback_a_min_timer+0x304>)
 8001ade:	4816      	ldr	r0, [pc, #88]	@ (8001b38 <Callback_a_min_timer+0x2d0>)
 8001ae0:	f006 fc34 	bl	800834c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),HAL_MAX_DELAY);
 8001ae4:	4815      	ldr	r0, [pc, #84]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 8001ae6:	f7fe fbe3 	bl	80002b0 <strlen>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	4912      	ldr	r1, [pc, #72]	@ (8001b3c <Callback_a_min_timer+0x2d4>)
 8001af4:	4812      	ldr	r0, [pc, #72]	@ (8001b40 <Callback_a_min_timer+0x2d8>)
 8001af6:	f002 fd21 	bl	800453c <HAL_UART_Transmit>

			 lcd_clear();
 8001afa:	f7ff fd83 	bl	8001604 <lcd_clear>
			 lcd_put_cur(0,0);
 8001afe:	2100      	movs	r1, #0
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fd89 	bl	8001618 <lcd_put_cur>
			 lcd_send_string("BPM: No finger!"); //no_finger
 8001b06:	4822      	ldr	r0, [pc, #136]	@ (8001b90 <Callback_a_min_timer+0x328>)
 8001b08:	f7ff fdbe 	bl	8001688 <lcd_send_string>
			 lcd_put_cur(1,0);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f7ff fd82 	bl	8001618 <lcd_put_cur>
			 lcd_send_string(msg_b);
 8001b14:	4808      	ldr	r0, [pc, #32]	@ (8001b38 <Callback_a_min_timer+0x2d0>)
 8001b16:	f7ff fdb7 	bl	8001688 <lcd_send_string>
 8001b1a:	e05d      	b.n	8001bd8 <Callback_a_min_timer+0x370>
 8001b1c:	f3af 8000 	nop.w
 8001b20:	33333333 	.word	0x33333333
 8001b24:	40033333 	.word	0x40033333
 8001b28:	20000a8c 	.word	0x20000a8c
 8001b2c:	0800a62c 	.word	0x0800a62c
 8001b30:	20000a04 	.word	0x20000a04
 8001b34:	0800a638 	.word	0x0800a638
 8001b38:	20000a40 	.word	0x20000a40
 8001b3c:	200009c8 	.word	0x200009c8
 8001b40:	20000974 	.word	0x20000974
 8001b44:	20000a84 	.word	0x20000a84
 8001b48:	20000a7c 	.word	0x20000a7c
 8001b4c:	20000b18 	.word	0x20000b18
 8001b50:	457ff000 	.word	0x457ff000
 8001b54:	20000a80 	.word	0x20000a80
 8001b58:	42c80000 	.word	0x42c80000
 8001b5c:	20000a88 	.word	0x20000a88
 8001b60:	0800a648 	.word	0x0800a648
 8001b64:	0800a654 	.word	0x0800a654
 8001b68:	0800a664 	.word	0x0800a664
 8001b6c:	0800a66c 	.word	0x0800a66c
 8001b70:	20000a90 	.word	0x20000a90
 8001b74:	0800a678 	.word	0x0800a678
 8001b78:	20000a94 	.word	0x20000a94
 8001b7c:	0800a684 	.word	0x0800a684
 8001b80:	0800a690 	.word	0x0800a690
 8001b84:	0800a6a4 	.word	0x0800a6a4
 8001b88:	0800a6b0 	.word	0x0800a6b0
 8001b8c:	0800a6bc 	.word	0x0800a6bc
 8001b90:	0800a6e0 	.word	0x0800a6e0
				}
				else
				{
					sprintf(msg_a,"ADC1: %d",ADC1_value);
 8001b94:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <Callback_a_min_timer+0x388>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4916      	ldr	r1, [pc, #88]	@ (8001bf4 <Callback_a_min_timer+0x38c>)
 8001b9c:	4816      	ldr	r0, [pc, #88]	@ (8001bf8 <Callback_a_min_timer+0x390>)
 8001b9e:	f006 fbd5 	bl	800834c <siprintf>
					sprintf(msg_b,"ADC2: %d",(int)ADC2_value);
 8001ba2:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <Callback_a_min_timer+0x394>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bac:	ee17 2a90 	vmov	r2, s15
 8001bb0:	4913      	ldr	r1, [pc, #76]	@ (8001c00 <Callback_a_min_timer+0x398>)
 8001bb2:	4814      	ldr	r0, [pc, #80]	@ (8001c04 <Callback_a_min_timer+0x39c>)
 8001bb4:	f006 fbca 	bl	800834c <siprintf>
					lcd_clear();
 8001bb8:	f7ff fd24 	bl	8001604 <lcd_clear>
					lcd_put_cur(0,0);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fd2a 	bl	8001618 <lcd_put_cur>
					lcd_send_string(msg_a);
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <Callback_a_min_timer+0x390>)
 8001bc6:	f7ff fd5f 	bl	8001688 <lcd_send_string>
					lcd_put_cur(1,0);
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7ff fd23 	bl	8001618 <lcd_put_cur>
					lcd_send_string(msg_b);
 8001bd2:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <Callback_a_min_timer+0x39c>)
 8001bd4:	f7ff fd58 	bl	8001688 <lcd_send_string>
				}


	}
	//osThreadResume(PulseTaskHandle);
	BPM[i]=i;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <Callback_a_min_timer+0x3a0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <Callback_a_min_timer+0x3a0>)
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	490a      	ldr	r1, [pc, #40]	@ (8001c0c <Callback_a_min_timer+0x3a4>)
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  /* USER CODE END Callback_a_min_timer */
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000a90 	.word	0x20000a90
 8001bf4:	0800a678 	.word	0x0800a678
 8001bf8:	20000a04 	.word	0x20000a04
 8001bfc:	20000a94 	.word	0x20000a94
 8001c00:	0800a684 	.word	0x0800a684
 8001c04:	20000a40 	.word	0x20000a40
 8001c08:	20000a84 	.word	0x20000a84
 8001c0c:	20000a7c 	.word	0x20000a7c

08001c10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c22:	f000 fae5 	bl	80021f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40001000 	.word	0x40001000

08001c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i
}
 8001c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <Error_Handler+0x8>

08001c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_MspInit+0x54>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	4a11      	ldr	r2, [pc, #68]	@ (8001c94 <HAL_MspInit+0x54>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c56:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <HAL_MspInit+0x54>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_MspInit+0x54>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <HAL_MspInit+0x54>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <HAL_MspInit+0x54>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	210f      	movs	r1, #15
 8001c82:	f06f 0001 	mvn.w	r0, #1
 8001c86:	f000 ffbf 	bl	8002c08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800

08001c98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	@ 0x30
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8001d70 <HAL_ADC_MspInit+0xd8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d128      	bne.n	8001d0c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cca:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	4b26      	ldr	r3, [pc, #152]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4a25      	ldr	r2, [pc, #148]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	4619      	mov	r1, r3
 8001d04:	481c      	ldr	r0, [pc, #112]	@ (8001d78 <HAL_ADC_MspInit+0xe0>)
 8001d06:	f000 ffa9 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d0a:	e02c      	b.n	8001d66 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1a      	ldr	r2, [pc, #104]	@ (8001d7c <HAL_ADC_MspInit+0xe4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d127      	bne.n	8001d66 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b16      	ldr	r3, [pc, #88]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	4a15      	ldr	r2, [pc, #84]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001d20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d26:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <HAL_ADC_MspInit+0xdc>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d52:	2303      	movs	r3, #3
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <HAL_ADC_MspInit+0xe0>)
 8001d62:	f000 ff7b 	bl	8002c5c <HAL_GPIO_Init>
}
 8001d66:	bf00      	nop
 8001d68:	3730      	adds	r7, #48	@ 0x30
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40012000 	.word	0x40012000
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40012100 	.word	0x40012100

08001d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <HAL_TIM_Base_MspInit+0x3c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d10d      	bne.n	8001dae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x40>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	4a09      	ldr	r2, [pc, #36]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x40>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da2:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x40>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	@ 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a19      	ldr	r2, [pc, #100]	@ (8001e48 <HAL_UART_MspInit+0x84>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12b      	bne.n	8001e3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <HAL_UART_MspInit+0x88>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <HAL_UART_MspInit+0x88>)
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_UART_MspInit+0x88>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_UART_MspInit+0x88>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a10      	ldr	r2, [pc, #64]	@ (8001e4c <HAL_UART_MspInit+0x88>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <HAL_UART_MspInit+0x88>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e1e:	230c      	movs	r3, #12
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e2e:	2307      	movs	r3, #7
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <HAL_UART_MspInit+0x8c>)
 8001e3a:	f000 ff0f 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	@ 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40004400 	.word	0x40004400
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000

08001e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08e      	sub	sp, #56	@ 0x38
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	4b33      	ldr	r3, [pc, #204]	@ (8001f38 <HAL_InitTick+0xe4>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	4a32      	ldr	r2, [pc, #200]	@ (8001f38 <HAL_InitTick+0xe4>)
 8001e6e:	f043 0310 	orr.w	r3, r3, #16
 8001e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e74:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <HAL_InitTick+0xe4>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e80:	f107 0210 	add.w	r2, r7, #16
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f001 fa16 	bl	80032bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e9a:	f001 f9e7 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8001e9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ea0:	e004      	b.n	8001eac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ea2:	f001 f9e3 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eae:	4a23      	ldr	r2, [pc, #140]	@ (8001f3c <HAL_InitTick+0xe8>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	0c9b      	lsrs	r3, r3, #18
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <HAL_InitTick+0xec>)
 8001ebc:	4a21      	ldr	r2, [pc, #132]	@ (8001f44 <HAL_InitTick+0xf0>)
 8001ebe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <HAL_InitTick+0xec>)
 8001ec2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ec6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <HAL_InitTick+0xec>)
 8001eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ecc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <HAL_InitTick+0xec>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_InitTick+0xec>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_InitTick+0xec>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001ee0:	4817      	ldr	r0, [pc, #92]	@ (8001f40 <HAL_InitTick+0xec>)
 8001ee2:	f001 fe65 	bl	8003bb0 <HAL_TIM_Base_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001eec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d11b      	bne.n	8001f2c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ef4:	4812      	ldr	r0, [pc, #72]	@ (8001f40 <HAL_InitTick+0xec>)
 8001ef6:	f001 feab 	bl	8003c50 <HAL_TIM_Base_Start_IT>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d111      	bne.n	8001f2c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f08:	2036      	movs	r0, #54	@ 0x36
 8001f0a:	f000 fe99 	bl	8002c40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d808      	bhi.n	8001f26 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	2036      	movs	r0, #54	@ 0x36
 8001f1a:	f000 fe75 	bl	8002c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <HAL_InitTick+0xf4>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	e002      	b.n	8001f2c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3738      	adds	r7, #56	@ 0x38
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	431bde83 	.word	0x431bde83
 8001f40:	20000b1c 	.word	0x20000b1c
 8001f44:	40001000 	.word	0x40001000
 8001f48:	20000004 	.word	0x20000004

08001f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <NMI_Handler+0x4>

08001f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <HardFault_Handler+0x4>

08001f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <MemManage_Handler+0x4>

08001f64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <BusFault_Handler+0x4>

08001f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <UsageFault_Handler+0x4>

08001f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f86:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f8a:	f001 f815 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f98:	4802      	ldr	r0, [pc, #8]	@ (8001fa4 <TIM6_DAC_IRQHandler+0x10>)
 8001f9a:	f001 fec9 	bl	8003d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000b1c 	.word	0x20000b1c

08001fa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return 1;
 8001fac:	2301      	movs	r3, #1
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_kill>:

int _kill(int pid, int sig)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fc2:	f006 fa79 	bl	80084b8 <__errno>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2216      	movs	r2, #22
 8001fca:	601a      	str	r2, [r3, #0]
  return -1;
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <_exit>:

void _exit (int status)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ffe7 	bl	8001fb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fea:	bf00      	nop
 8001fec:	e7fd      	b.n	8001fea <_exit+0x12>

08001fee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e00a      	b.n	8002016 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002000:	f3af 8000 	nop.w
 8002004:	4601      	mov	r1, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	60ba      	str	r2, [r7, #8]
 800200c:	b2ca      	uxtb	r2, r1
 800200e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	dbf0      	blt.n	8002000 <_read+0x12>
  }

  return len;
 800201e:	687b      	ldr	r3, [r7, #4]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	e009      	b.n	800204e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	60ba      	str	r2, [r7, #8]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3301      	adds	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	dbf1      	blt.n	800203a <_write+0x12>
  }
  return len;
 8002056:	687b      	ldr	r3, [r7, #4]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_close>:

int _close(int file)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002088:	605a      	str	r2, [r3, #4]
  return 0;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_isatty>:

int _isatty(int file)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020a0:	2301      	movs	r3, #1
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d0:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <_sbrk+0x5c>)
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <_sbrk+0x60>)
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020dc:	4b13      	ldr	r3, [pc, #76]	@ (800212c <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <_sbrk+0x64>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <_sbrk+0x68>)
 80020e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ea:	4b10      	ldr	r3, [pc, #64]	@ (800212c <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d207      	bcs.n	8002108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f8:	f006 f9de 	bl	80084b8 <__errno>
 80020fc:	4603      	mov	r3, r0
 80020fe:	220c      	movs	r2, #12
 8002100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	e009      	b.n	800211c <_sbrk+0x54>
  }
  prev_heap_end = __sbrk_heap_end;
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210e:	4b07      	ldr	r3, [pc, #28]	@ (800212c <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	4a05      	ldr	r2, [pc, #20]	@ (800212c <_sbrk+0x64>)
 8002118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211a:	68fb      	ldr	r3, [r7, #12]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20020000 	.word	0x20020000
 8002128:	00000400 	.word	0x00000400
 800212c:	20000b64 	.word	0x20000b64
 8002130:	20004b48 	.word	0x20004b48

08002134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <SystemInit+0x20>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	4a05      	ldr	r2, [pc, #20]	@ (8002154 <SystemInit+0x20>)
 8002140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002158:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002190 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800215c:	f7ff ffea 	bl	8002134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002160:	480c      	ldr	r0, [pc, #48]	@ (8002194 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002162:	490d      	ldr	r1, [pc, #52]	@ (8002198 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002164:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002168:	e002      	b.n	8002170 <LoopCopyDataInit>

0800216a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800216c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216e:	3304      	adds	r3, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002174:	d3f9      	bcc.n	800216a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002176:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002178:	4c0a      	ldr	r4, [pc, #40]	@ (80021a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800217c:	e001      	b.n	8002182 <LoopFillZerobss>

0800217e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002180:	3204      	adds	r2, #4

08002182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002184:	d3fb      	bcc.n	800217e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002186:	f006 f99d 	bl	80084c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218a:	f7fe ff3f 	bl	800100c <main>
  bx  lr    
 800218e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002198:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800219c:	0800aaa8 	.word	0x0800aaa8
  ldr r2, =_sbss
 80021a0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80021a4:	20004b48 	.word	0x20004b48

080021a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC_IRQHandler>
	...

080021ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b0:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	@ (80021ec <HAL_Init+0x40>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021bc:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <HAL_Init+0x40>)
 80021c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <HAL_Init+0x40>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 fd0c 	bl	8002bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	200f      	movs	r0, #15
 80021dc:	f7ff fe3a 	bl	8001e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff fd2e 	bl	8001c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00

080021f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000008 	.word	0x20000008
 8002214:	20000b68 	.word	0x20000b68

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000b68 	.word	0x20000b68

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff ffee 	bl	8002218 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_Delay+0x44>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffde 	bl	8002218 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000008 	.word	0x20000008

08002278 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e033      	b.n	80022f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff fcfe 	bl	8001c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d118      	bne.n	80022e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022be:	f023 0302 	bic.w	r3, r3, #2
 80022c2:	f043 0202 	orr.w	r2, r3, #2
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fae8 	bl	80028a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	f043 0201 	orr.w	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80022e6:	e001      	b.n	80022ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_ADC_Start+0x1a>
 8002316:	2302      	movs	r3, #2
 8002318:	e0b2      	b.n	8002480 <HAL_ADC_Start+0x180>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b01      	cmp	r3, #1
 800232e:	d018      	beq.n	8002362 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002340:	4b52      	ldr	r3, [pc, #328]	@ (800248c <HAL_ADC_Start+0x18c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a52      	ldr	r2, [pc, #328]	@ (8002490 <HAL_ADC_Start+0x190>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0c9a      	lsrs	r2, r3, #18
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002354:	e002      	b.n	800235c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3b01      	subs	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f9      	bne.n	8002356 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d17a      	bne.n	8002466 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800239a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ae:	d106      	bne.n	80023be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b4:	f023 0206 	bic.w	r2, r3, #6
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80023bc:	e002      	b.n	80023c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023cc:	4b31      	ldr	r3, [pc, #196]	@ (8002494 <HAL_ADC_Start+0x194>)
 80023ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023d8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d12a      	bne.n	800243c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002498 <HAL_ADC_Start+0x198>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d015      	beq.n	800241c <HAL_ADC_Start+0x11c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a29      	ldr	r2, [pc, #164]	@ (800249c <HAL_ADC_Start+0x19c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d105      	bne.n	8002406 <HAL_ADC_Start+0x106>
 80023fa:	4b26      	ldr	r3, [pc, #152]	@ (8002494 <HAL_ADC_Start+0x194>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a25      	ldr	r2, [pc, #148]	@ (80024a0 <HAL_ADC_Start+0x1a0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d136      	bne.n	800247e <HAL_ADC_Start+0x17e>
 8002410:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <HAL_ADC_Start+0x194>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d130      	bne.n	800247e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d129      	bne.n	800247e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	e020      	b.n	800247e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a15      	ldr	r2, [pc, #84]	@ (8002498 <HAL_ADC_Start+0x198>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d11b      	bne.n	800247e <HAL_ADC_Start+0x17e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d114      	bne.n	800247e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	e00b      	b.n	800247e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	f043 0210 	orr.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	20000000 	.word	0x20000000
 8002490:	431bde83 	.word	0x431bde83
 8002494:	40012300 	.word	0x40012300
 8002498:	40012000 	.word	0x40012000
 800249c:	40012100 	.word	0x40012100
 80024a0:	40012200 	.word	0x40012200

080024a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_Stop+0x16>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e021      	b.n	80024fe <HAL_ADC_Stop+0x5a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002526:	d113      	bne.n	8002550 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002536:	d10b      	bne.n	8002550 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e063      	b.n	8002618 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002550:	f7ff fe62 	bl	8002218 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002556:	e021      	b.n	800259c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255e:	d01d      	beq.n	800259c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <HAL_ADC_PollForConversion+0x6c>
 8002566:	f7ff fe57 	bl	8002218 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d212      	bcs.n	800259c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b02      	cmp	r3, #2
 8002582:	d00b      	beq.n	800259c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	f043 0204 	orr.w	r2, r3, #4
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e03d      	b.n	8002618 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d1d6      	bne.n	8002558 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f06f 0212 	mvn.w	r2, #18
 80025b2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d123      	bne.n	8002616 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11f      	bne.n	8002616 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d111      	bne.n	8002616 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1c>
 8002654:	2302      	movs	r3, #2
 8002656:	e113      	b.n	8002880 <HAL_ADC_ConfigChannel+0x244>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b09      	cmp	r3, #9
 8002666:	d925      	bls.n	80026b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68d9      	ldr	r1, [r3, #12]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	3b1e      	subs	r3, #30
 800267e:	2207      	movs	r2, #7
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43da      	mvns	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	400a      	ands	r2, r1
 800268c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68d9      	ldr	r1, [r3, #12]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	4603      	mov	r3, r0
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4403      	add	r3, r0
 80026a6:	3b1e      	subs	r3, #30
 80026a8:	409a      	lsls	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	e022      	b.n	80026fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6919      	ldr	r1, [r3, #16]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	2207      	movs	r2, #7
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	400a      	ands	r2, r1
 80026d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6919      	ldr	r1, [r3, #16]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4403      	add	r3, r0
 80026f0:	409a      	lsls	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d824      	bhi.n	800274c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	3b05      	subs	r3, #5
 8002714:	221f      	movs	r2, #31
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	400a      	ands	r2, r1
 8002722:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	4618      	mov	r0, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	3b05      	subs	r3, #5
 800273e:	fa00 f203 	lsl.w	r2, r0, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	635a      	str	r2, [r3, #52]	@ 0x34
 800274a:	e04c      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d824      	bhi.n	800279e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	3b23      	subs	r3, #35	@ 0x23
 8002766:	221f      	movs	r2, #31
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43da      	mvns	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	400a      	ands	r2, r1
 8002774:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	3b23      	subs	r3, #35	@ 0x23
 8002790:	fa00 f203 	lsl.w	r2, r0, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	631a      	str	r2, [r3, #48]	@ 0x30
 800279c:	e023      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b41      	subs	r3, #65	@ 0x41
 80027b0:	221f      	movs	r2, #31
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b41      	subs	r3, #65	@ 0x41
 80027da:	fa00 f203 	lsl.w	r2, r0, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027e6:	4b29      	ldr	r3, [pc, #164]	@ (800288c <HAL_ADC_ConfigChannel+0x250>)
 80027e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a28      	ldr	r2, [pc, #160]	@ (8002890 <HAL_ADC_ConfigChannel+0x254>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d10f      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x1d8>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b12      	cmp	r3, #18
 80027fa:	d10b      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1d      	ldr	r2, [pc, #116]	@ (8002890 <HAL_ADC_ConfigChannel+0x254>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d12b      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x23a>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1c      	ldr	r2, [pc, #112]	@ (8002894 <HAL_ADC_ConfigChannel+0x258>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d003      	beq.n	8002830 <HAL_ADC_ConfigChannel+0x1f4>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b11      	cmp	r3, #17
 800282e:	d122      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a11      	ldr	r2, [pc, #68]	@ (8002894 <HAL_ADC_ConfigChannel+0x258>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d111      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002852:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_ADC_ConfigChannel+0x25c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a11      	ldr	r2, [pc, #68]	@ (800289c <HAL_ADC_ConfigChannel+0x260>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	0c9a      	lsrs	r2, r3, #18
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002868:	e002      	b.n	8002870 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	3b01      	subs	r3, #1
 800286e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f9      	bne.n	800286a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40012300 	.word	0x40012300
 8002890:	40012000 	.word	0x40012000
 8002894:	10000012 	.word	0x10000012
 8002898:	20000000 	.word	0x20000000
 800289c:	431bde83 	.word	0x431bde83

080028a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028a8:	4b79      	ldr	r3, [pc, #484]	@ (8002a90 <ADC_Init+0x1f0>)
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	021a      	lsls	r2, r3, #8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800291a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6899      	ldr	r1, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	4a58      	ldr	r2, [pc, #352]	@ (8002a94 <ADC_Init+0x1f4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d022      	beq.n	800297e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002946:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6899      	ldr	r1, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	e00f      	b.n	800299e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800298c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800299c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0202 	bic.w	r2, r2, #2
 80029ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6899      	ldr	r1, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7e1b      	ldrb	r3, [r3, #24]
 80029b8:	005a      	lsls	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01b      	beq.n	8002a04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	3b01      	subs	r3, #1
 80029f8:	035a      	lsls	r2, r3, #13
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	e007      	b.n	8002a14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a12:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	051a      	lsls	r2, r3, #20
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a56:	025a      	lsls	r2, r3, #9
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6899      	ldr	r1, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	029a      	lsls	r2, r3, #10
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	609a      	str	r2, [r3, #8]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40012300 	.word	0x40012300
 8002a94:	0f000001 	.word	0x0f000001

08002a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aca:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60d3      	str	r3, [r2, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae4:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 0307 	and.w	r3, r3, #7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	db0b      	blt.n	8002b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4907      	ldr	r1, [pc, #28]	@ (8002b34 <__NVIC_EnableIRQ+0x38>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e100 	.word	0xe000e100

08002b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	db0a      	blt.n	8002b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	490c      	ldr	r1, [pc, #48]	@ (8002b84 <__NVIC_SetPriority+0x4c>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b60:	e00a      	b.n	8002b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4908      	ldr	r1, [pc, #32]	@ (8002b88 <__NVIC_SetPriority+0x50>)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	761a      	strb	r2, [r3, #24]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	@ 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f1c3 0307 	rsb	r3, r3, #7
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	bf28      	it	cs
 8002baa:	2304      	movcs	r3, #4
 8002bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d902      	bls.n	8002bbc <NVIC_EncodePriority+0x30>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3b03      	subs	r3, #3
 8002bba:	e000      	b.n	8002bbe <NVIC_EncodePriority+0x32>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43d9      	mvns	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	4313      	orrs	r3, r2
         );
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	@ 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ff4c 	bl	8002a98 <__NVIC_SetPriorityGrouping>
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c1a:	f7ff ff61 	bl	8002ae0 <__NVIC_GetPriorityGrouping>
 8002c1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	6978      	ldr	r0, [r7, #20]
 8002c26:	f7ff ffb1 	bl	8002b8c <NVIC_EncodePriority>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ff80 	bl	8002b38 <__NVIC_SetPriority>
}
 8002c38:	bf00      	nop
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ff54 	bl	8002afc <__NVIC_EnableIRQ>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	@ 0x24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e165      	b.n	8002f44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8154 	bne.w	8002f3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d005      	beq.n	8002cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d130      	bne.n	8002d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 0201 	and.w	r2, r3, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d017      	beq.n	8002d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d123      	bne.n	8002da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	08da      	lsrs	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3208      	adds	r2, #8
 8002d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	08da      	lsrs	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	69b9      	ldr	r1, [r7, #24]
 8002d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80ae 	beq.w	8002f3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	4a5c      	ldr	r2, [pc, #368]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002df2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dfe:	4a58      	ldr	r2, [pc, #352]	@ (8002f60 <HAL_GPIO_Init+0x304>)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3302      	adds	r3, #2
 8002e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4f      	ldr	r2, [pc, #316]	@ (8002f64 <HAL_GPIO_Init+0x308>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d025      	beq.n	8002e76 <HAL_GPIO_Init+0x21a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4e      	ldr	r2, [pc, #312]	@ (8002f68 <HAL_GPIO_Init+0x30c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <HAL_GPIO_Init+0x216>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4d      	ldr	r2, [pc, #308]	@ (8002f6c <HAL_GPIO_Init+0x310>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d019      	beq.n	8002e6e <HAL_GPIO_Init+0x212>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8002f70 <HAL_GPIO_Init+0x314>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_GPIO_Init+0x20e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4b      	ldr	r2, [pc, #300]	@ (8002f74 <HAL_GPIO_Init+0x318>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00d      	beq.n	8002e66 <HAL_GPIO_Init+0x20a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f78 <HAL_GPIO_Init+0x31c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <HAL_GPIO_Init+0x206>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a49      	ldr	r2, [pc, #292]	@ (8002f7c <HAL_GPIO_Init+0x320>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_GPIO_Init+0x202>
 8002e5a:	2306      	movs	r3, #6
 8002e5c:	e00c      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e5e:	2307      	movs	r3, #7
 8002e60:	e00a      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e62:	2305      	movs	r3, #5
 8002e64:	e008      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e66:	2304      	movs	r3, #4
 8002e68:	e006      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e004      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e002      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e76:	2300      	movs	r3, #0
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f002 0203 	and.w	r2, r2, #3
 8002e7e:	0092      	lsls	r2, r2, #2
 8002e80:	4093      	lsls	r3, r2
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e88:	4935      	ldr	r1, [pc, #212]	@ (8002f60 <HAL_GPIO_Init+0x304>)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	3302      	adds	r3, #2
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e96:	4b3a      	ldr	r3, [pc, #232]	@ (8002f80 <HAL_GPIO_Init+0x324>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eba:	4a31      	ldr	r2, [pc, #196]	@ (8002f80 <HAL_GPIO_Init+0x324>)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f80 <HAL_GPIO_Init+0x324>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee4:	4a26      	ldr	r2, [pc, #152]	@ (8002f80 <HAL_GPIO_Init+0x324>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eea:	4b25      	ldr	r3, [pc, #148]	@ (8002f80 <HAL_GPIO_Init+0x324>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f80 <HAL_GPIO_Init+0x324>)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <HAL_GPIO_Init+0x324>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f38:	4a11      	ldr	r2, [pc, #68]	@ (8002f80 <HAL_GPIO_Init+0x324>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	f67f ae96 	bls.w	8002c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3724      	adds	r7, #36	@ 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40013800 	.word	0x40013800
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40021400 	.word	0x40021400
 8002f7c:	40021800 	.word	0x40021800
 8002f80:	40013c00 	.word	0x40013c00

08002f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
 8002f90:	4613      	mov	r3, r2
 8002f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f94:	787b      	ldrb	r3, [r7, #1]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa0:	e003      	b.n	8002faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	041a      	lsls	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	619a      	str	r2, [r3, #24]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fc2:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fce:	4a05      	ldr	r2, [pc, #20]	@ (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe f802 	bl	8000fe0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40013c00 	.word	0x40013c00

08002fe8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	4b20      	ldr	r3, [pc, #128]	@ (8003078 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8003078 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003000:	6413      	str	r3, [r2, #64]	@ 0x40
 8003002:	4b1d      	ldr	r3, [pc, #116]	@ (8003078 <HAL_PWREx_EnableOverDrive+0x90>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800300e:	4b1b      	ldr	r3, [pc, #108]	@ (800307c <HAL_PWREx_EnableOverDrive+0x94>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003014:	f7ff f900 	bl	8002218 <HAL_GetTick>
 8003018:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800301a:	e009      	b.n	8003030 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800301c:	f7ff f8fc 	bl	8002218 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800302a:	d901      	bls.n	8003030 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e01f      	b.n	8003070 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003030:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <HAL_PWREx_EnableOverDrive+0x98>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800303c:	d1ee      	bne.n	800301c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800303e:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003044:	f7ff f8e8 	bl	8002218 <HAL_GetTick>
 8003048:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800304a:	e009      	b.n	8003060 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800304c:	f7ff f8e4 	bl	8002218 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800305a:	d901      	bls.n	8003060 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e007      	b.n	8003070 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003060:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <HAL_PWREx_EnableOverDrive+0x98>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003068:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800306c:	d1ee      	bne.n	800304c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40023800 	.word	0x40023800
 800307c:	420e0040 	.word	0x420e0040
 8003080:	40007000 	.word	0x40007000
 8003084:	420e0044 	.word	0x420e0044

08003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0cc      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b68      	ldr	r3, [pc, #416]	@ (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d90c      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b65      	ldr	r3, [pc, #404]	@ (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b63      	ldr	r3, [pc, #396]	@ (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0b8      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d020      	beq.n	8003112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030dc:	4b59      	ldr	r3, [pc, #356]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a58      	ldr	r2, [pc, #352]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f4:	4b53      	ldr	r3, [pc, #332]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a52      	ldr	r2, [pc, #328]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b50      	ldr	r3, [pc, #320]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	494d      	ldr	r1, [pc, #308]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d044      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d119      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e07f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d003      	beq.n	8003146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003142:	2b03      	cmp	r3, #3
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	4b3f      	ldr	r3, [pc, #252]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e06f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003156:	4b3b      	ldr	r3, [pc, #236]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e067      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003166:	4b37      	ldr	r3, [pc, #220]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4934      	ldr	r1, [pc, #208]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003178:	f7ff f84e 	bl	8002218 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	e00a      	b.n	8003196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003180:	f7ff f84a 	bl	8002218 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e04f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	4b2b      	ldr	r3, [pc, #172]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 020c 	and.w	r2, r3, #12
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1eb      	bne.n	8003180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a8:	4b25      	ldr	r3, [pc, #148]	@ (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d20c      	bcs.n	80031d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b22      	ldr	r3, [pc, #136]	@ (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e032      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031dc:	4b19      	ldr	r3, [pc, #100]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4916      	ldr	r1, [pc, #88]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fa:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	490e      	ldr	r1, [pc, #56]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800320e:	f000 f887 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 8003212:	4602      	mov	r2, r0
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	490a      	ldr	r1, [pc, #40]	@ (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	5ccb      	ldrb	r3, [r1, r3]
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	4a09      	ldr	r2, [pc, #36]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800322a:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fe10 	bl	8001e54 <HAL_InitTick>

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023c00 	.word	0x40023c00
 8003244:	40023800 	.word	0x40023800
 8003248:	0800a70c 	.word	0x0800a70c
 800324c:	20000000 	.word	0x20000000
 8003250:	20000004 	.word	0x20000004

08003254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003258:	4b03      	ldr	r3, [pc, #12]	@ (8003268 <HAL_RCC_GetHCLKFreq+0x14>)
 800325a:	681b      	ldr	r3, [r3, #0]
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000000 	.word	0x20000000

0800326c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003270:	f7ff fff0 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 8003274:	4602      	mov	r2, r0
 8003276:	4b05      	ldr	r3, [pc, #20]	@ (800328c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	0a9b      	lsrs	r3, r3, #10
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4903      	ldr	r1, [pc, #12]	@ (8003290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003282:	5ccb      	ldrb	r3, [r1, r3]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40023800 	.word	0x40023800
 8003290:	0800a71c 	.word	0x0800a71c

08003294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003298:	f7ff ffdc 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b05      	ldr	r3, [pc, #20]	@ (80032b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	0b5b      	lsrs	r3, r3, #13
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4903      	ldr	r1, [pc, #12]	@ (80032b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	0800a71c 	.word	0x0800a71c

080032bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	220f      	movs	r2, #15
 80032ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032cc:	4b12      	ldr	r3, [pc, #72]	@ (8003318 <HAL_RCC_GetClockConfig+0x5c>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0203 	and.w	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <HAL_RCC_GetClockConfig+0x5c>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <HAL_RCC_GetClockConfig+0x5c>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80032f0:	4b09      	ldr	r3, [pc, #36]	@ (8003318 <HAL_RCC_GetClockConfig+0x5c>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	08db      	lsrs	r3, r3, #3
 80032f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032fe:	4b07      	ldr	r3, [pc, #28]	@ (800331c <HAL_RCC_GetClockConfig+0x60>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	601a      	str	r2, [r3, #0]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	40023c00 	.word	0x40023c00

08003320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003324:	b0a6      	sub	sp, #152	@ 0x98
 8003326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003346:	4bc8      	ldr	r3, [pc, #800]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x348>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b0c      	cmp	r3, #12
 8003350:	f200 817e 	bhi.w	8003650 <HAL_RCC_GetSysClockFreq+0x330>
 8003354:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335a:	bf00      	nop
 800335c:	08003391 	.word	0x08003391
 8003360:	08003651 	.word	0x08003651
 8003364:	08003651 	.word	0x08003651
 8003368:	08003651 	.word	0x08003651
 800336c:	08003399 	.word	0x08003399
 8003370:	08003651 	.word	0x08003651
 8003374:	08003651 	.word	0x08003651
 8003378:	08003651 	.word	0x08003651
 800337c:	080033a1 	.word	0x080033a1
 8003380:	08003651 	.word	0x08003651
 8003384:	08003651 	.word	0x08003651
 8003388:	08003651 	.word	0x08003651
 800338c:	0800350b 	.word	0x0800350b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003390:	4bb6      	ldr	r3, [pc, #728]	@ (800366c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003392:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8003396:	e15f      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003398:	4bb5      	ldr	r3, [pc, #724]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x350>)
 800339a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800339e:	e15b      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a0:	4bb1      	ldr	r3, [pc, #708]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x348>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ac:	4bae      	ldr	r3, [pc, #696]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x348>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d031      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b8:	4bab      	ldr	r3, [pc, #684]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x348>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	099b      	lsrs	r3, r3, #6
 80033be:	2200      	movs	r2, #0
 80033c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80033cc:	2300      	movs	r3, #0
 80033ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80033d0:	4ba7      	ldr	r3, [pc, #668]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x350>)
 80033d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80033d6:	462a      	mov	r2, r5
 80033d8:	fb03 f202 	mul.w	r2, r3, r2
 80033dc:	2300      	movs	r3, #0
 80033de:	4621      	mov	r1, r4
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	4aa2      	ldr	r2, [pc, #648]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x350>)
 80033e8:	4621      	mov	r1, r4
 80033ea:	fba1 1202 	umull	r1, r2, r1, r2
 80033ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033f0:	460a      	mov	r2, r1
 80033f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80033f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80033f6:	4413      	add	r3, r2
 80033f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033fe:	2200      	movs	r2, #0
 8003400:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003402:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003404:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003408:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800340c:	f7fd fc3c 	bl	8000c88 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4613      	mov	r3, r2
 8003416:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800341a:	e064      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341c:	4b92      	ldr	r3, [pc, #584]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x348>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	099b      	lsrs	r3, r3, #6
 8003422:	2200      	movs	r2, #0
 8003424:	653b      	str	r3, [r7, #80]	@ 0x50
 8003426:	657a      	str	r2, [r7, #84]	@ 0x54
 8003428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800342a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003430:	2300      	movs	r3, #0
 8003432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003434:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003438:	4622      	mov	r2, r4
 800343a:	462b      	mov	r3, r5
 800343c:	f04f 0000 	mov.w	r0, #0
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	0159      	lsls	r1, r3, #5
 8003446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800344a:	0150      	lsls	r0, r2, #5
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4621      	mov	r1, r4
 8003452:	1a51      	subs	r1, r2, r1
 8003454:	6139      	str	r1, [r7, #16]
 8003456:	4629      	mov	r1, r5
 8003458:	eb63 0301 	sbc.w	r3, r3, r1
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800346a:	4659      	mov	r1, fp
 800346c:	018b      	lsls	r3, r1, #6
 800346e:	4651      	mov	r1, sl
 8003470:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003474:	4651      	mov	r1, sl
 8003476:	018a      	lsls	r2, r1, #6
 8003478:	4651      	mov	r1, sl
 800347a:	ebb2 0801 	subs.w	r8, r2, r1
 800347e:	4659      	mov	r1, fp
 8003480:	eb63 0901 	sbc.w	r9, r3, r1
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003490:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003494:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003498:	4690      	mov	r8, r2
 800349a:	4699      	mov	r9, r3
 800349c:	4623      	mov	r3, r4
 800349e:	eb18 0303 	adds.w	r3, r8, r3
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	462b      	mov	r3, r5
 80034a6:	eb49 0303 	adc.w	r3, r9, r3
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034b8:	4629      	mov	r1, r5
 80034ba:	028b      	lsls	r3, r1, #10
 80034bc:	4621      	mov	r1, r4
 80034be:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c2:	4621      	mov	r1, r4
 80034c4:	028a      	lsls	r2, r1, #10
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ce:	2200      	movs	r2, #0
 80034d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80034d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80034d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034d8:	f7fd fbd6 	bl	8000c88 <__aeabi_uldivmod>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4613      	mov	r3, r2
 80034e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034e6:	4b60      	ldr	r3, [pc, #384]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x348>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	0c1b      	lsrs	r3, r3, #16
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	3301      	adds	r3, #1
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80034f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003508:	e0a6      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800350a:	4b57      	ldr	r3, [pc, #348]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x348>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003512:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003516:	4b54      	ldr	r3, [pc, #336]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x348>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02a      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003522:	4b51      	ldr	r3, [pc, #324]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x348>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	099b      	lsrs	r3, r3, #6
 8003528:	2200      	movs	r2, #0
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800352c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800352e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003530:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003534:	2100      	movs	r1, #0
 8003536:	4b4e      	ldr	r3, [pc, #312]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x350>)
 8003538:	fb03 f201 	mul.w	r2, r3, r1
 800353c:	2300      	movs	r3, #0
 800353e:	fb00 f303 	mul.w	r3, r0, r3
 8003542:	4413      	add	r3, r2
 8003544:	4a4a      	ldr	r2, [pc, #296]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x350>)
 8003546:	fba0 1202 	umull	r1, r2, r0, r2
 800354a:	677a      	str	r2, [r7, #116]	@ 0x74
 800354c:	460a      	mov	r2, r1
 800354e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003550:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003552:	4413      	add	r3, r2
 8003554:	677b      	str	r3, [r7, #116]	@ 0x74
 8003556:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800355a:	2200      	movs	r2, #0
 800355c:	633b      	str	r3, [r7, #48]	@ 0x30
 800355e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003560:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003564:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003568:	f7fd fb8e 	bl	8000c88 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4613      	mov	r3, r2
 8003572:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003576:	e05b      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003578:	4b3b      	ldr	r3, [pc, #236]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x348>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	099b      	lsrs	r3, r3, #6
 800357e:	2200      	movs	r2, #0
 8003580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003582:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358a:	623b      	str	r3, [r7, #32]
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003590:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	f04f 0000 	mov.w	r0, #0
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	0159      	lsls	r1, r3, #5
 80035a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a6:	0150      	lsls	r0, r2, #5
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4641      	mov	r1, r8
 80035ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80035b2:	4649      	mov	r1, r9
 80035b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035cc:	ebb2 040a 	subs.w	r4, r2, sl
 80035d0:	eb63 050b 	sbc.w	r5, r3, fp
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	00eb      	lsls	r3, r5, #3
 80035de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e2:	00e2      	lsls	r2, r4, #3
 80035e4:	4614      	mov	r4, r2
 80035e6:	461d      	mov	r5, r3
 80035e8:	4643      	mov	r3, r8
 80035ea:	18e3      	adds	r3, r4, r3
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	464b      	mov	r3, r9
 80035f0:	eb45 0303 	adc.w	r3, r5, r3
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003602:	4629      	mov	r1, r5
 8003604:	028b      	lsls	r3, r1, #10
 8003606:	4621      	mov	r1, r4
 8003608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800360c:	4621      	mov	r1, r4
 800360e:	028a      	lsls	r2, r1, #10
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003618:	2200      	movs	r2, #0
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	61fa      	str	r2, [r7, #28]
 800361e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003622:	f7fd fb31 	bl	8000c88 <__aeabi_uldivmod>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4613      	mov	r3, r2
 800362c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003630:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x348>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	0f1b      	lsrs	r3, r3, #28
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800363e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003642:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800364e:	e003      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003650:	4b06      	ldr	r3, [pc, #24]	@ (800366c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003652:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003656:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003658:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800365c:	4618      	mov	r0, r3
 800365e:	3798      	adds	r7, #152	@ 0x98
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800
 800366c:	00f42400 	.word	0x00f42400
 8003670:	017d7840 	.word	0x017d7840

08003674 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e28d      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8083 	beq.w	800379a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003694:	4b94      	ldr	r3, [pc, #592]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b04      	cmp	r3, #4
 800369e:	d019      	beq.n	80036d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036a0:	4b91      	ldr	r3, [pc, #580]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036ac:	4b8e      	ldr	r3, [pc, #568]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036b8:	d00c      	beq.n	80036d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ba:	4b8b      	ldr	r3, [pc, #556]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d112      	bne.n	80036ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c6:	4b88      	ldr	r3, [pc, #544]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036d2:	d10b      	bne.n	80036ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	4b84      	ldr	r3, [pc, #528]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d05b      	beq.n	8003798 <HAL_RCC_OscConfig+0x124>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d157      	bne.n	8003798 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e25a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f4:	d106      	bne.n	8003704 <HAL_RCC_OscConfig+0x90>
 80036f6:	4b7c      	ldr	r3, [pc, #496]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a7b      	ldr	r2, [pc, #492]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e01d      	b.n	8003740 <HAL_RCC_OscConfig+0xcc>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0xb4>
 800370e:	4b76      	ldr	r3, [pc, #472]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a75      	ldr	r2, [pc, #468]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 8003714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b73      	ldr	r3, [pc, #460]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a72      	ldr	r2, [pc, #456]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 8003720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0xcc>
 8003728:	4b6f      	ldr	r3, [pc, #444]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a6e      	ldr	r2, [pc, #440]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 800372e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b6c      	ldr	r3, [pc, #432]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a6b      	ldr	r2, [pc, #428]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 800373a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800373e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fe fd66 	bl	8002218 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe fd62 	bl	8002218 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	@ 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e21f      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	4b61      	ldr	r3, [pc, #388]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0xdc>
 800376e:	e014      	b.n	800379a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fe fd52 	bl	8002218 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003778:	f7fe fd4e 	bl	8002218 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	@ 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e20b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	4b57      	ldr	r3, [pc, #348]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x104>
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d06f      	beq.n	8003886 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037a6:	4b50      	ldr	r3, [pc, #320]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d017      	beq.n	80037e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037b2:	4b4d      	ldr	r3, [pc, #308]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d105      	bne.n	80037ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037be:	4b4a      	ldr	r3, [pc, #296]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ca:	4b47      	ldr	r3, [pc, #284]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d11c      	bne.n	8003810 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d6:	4b44      	ldr	r3, [pc, #272]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d116      	bne.n	8003810 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	4b41      	ldr	r3, [pc, #260]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_RCC_OscConfig+0x186>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e1d3      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fa:	4b3b      	ldr	r3, [pc, #236]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4937      	ldr	r1, [pc, #220]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	e03a      	b.n	8003886 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003818:	4b34      	ldr	r3, [pc, #208]	@ (80038ec <HAL_RCC_OscConfig+0x278>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fe fcfb 	bl	8002218 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003826:	f7fe fcf7 	bl	8002218 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e1b4      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003838:	4b2b      	ldr	r3, [pc, #172]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003844:	4b28      	ldr	r3, [pc, #160]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4925      	ldr	r1, [pc, #148]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]
 8003858:	e015      	b.n	8003886 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385a:	4b24      	ldr	r3, [pc, #144]	@ (80038ec <HAL_RCC_OscConfig+0x278>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe fcda 	bl	8002218 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003868:	f7fe fcd6 	bl	8002218 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e193      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387a:	4b1b      	ldr	r3, [pc, #108]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d036      	beq.n	8003900 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d016      	beq.n	80038c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389a:	4b15      	ldr	r3, [pc, #84]	@ (80038f0 <HAL_RCC_OscConfig+0x27c>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fe fcba 	bl	8002218 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a8:	f7fe fcb6 	bl	8002218 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e173      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ba:	4b0b      	ldr	r3, [pc, #44]	@ (80038e8 <HAL_RCC_OscConfig+0x274>)
 80038bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x234>
 80038c6:	e01b      	b.n	8003900 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c8:	4b09      	ldr	r3, [pc, #36]	@ (80038f0 <HAL_RCC_OscConfig+0x27c>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ce:	f7fe fca3 	bl	8002218 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d4:	e00e      	b.n	80038f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d6:	f7fe fc9f 	bl	8002218 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d907      	bls.n	80038f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e15c      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
 80038e8:	40023800 	.word	0x40023800
 80038ec:	42470000 	.word	0x42470000
 80038f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 80038f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ea      	bne.n	80038d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8097 	beq.w	8003a3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003912:	4b83      	ldr	r3, [pc, #524]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	4b7f      	ldr	r3, [pc, #508]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	4a7e      	ldr	r2, [pc, #504]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	@ 0x40
 800392e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393a:	2301      	movs	r3, #1
 800393c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393e:	4b79      	ldr	r3, [pc, #484]	@ (8003b24 <HAL_RCC_OscConfig+0x4b0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d118      	bne.n	800397c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394a:	4b76      	ldr	r3, [pc, #472]	@ (8003b24 <HAL_RCC_OscConfig+0x4b0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a75      	ldr	r2, [pc, #468]	@ (8003b24 <HAL_RCC_OscConfig+0x4b0>)
 8003950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003956:	f7fe fc5f 	bl	8002218 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395e:	f7fe fc5b 	bl	8002218 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e118      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	4b6c      	ldr	r3, [pc, #432]	@ (8003b24 <HAL_RCC_OscConfig+0x4b0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0x31e>
 8003984:	4b66      	ldr	r3, [pc, #408]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003988:	4a65      	ldr	r2, [pc, #404]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003990:	e01c      	b.n	80039cc <HAL_RCC_OscConfig+0x358>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x340>
 800399a:	4b61      	ldr	r3, [pc, #388]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399e:	4a60      	ldr	r2, [pc, #384]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a6:	4b5e      	ldr	r3, [pc, #376]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80039b2:	e00b      	b.n	80039cc <HAL_RCC_OscConfig+0x358>
 80039b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b8:	4a59      	ldr	r2, [pc, #356]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c0:	4b57      	ldr	r3, [pc, #348]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c4:	4a56      	ldr	r2, [pc, #344]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 80039c6:	f023 0304 	bic.w	r3, r3, #4
 80039ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d015      	beq.n	8003a00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fe fc20 	bl	8002218 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fe fc1c 	bl	8002218 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0d7      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ee      	beq.n	80039dc <HAL_RCC_OscConfig+0x368>
 80039fe:	e014      	b.n	8003a2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fe fc0a 	bl	8002218 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f7fe fc06 	bl	8002218 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e0c1      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1e:	4b40      	ldr	r3, [pc, #256]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1ee      	bne.n	8003a08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d105      	bne.n	8003a3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a30:	4b3b      	ldr	r3, [pc, #236]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	4a3a      	ldr	r2, [pc, #232]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003a36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80ad 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a46:	4b36      	ldr	r3, [pc, #216]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d060      	beq.n	8003b14 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d145      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5a:	4b33      	ldr	r3, [pc, #204]	@ (8003b28 <HAL_RCC_OscConfig+0x4b4>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fe fbda 	bl	8002218 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fe fbd6 	bl	8002218 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e093      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	4b29      	ldr	r3, [pc, #164]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa8:	061b      	lsls	r3, r3, #24
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab0:	071b      	lsls	r3, r3, #28
 8003ab2:	491b      	ldr	r1, [pc, #108]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b28 <HAL_RCC_OscConfig+0x4b4>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7fe fbab 	bl	8002218 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7fe fba7 	bl	8002218 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e064      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad8:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x452>
 8003ae4:	e05c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae6:	4b10      	ldr	r3, [pc, #64]	@ (8003b28 <HAL_RCC_OscConfig+0x4b4>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fe fb94 	bl	8002218 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fe fb90 	bl	8002218 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e04d      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x480>
 8003b12:	e045      	b.n	8003ba0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e040      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40007000 	.word	0x40007000
 8003b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bac <HAL_RCC_OscConfig+0x538>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d030      	beq.n	8003b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d129      	bne.n	8003b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d122      	bne.n	8003b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d119      	bne.n	8003b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	3b01      	subs	r3, #1
 8003b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d10f      	bne.n	8003b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800

08003bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e041      	b.n	8003c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fe f8d2 	bl	8001d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f000 fa7e 	bl	80040f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d001      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e04e      	b.n	8003d06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a23      	ldr	r2, [pc, #140]	@ (8003d14 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d022      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c92:	d01d      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1f      	ldr	r2, [pc, #124]	@ (8003d18 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d018      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d1c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1c      	ldr	r2, [pc, #112]	@ (8003d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a19      	ldr	r2, [pc, #100]	@ (8003d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a18      	ldr	r2, [pc, #96]	@ (8003d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d111      	bne.n	8003cf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d010      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf2:	e007      	b.n	8003d04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40000c00 	.word	0x40000c00
 8003d24:	40010400 	.word	0x40010400
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40001800 	.word	0x40001800

08003d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d020      	beq.n	8003d94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01b      	beq.n	8003d94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0202 	mvn.w	r2, #2
 8003d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f999 	bl	80040b2 <HAL_TIM_IC_CaptureCallback>
 8003d80:	e005      	b.n	8003d8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f98b 	bl	800409e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f99c 	bl	80040c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d020      	beq.n	8003de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01b      	beq.n	8003de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0204 	mvn.w	r2, #4
 8003db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f973 	bl	80040b2 <HAL_TIM_IC_CaptureCallback>
 8003dcc:	e005      	b.n	8003dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f965 	bl	800409e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f976 	bl	80040c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d020      	beq.n	8003e2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01b      	beq.n	8003e2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0208 	mvn.w	r2, #8
 8003dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2204      	movs	r2, #4
 8003e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f94d 	bl	80040b2 <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f93f 	bl	800409e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f950 	bl	80040c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d020      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01b      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0210 	mvn.w	r2, #16
 8003e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f927 	bl	80040b2 <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f919 	bl	800409e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f92a 	bl	80040c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00c      	beq.n	8003e9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0201 	mvn.w	r2, #1
 8003e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fd feba 	bl	8001c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00c      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fae4 	bl	8004488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f8fb 	bl	80040da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0220 	mvn.w	r2, #32
 8003f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fab6 	bl	8004474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_TIM_ConfigClockSource+0x1c>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e0b4      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x186>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f64:	d03e      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0xd4>
 8003f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6a:	f200 8087 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f72:	f000 8086 	beq.w	8004082 <HAL_TIM_ConfigClockSource+0x172>
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7a:	d87f      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b70      	cmp	r3, #112	@ 0x70
 8003f7e:	d01a      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0xa6>
 8003f80:	2b70      	cmp	r3, #112	@ 0x70
 8003f82:	d87b      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b60      	cmp	r3, #96	@ 0x60
 8003f86:	d050      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x11a>
 8003f88:	2b60      	cmp	r3, #96	@ 0x60
 8003f8a:	d877      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b50      	cmp	r3, #80	@ 0x50
 8003f8e:	d03c      	beq.n	800400a <HAL_TIM_ConfigClockSource+0xfa>
 8003f90:	2b50      	cmp	r3, #80	@ 0x50
 8003f92:	d873      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b40      	cmp	r3, #64	@ 0x40
 8003f96:	d058      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x13a>
 8003f98:	2b40      	cmp	r3, #64	@ 0x40
 8003f9a:	d86f      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f9c:	2b30      	cmp	r3, #48	@ 0x30
 8003f9e:	d064      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15a>
 8003fa0:	2b30      	cmp	r3, #48	@ 0x30
 8003fa2:	d86b      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d060      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15a>
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d867      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d05c      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15a>
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d05a      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15a>
 8003fb4:	e062      	b.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc6:	f000 f9b9 	bl	800433c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	609a      	str	r2, [r3, #8]
      break;
 8003fe2:	e04f      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff4:	f000 f9a2 	bl	800433c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004006:	609a      	str	r2, [r3, #8]
      break;
 8004008:	e03c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004016:	461a      	mov	r2, r3
 8004018:	f000 f916 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2150      	movs	r1, #80	@ 0x50
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f96f 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004028:	e02c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004036:	461a      	mov	r2, r3
 8004038:	f000 f935 	bl	80042a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2160      	movs	r1, #96	@ 0x60
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f95f 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004048:	e01c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004056:	461a      	mov	r2, r3
 8004058:	f000 f8f6 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2140      	movs	r1, #64	@ 0x40
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f94f 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004068:	e00c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f000 f946 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 800407a:	e003      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      break;
 8004080:	e000      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
	...

080040f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a46      	ldr	r2, [pc, #280]	@ (800421c <TIM_Base_SetConfig+0x12c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d013      	beq.n	8004130 <TIM_Base_SetConfig+0x40>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410e:	d00f      	beq.n	8004130 <TIM_Base_SetConfig+0x40>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a43      	ldr	r2, [pc, #268]	@ (8004220 <TIM_Base_SetConfig+0x130>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00b      	beq.n	8004130 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a42      	ldr	r2, [pc, #264]	@ (8004224 <TIM_Base_SetConfig+0x134>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d007      	beq.n	8004130 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a41      	ldr	r2, [pc, #260]	@ (8004228 <TIM_Base_SetConfig+0x138>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a40      	ldr	r2, [pc, #256]	@ (800422c <TIM_Base_SetConfig+0x13c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d108      	bne.n	8004142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a35      	ldr	r2, [pc, #212]	@ (800421c <TIM_Base_SetConfig+0x12c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d02b      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004150:	d027      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a32      	ldr	r2, [pc, #200]	@ (8004220 <TIM_Base_SetConfig+0x130>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d023      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a31      	ldr	r2, [pc, #196]	@ (8004224 <TIM_Base_SetConfig+0x134>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01f      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a30      	ldr	r2, [pc, #192]	@ (8004228 <TIM_Base_SetConfig+0x138>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01b      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2f      	ldr	r2, [pc, #188]	@ (800422c <TIM_Base_SetConfig+0x13c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d017      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2e      	ldr	r2, [pc, #184]	@ (8004230 <TIM_Base_SetConfig+0x140>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2d      	ldr	r2, [pc, #180]	@ (8004234 <TIM_Base_SetConfig+0x144>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00f      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a2c      	ldr	r2, [pc, #176]	@ (8004238 <TIM_Base_SetConfig+0x148>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00b      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a2b      	ldr	r2, [pc, #172]	@ (800423c <TIM_Base_SetConfig+0x14c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d007      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a2a      	ldr	r2, [pc, #168]	@ (8004240 <TIM_Base_SetConfig+0x150>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d003      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a29      	ldr	r2, [pc, #164]	@ (8004244 <TIM_Base_SetConfig+0x154>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d108      	bne.n	80041b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a10      	ldr	r2, [pc, #64]	@ (800421c <TIM_Base_SetConfig+0x12c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d003      	beq.n	80041e8 <TIM_Base_SetConfig+0xf8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a12      	ldr	r2, [pc, #72]	@ (800422c <TIM_Base_SetConfig+0x13c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d103      	bne.n	80041f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f023 0201 	bic.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	611a      	str	r2, [r3, #16]
  }
}
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40010400 	.word	0x40010400
 8004230:	40014000 	.word	0x40014000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800
 800423c:	40001800 	.word	0x40001800
 8004240:	40001c00 	.word	0x40001c00
 8004244:	40002000 	.word	0x40002000

08004248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 030a 	bic.w	r3, r3, #10
 8004284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b087      	sub	sp, #28
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f023 0210 	bic.w	r2, r3, #16
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	031b      	lsls	r3, r3, #12
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	f043 0307 	orr.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	021a      	lsls	r2, r3, #8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	431a      	orrs	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e05a      	b.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a21      	ldr	r2, [pc, #132]	@ (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d022      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e0:	d01d      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d018      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00e      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a18      	ldr	r2, [pc, #96]	@ (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d009      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a17      	ldr	r2, [pc, #92]	@ (800446c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a15      	ldr	r2, [pc, #84]	@ (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d10c      	bne.n	8004438 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4313      	orrs	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40010400 	.word	0x40010400
 800446c:	40014000 	.word	0x40014000
 8004470:	40001800 	.word	0x40001800

08004474 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e042      	b.n	8004534 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fd fc7e 	bl	8001dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	@ 0x24
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f973 	bl	80047cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	@ 0x28
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b20      	cmp	r3, #32
 800455a:	d175      	bne.n	8004648 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_UART_Transmit+0x2c>
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e06e      	b.n	800464a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2221      	movs	r2, #33	@ 0x21
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800457a:	f7fd fe4d 	bl	8002218 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004594:	d108      	bne.n	80045a8 <HAL_UART_Transmit+0x6c>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	e003      	b.n	80045b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045b0:	e02e      	b.n	8004610 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2180      	movs	r1, #128	@ 0x80
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f848 	bl	8004652 <UART_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e03a      	b.n	800464a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	3302      	adds	r3, #2
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	e007      	b.n	8004602 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	3301      	adds	r3, #1
 8004600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1cb      	bne.n	80045b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2200      	movs	r2, #0
 8004622:	2140      	movs	r1, #64	@ 0x40
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f814 	bl	8004652 <UART_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e006      	b.n	800464a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	4613      	mov	r3, r2
 8004660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004662:	e03b      	b.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d037      	beq.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466c:	f7fd fdd4 	bl	8002218 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	6a3a      	ldr	r2, [r7, #32]
 8004678:	429a      	cmp	r2, r3
 800467a:	d302      	bcc.n	8004682 <UART_WaitOnFlagUntilTimeout+0x30>
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e03a      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d023      	beq.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b80      	cmp	r3, #128	@ 0x80
 8004698:	d020      	beq.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b40      	cmp	r3, #64	@ 0x40
 800469e:	d01d      	beq.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d116      	bne.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f81d 	bl	8004704 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2208      	movs	r2, #8
 80046ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e00f      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4013      	ands	r3, r2
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d0b4      	beq.n	8004664 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b095      	sub	sp, #84	@ 0x54
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800471c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800472c:	643a      	str	r2, [r7, #64]	@ 0x40
 800472e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004732:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3314      	adds	r3, #20
 8004746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3314      	adds	r3, #20
 800475e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e5      	bne.n	8004740 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	2b01      	cmp	r3, #1
 800477a:	d119      	bne.n	80047b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	60bb      	str	r3, [r7, #8]
   return(result);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f023 0310 	bic.w	r3, r3, #16
 8004792:	647b      	str	r3, [r7, #68]	@ 0x44
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	330c      	adds	r3, #12
 800479a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800479c:	61ba      	str	r2, [r7, #24]
 800479e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6979      	ldr	r1, [r7, #20]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	613b      	str	r3, [r7, #16]
   return(result);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e5      	bne.n	800477c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047be:	bf00      	nop
 80047c0:	3754      	adds	r7, #84	@ 0x54
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d0:	b0c0      	sub	sp, #256	@ 0x100
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	68d9      	ldr	r1, [r3, #12]
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	ea40 0301 	orr.w	r3, r0, r1
 80047f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	431a      	orrs	r2, r3
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	431a      	orrs	r2, r3
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004824:	f021 010c 	bic.w	r1, r1, #12
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004832:	430b      	orrs	r3, r1
 8004834:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004846:	6999      	ldr	r1, [r3, #24]
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	ea40 0301 	orr.w	r3, r0, r1
 8004852:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b8f      	ldr	r3, [pc, #572]	@ (8004a98 <UART_SetConfig+0x2cc>)
 800485c:	429a      	cmp	r2, r3
 800485e:	d005      	beq.n	800486c <UART_SetConfig+0xa0>
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b8d      	ldr	r3, [pc, #564]	@ (8004a9c <UART_SetConfig+0x2d0>)
 8004868:	429a      	cmp	r2, r3
 800486a:	d104      	bne.n	8004876 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800486c:	f7fe fd12 	bl	8003294 <HAL_RCC_GetPCLK2Freq>
 8004870:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004874:	e003      	b.n	800487e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004876:	f7fe fcf9 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 800487a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004888:	f040 810c 	bne.w	8004aa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800488c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004890:	2200      	movs	r2, #0
 8004892:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004896:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800489a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800489e:	4622      	mov	r2, r4
 80048a0:	462b      	mov	r3, r5
 80048a2:	1891      	adds	r1, r2, r2
 80048a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048a6:	415b      	adcs	r3, r3
 80048a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048ae:	4621      	mov	r1, r4
 80048b0:	eb12 0801 	adds.w	r8, r2, r1
 80048b4:	4629      	mov	r1, r5
 80048b6:	eb43 0901 	adc.w	r9, r3, r1
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ce:	4690      	mov	r8, r2
 80048d0:	4699      	mov	r9, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	eb18 0303 	adds.w	r3, r8, r3
 80048d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048dc:	462b      	mov	r3, r5
 80048de:	eb49 0303 	adc.w	r3, r9, r3
 80048e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048fa:	460b      	mov	r3, r1
 80048fc:	18db      	adds	r3, r3, r3
 80048fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004900:	4613      	mov	r3, r2
 8004902:	eb42 0303 	adc.w	r3, r2, r3
 8004906:	657b      	str	r3, [r7, #84]	@ 0x54
 8004908:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800490c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004910:	f7fc f9ba 	bl	8000c88 <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4b61      	ldr	r3, [pc, #388]	@ (8004aa0 <UART_SetConfig+0x2d4>)
 800491a:	fba3 2302 	umull	r2, r3, r3, r2
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	011c      	lsls	r4, r3, #4
 8004922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004926:	2200      	movs	r2, #0
 8004928:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800492c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004930:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004934:	4642      	mov	r2, r8
 8004936:	464b      	mov	r3, r9
 8004938:	1891      	adds	r1, r2, r2
 800493a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800493c:	415b      	adcs	r3, r3
 800493e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004940:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004944:	4641      	mov	r1, r8
 8004946:	eb12 0a01 	adds.w	sl, r2, r1
 800494a:	4649      	mov	r1, r9
 800494c:	eb43 0b01 	adc.w	fp, r3, r1
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800495c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004964:	4692      	mov	sl, r2
 8004966:	469b      	mov	fp, r3
 8004968:	4643      	mov	r3, r8
 800496a:	eb1a 0303 	adds.w	r3, sl, r3
 800496e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004972:	464b      	mov	r3, r9
 8004974:	eb4b 0303 	adc.w	r3, fp, r3
 8004978:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004988:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800498c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004990:	460b      	mov	r3, r1
 8004992:	18db      	adds	r3, r3, r3
 8004994:	643b      	str	r3, [r7, #64]	@ 0x40
 8004996:	4613      	mov	r3, r2
 8004998:	eb42 0303 	adc.w	r3, r2, r3
 800499c:	647b      	str	r3, [r7, #68]	@ 0x44
 800499e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049a6:	f7fc f96f 	bl	8000c88 <__aeabi_uldivmod>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa0 <UART_SetConfig+0x2d4>)
 80049b2:	fba3 2301 	umull	r2, r3, r3, r1
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2264      	movs	r2, #100	@ 0x64
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	1acb      	subs	r3, r1, r3
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049c6:	4b36      	ldr	r3, [pc, #216]	@ (8004aa0 <UART_SetConfig+0x2d4>)
 80049c8:	fba3 2302 	umull	r2, r3, r3, r2
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049d4:	441c      	add	r4, r3
 80049d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049e8:	4642      	mov	r2, r8
 80049ea:	464b      	mov	r3, r9
 80049ec:	1891      	adds	r1, r2, r2
 80049ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049f0:	415b      	adcs	r3, r3
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049f8:	4641      	mov	r1, r8
 80049fa:	1851      	adds	r1, r2, r1
 80049fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80049fe:	4649      	mov	r1, r9
 8004a00:	414b      	adcs	r3, r1
 8004a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a10:	4659      	mov	r1, fp
 8004a12:	00cb      	lsls	r3, r1, #3
 8004a14:	4651      	mov	r1, sl
 8004a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	00ca      	lsls	r2, r1, #3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4619      	mov	r1, r3
 8004a22:	4603      	mov	r3, r0
 8004a24:	4642      	mov	r2, r8
 8004a26:	189b      	adds	r3, r3, r2
 8004a28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a2c:	464b      	mov	r3, r9
 8004a2e:	460a      	mov	r2, r1
 8004a30:	eb42 0303 	adc.w	r3, r2, r3
 8004a34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	18db      	adds	r3, r3, r3
 8004a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a52:	4613      	mov	r3, r2
 8004a54:	eb42 0303 	adc.w	r3, r2, r3
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a62:	f7fc f911 	bl	8000c88 <__aeabi_uldivmod>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa0 <UART_SetConfig+0x2d4>)
 8004a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	2164      	movs	r1, #100	@ 0x64
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	3332      	adds	r3, #50	@ 0x32
 8004a7e:	4a08      	ldr	r2, [pc, #32]	@ (8004aa0 <UART_SetConfig+0x2d4>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	f003 0207 	and.w	r2, r3, #7
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4422      	add	r2, r4
 8004a92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a94:	e106      	b.n	8004ca4 <UART_SetConfig+0x4d8>
 8004a96:	bf00      	nop
 8004a98:	40011000 	.word	0x40011000
 8004a9c:	40011400 	.word	0x40011400
 8004aa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004aae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ab2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ab6:	4642      	mov	r2, r8
 8004ab8:	464b      	mov	r3, r9
 8004aba:	1891      	adds	r1, r2, r2
 8004abc:	6239      	str	r1, [r7, #32]
 8004abe:	415b      	adcs	r3, r3
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	1854      	adds	r4, r2, r1
 8004aca:	4649      	mov	r1, r9
 8004acc:	eb43 0501 	adc.w	r5, r3, r1
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	00eb      	lsls	r3, r5, #3
 8004ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ade:	00e2      	lsls	r2, r4, #3
 8004ae0:	4614      	mov	r4, r2
 8004ae2:	461d      	mov	r5, r3
 8004ae4:	4643      	mov	r3, r8
 8004ae6:	18e3      	adds	r3, r4, r3
 8004ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004aec:	464b      	mov	r3, r9
 8004aee:	eb45 0303 	adc.w	r3, r5, r3
 8004af2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b12:	4629      	mov	r1, r5
 8004b14:	008b      	lsls	r3, r1, #2
 8004b16:	4621      	mov	r1, r4
 8004b18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	008a      	lsls	r2, r1, #2
 8004b20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b24:	f7fc f8b0 	bl	8000c88 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4b60      	ldr	r3, [pc, #384]	@ (8004cb0 <UART_SetConfig+0x4e4>)
 8004b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	011c      	lsls	r4, r3, #4
 8004b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	1891      	adds	r1, r2, r2
 8004b4e:	61b9      	str	r1, [r7, #24]
 8004b50:	415b      	adcs	r3, r3
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b58:	4641      	mov	r1, r8
 8004b5a:	1851      	adds	r1, r2, r1
 8004b5c:	6139      	str	r1, [r7, #16]
 8004b5e:	4649      	mov	r1, r9
 8004b60:	414b      	adcs	r3, r1
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b70:	4659      	mov	r1, fp
 8004b72:	00cb      	lsls	r3, r1, #3
 8004b74:	4651      	mov	r1, sl
 8004b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b7a:	4651      	mov	r1, sl
 8004b7c:	00ca      	lsls	r2, r1, #3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	4642      	mov	r2, r8
 8004b86:	189b      	adds	r3, r3, r2
 8004b88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	460a      	mov	r2, r1
 8004b90:	eb42 0303 	adc.w	r3, r2, r3
 8004b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ba2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	008b      	lsls	r3, r1, #2
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bba:	4641      	mov	r1, r8
 8004bbc:	008a      	lsls	r2, r1, #2
 8004bbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bc2:	f7fc f861 	bl	8000c88 <__aeabi_uldivmod>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4b38      	ldr	r3, [pc, #224]	@ (8004cb0 <UART_SetConfig+0x4e4>)
 8004bce:	fba3 2301 	umull	r2, r3, r3, r1
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	2264      	movs	r2, #100	@ 0x64
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	1acb      	subs	r3, r1, r3
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	3332      	adds	r3, #50	@ 0x32
 8004be0:	4a33      	ldr	r2, [pc, #204]	@ (8004cb0 <UART_SetConfig+0x4e4>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bec:	441c      	add	r4, r3
 8004bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bf6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	464b      	mov	r3, r9
 8004c00:	1891      	adds	r1, r2, r2
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	415b      	adcs	r3, r3
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	1851      	adds	r1, r2, r1
 8004c10:	6039      	str	r1, [r7, #0]
 8004c12:	4649      	mov	r1, r9
 8004c14:	414b      	adcs	r3, r1
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c24:	4659      	mov	r1, fp
 8004c26:	00cb      	lsls	r3, r1, #3
 8004c28:	4651      	mov	r1, sl
 8004c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c2e:	4651      	mov	r1, sl
 8004c30:	00ca      	lsls	r2, r1, #3
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	4603      	mov	r3, r0
 8004c38:	4642      	mov	r2, r8
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c3e:	464b      	mov	r3, r9
 8004c40:	460a      	mov	r2, r1
 8004c42:	eb42 0303 	adc.w	r3, r2, r3
 8004c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c52:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c60:	4649      	mov	r1, r9
 8004c62:	008b      	lsls	r3, r1, #2
 8004c64:	4641      	mov	r1, r8
 8004c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	008a      	lsls	r2, r1, #2
 8004c6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c72:	f7fc f809 	bl	8000c88 <__aeabi_uldivmod>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <UART_SetConfig+0x4e4>)
 8004c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	2164      	movs	r1, #100	@ 0x64
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	3332      	adds	r3, #50	@ 0x32
 8004c8e:	4a08      	ldr	r2, [pc, #32]	@ (8004cb0 <UART_SetConfig+0x4e4>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	f003 020f 	and.w	r2, r3, #15
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4422      	add	r2, r4
 8004ca2:	609a      	str	r2, [r3, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004caa:	46bd      	mov	sp, r7
 8004cac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb0:	51eb851f 	.word	0x51eb851f

08004cb4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cc6:	2b84      	cmp	r3, #132	@ 0x84
 8004cc8:	d005      	beq.n	8004cd6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004cca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3303      	adds	r3, #3
 8004cd4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cea:	f3ef 8305 	mrs	r3, IPSR
 8004cee:	607b      	str	r3, [r7, #4]
  return(result);
 8004cf0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d0c:	f001 f890 	bl	8005e30 <vTaskStartScheduler>
  
  return osOK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d18:	b089      	sub	sp, #36	@ 0x24
 8004d1a:	af04      	add	r7, sp, #16
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <osThreadCreate+0x54>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01c      	beq.n	8004d6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685c      	ldr	r4, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691e      	ldr	r6, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff ffb6 	bl	8004cb4 <makeFreeRtosPriority>
 8004d48:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d52:	9202      	str	r2, [sp, #8]
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	9100      	str	r1, [sp, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	4632      	mov	r2, r6
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 fe98 	bl	8005a94 <xTaskCreateStatic>
 8004d64:	4603      	mov	r3, r0
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e01c      	b.n	8004da4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685c      	ldr	r4, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d76:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff ff98 	bl	8004cb4 <makeFreeRtosPriority>
 8004d84:	4602      	mov	r2, r0
 8004d86:	f107 030c 	add.w	r3, r7, #12
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	9200      	str	r2, [sp, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	4632      	mov	r2, r6
 8004d92:	4629      	mov	r1, r5
 8004d94:	4620      	mov	r0, r4
 8004d96:	f000 fedd 	bl	8005b54 <xTaskCreate>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d001      	beq.n	8004da4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004da4:	68fb      	ldr	r3, [r7, #12]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <osDelay+0x16>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	e000      	b.n	8004dc6 <osDelay+0x18>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fffc 	bl	8005dc4 <vTaskDelay>
  
  return osOK;
 8004dcc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	460b      	mov	r3, r1
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d013      	beq.n	8004e16 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8004dee:	7afb      	ldrb	r3, [r7, #11]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <osTimerCreate+0x20>
 8004df4:	2101      	movs	r1, #1
 8004df6:	e000      	b.n	8004dfa <osTimerCreate+0x22>
 8004df8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8004e02:	9201      	str	r2, [sp, #4]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	460a      	mov	r2, r1
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	480b      	ldr	r0, [pc, #44]	@ (8004e3c <osTimerCreate+0x64>)
 8004e0e:	f001 fdd2 	bl	80069b6 <xTimerCreateStatic>
 8004e12:	4603      	mov	r3, r0
 8004e14:	e00e      	b.n	8004e34 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8004e16:	7afb      	ldrb	r3, [r7, #11]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <osTimerCreate+0x48>
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	e000      	b.n	8004e22 <osTimerCreate+0x4a>
 8004e20:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	4803      	ldr	r0, [pc, #12]	@ (8004e3c <osTimerCreate+0x64>)
 8004e2e:	f001 fda1 	bl	8006974 <xTimerCreate>
 8004e32:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	0800a6f0 	.word	0x0800a6f0

08004e40 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <osTimerStart+0x20>
    ticks = 1;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8004e60:	f7ff ff40 	bl	8004ce4 <inHandlerMode>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d01a      	beq.n	8004ea0 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8004e6a:	f107 030c 	add.w	r3, r7, #12
 8004e6e:	2200      	movs	r2, #0
 8004e70:	9200      	str	r2, [sp, #0]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	2109      	movs	r1, #9
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f001 fe1a 	bl	8006ab0 <xTimerGenericCommand>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d002      	beq.n	8004e88 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8004e82:	23ff      	movs	r3, #255	@ 0xff
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e018      	b.n	8004eba <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d015      	beq.n	8004eba <osTimerStart+0x7a>
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <osTimerStart+0x84>)
 8004e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	e00c      	b.n	8004eba <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f001 fe00 	bl	8006ab0 <xTimerGenericCommand>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d001      	beq.n	8004eba <osTimerStart+0x7a>
      result = osErrorOS;
 8004eb6:	23ff      	movs	r3, #255	@ 0xff
 8004eb8:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8004eba:	697b      	ldr	r3, [r7, #20]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8004ed8:	f7ff ff04 	bl	8004ce4 <inHandlerMode>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d019      	beq.n	8004f16 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8004ee2:	f107 0308 	add.w	r3, r7, #8
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	9200      	str	r2, [sp, #0]
 8004eea:	2200      	movs	r2, #0
 8004eec:	2108      	movs	r1, #8
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f001 fdde 	bl	8006ab0 <xTimerGenericCommand>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d001      	beq.n	8004efe <osTimerStop+0x36>
      return osErrorOS;
 8004efa:	23ff      	movs	r3, #255	@ 0xff
 8004efc:	e019      	b.n	8004f32 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d015      	beq.n	8004f30 <osTimerStop+0x68>
 8004f04:	4b0d      	ldr	r3, [pc, #52]	@ (8004f3c <osTimerStop+0x74>)
 8004f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	e00c      	b.n	8004f30 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8004f16:	2300      	movs	r3, #0
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2103      	movs	r1, #3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f001 fdc5 	bl	8006ab0 <xTimerGenericCommand>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d001      	beq.n	8004f30 <osTimerStop+0x68>
      result = osErrorOS;
 8004f2c:	23ff      	movs	r3, #255	@ 0xff
 8004f2e:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8004f30:	68fb      	ldr	r3, [r7, #12]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	e000ed04 	.word	0xe000ed04

08004f40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f103 0208 	add.w	r2, r3, #8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f04f 32ff 	mov.w	r2, #4294967295
 8004f58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f103 0208 	add.w	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f103 0208 	add.w	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d103      	bne.n	8005002 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e00c      	b.n	800501c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3308      	adds	r3, #8
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e002      	b.n	8005010 <vListInsert+0x2e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	429a      	cmp	r2, r3
 800501a:	d2f6      	bcs.n	800500a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	601a      	str	r2, [r3, #0]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6892      	ldr	r2, [r2, #8]
 800506a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6852      	ldr	r2, [r2, #4]
 8005074:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d103      	bne.n	8005088 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	1e5a      	subs	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050d4:	f002 f910 	bl	80072f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e0:	68f9      	ldr	r1, [r7, #12]
 80050e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	441a      	add	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005104:	3b01      	subs	r3, #1
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	441a      	add	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	22ff      	movs	r2, #255	@ 0xff
 8005118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	22ff      	movs	r2, #255	@ 0xff
 8005120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d114      	bne.n	8005154 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01a      	beq.n	8005168 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3310      	adds	r3, #16
 8005136:	4618      	mov	r0, r3
 8005138:	f001 f906 	bl	8006348 <xTaskRemoveFromEventList>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d012      	beq.n	8005168 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <xQueueGenericReset+0xd0>)
 8005144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	e009      	b.n	8005168 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3310      	adds	r3, #16
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fef1 	bl	8004f40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3324      	adds	r3, #36	@ 0x24
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff feec 	bl	8004f40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005168:	f002 f8f8 	bl	800735c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800516c:	2301      	movs	r3, #1
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08e      	sub	sp, #56	@ 0x38
 8005180:	af02      	add	r7, sp, #8
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <xQueueGenericCreateStatic+0x56>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <xQueueGenericCreateStatic+0x5a>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <xQueueGenericCreateStatic+0x5c>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	623b      	str	r3, [r7, #32]
}
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	e7fd      	b.n	80051f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <xQueueGenericCreateStatic+0x84>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <xQueueGenericCreateStatic+0x88>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <xQueueGenericCreateStatic+0x8a>
 8005204:	2300      	movs	r3, #0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	61fb      	str	r3, [r7, #28]
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	e7fd      	b.n	800521e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005222:	2348      	movs	r3, #72	@ 0x48
 8005224:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b48      	cmp	r3, #72	@ 0x48
 800522a:	d00b      	beq.n	8005244 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	61bb      	str	r3, [r7, #24]
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	e7fd      	b.n	8005240 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005244:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800524a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00d      	beq.n	800526c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005258:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800525c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	4613      	mov	r3, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f805 	bl	8005276 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800526c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800526e:	4618      	mov	r0, r3
 8005270:	3730      	adds	r7, #48	@ 0x30
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d103      	bne.n	8005292 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e002      	b.n	8005298 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052a4:	2101      	movs	r1, #1
 80052a6:	69b8      	ldr	r0, [r7, #24]
 80052a8:	f7ff fefe 	bl	80050a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08e      	sub	sp, #56	@ 0x38
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052c2:	2300      	movs	r3, #0
 80052c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <xQueueGenericSend+0x34>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <xQueueGenericSend+0x42>
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <xQueueGenericSend+0x46>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <xQueueGenericSend+0x48>
 80052fa:	2300      	movs	r3, #0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <xQueueGenericSend+0x64>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	e7fd      	b.n	8005314 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d103      	bne.n	8005326 <xQueueGenericSend+0x72>
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <xQueueGenericSend+0x76>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <xQueueGenericSend+0x78>
 800532a:	2300      	movs	r3, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <xQueueGenericSend+0x94>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	623b      	str	r3, [r7, #32]
}
 8005342:	bf00      	nop
 8005344:	bf00      	nop
 8005346:	e7fd      	b.n	8005344 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005348:	f001 f9be 	bl	80066c8 <xTaskGetSchedulerState>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d102      	bne.n	8005358 <xQueueGenericSend+0xa4>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <xQueueGenericSend+0xa8>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <xQueueGenericSend+0xaa>
 800535c:	2300      	movs	r3, #0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <xQueueGenericSend+0xc6>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	61fb      	str	r3, [r7, #28]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800537a:	f001 ffbd 	bl	80072f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800537e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <xQueueGenericSend+0xdc>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d129      	bne.n	80053e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005396:	f000 fa0f 	bl	80057b8 <prvCopyDataToQueue>
 800539a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d010      	beq.n	80053c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a6:	3324      	adds	r3, #36	@ 0x24
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 ffcd 	bl	8006348 <xTaskRemoveFromEventList>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d013      	beq.n	80053dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053b4:	4b3f      	ldr	r3, [pc, #252]	@ (80054b4 <xQueueGenericSend+0x200>)
 80053b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	e00a      	b.n	80053dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053cc:	4b39      	ldr	r3, [pc, #228]	@ (80054b4 <xQueueGenericSend+0x200>)
 80053ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053dc:	f001 ffbe 	bl	800735c <vPortExitCritical>
				return pdPASS;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e063      	b.n	80054ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053ea:	f001 ffb7 	bl	800735c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e05c      	b.n	80054ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053f8:	f107 0314 	add.w	r3, r7, #20
 80053fc:	4618      	mov	r0, r3
 80053fe:	f001 f807 	bl	8006410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005402:	2301      	movs	r3, #1
 8005404:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005406:	f001 ffa9 	bl	800735c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800540a:	f000 fd79 	bl	8005f00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800540e:	f001 ff73 	bl	80072f8 <vPortEnterCritical>
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005418:	b25b      	sxtb	r3, r3
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d103      	bne.n	8005428 <xQueueGenericSend+0x174>
 8005420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800542e:	b25b      	sxtb	r3, r3
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d103      	bne.n	800543e <xQueueGenericSend+0x18a>
 8005436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800543e:	f001 ff8d 	bl	800735c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005442:	1d3a      	adds	r2, r7, #4
 8005444:	f107 0314 	add.w	r3, r7, #20
 8005448:	4611      	mov	r1, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fff6 	bl	800643c <xTaskCheckForTimeOut>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d124      	bne.n	80054a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005456:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005458:	f000 faa6 	bl	80059a8 <prvIsQueueFull>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d018      	beq.n	8005494 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	3310      	adds	r3, #16
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f000 ff1a 	bl	80062a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005470:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005472:	f000 fa31 	bl	80058d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005476:	f000 fd51 	bl	8005f1c <xTaskResumeAll>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	f47f af7c 	bne.w	800537a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005482:	4b0c      	ldr	r3, [pc, #48]	@ (80054b4 <xQueueGenericSend+0x200>)
 8005484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	e772      	b.n	800537a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005494:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005496:	f000 fa1f 	bl	80058d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800549a:	f000 fd3f 	bl	8005f1c <xTaskResumeAll>
 800549e:	e76c      	b.n	800537a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054a2:	f000 fa19 	bl	80058d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054a6:	f000 fd39 	bl	8005f1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3738      	adds	r7, #56	@ 0x38
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	e000ed04 	.word	0xe000ed04

080054b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b090      	sub	sp, #64	@ 0x40
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80054ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10b      	bne.n	80054e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <xQueueGenericSendFromISR+0x3e>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <xQueueGenericSendFromISR+0x42>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <xQueueGenericSendFromISR+0x44>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10b      	bne.n	8005518 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005512:	bf00      	nop
 8005514:	bf00      	nop
 8005516:	e7fd      	b.n	8005514 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d103      	bne.n	8005526 <xQueueGenericSendFromISR+0x6e>
 800551e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <xQueueGenericSendFromISR+0x72>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <xQueueGenericSendFromISR+0x74>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	623b      	str	r3, [r7, #32]
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	e7fd      	b.n	8005544 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005548:	f001 ffb6 	bl	80074b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800554c:	f3ef 8211 	mrs	r2, BASEPRI
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	61fa      	str	r2, [r7, #28]
 8005562:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005564:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005566:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800556c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005570:	429a      	cmp	r2, r3
 8005572:	d302      	bcc.n	800557a <xQueueGenericSendFromISR+0xc2>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b02      	cmp	r3, #2
 8005578:	d12f      	bne.n	80055da <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800557a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005580:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005590:	f000 f912 	bl	80057b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005594:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d112      	bne.n	80055c4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800559e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a8:	3324      	adds	r3, #36	@ 0x24
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fecc 	bl	8006348 <xTaskRemoveFromEventList>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00e      	beq.n	80055d4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e007      	b.n	80055d4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80055c8:	3301      	adds	r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	b25a      	sxtb	r2, r3
 80055ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80055d4:	2301      	movs	r3, #1
 80055d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80055d8:	e001      	b.n	80055de <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3740      	adds	r7, #64	@ 0x40
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08c      	sub	sp, #48	@ 0x30
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005600:	2300      	movs	r3, #0
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10b      	bne.n	8005626 <xQueueReceive+0x32>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	623b      	str	r3, [r7, #32]
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	e7fd      	b.n	8005622 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <xQueueReceive+0x40>
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <xQueueReceive+0x44>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <xQueueReceive+0x46>
 8005638:	2300      	movs	r3, #0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <xQueueReceive+0x62>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	61fb      	str	r3, [r7, #28]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005656:	f001 f837 	bl	80066c8 <xTaskGetSchedulerState>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <xQueueReceive+0x72>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <xQueueReceive+0x76>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <xQueueReceive+0x78>
 800566a:	2300      	movs	r3, #0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <xQueueReceive+0x94>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	61bb      	str	r3, [r7, #24]
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	e7fd      	b.n	8005684 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005688:	f001 fe36 	bl	80072f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01f      	beq.n	80056d8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800569c:	f000 f8f6 	bl	800588c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	1e5a      	subs	r2, r3, #1
 80056a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00f      	beq.n	80056d0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	3310      	adds	r3, #16
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fe47 	bl	8006348 <xTaskRemoveFromEventList>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056c0:	4b3c      	ldr	r3, [pc, #240]	@ (80057b4 <xQueueReceive+0x1c0>)
 80056c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056d0:	f001 fe44 	bl	800735c <vPortExitCritical>
				return pdPASS;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e069      	b.n	80057ac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d103      	bne.n	80056e6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056de:	f001 fe3d 	bl	800735c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e062      	b.n	80057ac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056ec:	f107 0310 	add.w	r3, r7, #16
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fe8d 	bl	8006410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056f6:	2301      	movs	r3, #1
 80056f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056fa:	f001 fe2f 	bl	800735c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056fe:	f000 fbff 	bl	8005f00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005702:	f001 fdf9 	bl	80072f8 <vPortEnterCritical>
 8005706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005708:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800570c:	b25b      	sxtb	r3, r3
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d103      	bne.n	800571c <xQueueReceive+0x128>
 8005714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800571c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005722:	b25b      	sxtb	r3, r3
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005728:	d103      	bne.n	8005732 <xQueueReceive+0x13e>
 800572a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005732:	f001 fe13 	bl	800735c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005736:	1d3a      	adds	r2, r7, #4
 8005738:	f107 0310 	add.w	r3, r7, #16
 800573c:	4611      	mov	r1, r2
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fe7c 	bl	800643c <xTaskCheckForTimeOut>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d123      	bne.n	8005792 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800574a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800574c:	f000 f916 	bl	800597c <prvIsQueueEmpty>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d017      	beq.n	8005786 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005758:	3324      	adds	r3, #36	@ 0x24
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	4611      	mov	r1, r2
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fda0 	bl	80062a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005764:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005766:	f000 f8b7 	bl	80058d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800576a:	f000 fbd7 	bl	8005f1c <xTaskResumeAll>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d189      	bne.n	8005688 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005774:	4b0f      	ldr	r3, [pc, #60]	@ (80057b4 <xQueueReceive+0x1c0>)
 8005776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	e780      	b.n	8005688 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005788:	f000 f8a6 	bl	80058d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800578c:	f000 fbc6 	bl	8005f1c <xTaskResumeAll>
 8005790:	e77a      	b.n	8005688 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005794:	f000 f8a0 	bl	80058d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005798:	f000 fbc0 	bl	8005f1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800579c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800579e:	f000 f8ed 	bl	800597c <prvIsQueueEmpty>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f43f af6f 	beq.w	8005688 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3730      	adds	r7, #48	@ 0x30
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d14d      	bne.n	800587a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 ff8e 	bl	8006704 <xTaskPriorityDisinherit>
 80057e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	609a      	str	r2, [r3, #8]
 80057f0:	e043      	b.n	800587a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d119      	bne.n	800582c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6858      	ldr	r0, [r3, #4]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	461a      	mov	r2, r3
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	f002 fe85 	bl	8008512 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005810:	441a      	add	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	429a      	cmp	r2, r3
 8005820:	d32b      	bcc.n	800587a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	e026      	b.n	800587a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	68d8      	ldr	r0, [r3, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005834:	461a      	mov	r2, r3
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	f002 fe6b 	bl	8008512 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005844:	425b      	negs	r3, r3
 8005846:	441a      	add	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d207      	bcs.n	8005868 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005860:	425b      	negs	r3, r3
 8005862:	441a      	add	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d105      	bne.n	800587a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	3b01      	subs	r3, #1
 8005878:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005882:	697b      	ldr	r3, [r7, #20]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d018      	beq.n	80058d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	441a      	add	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d303      	bcc.n	80058c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68d9      	ldr	r1, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c8:	461a      	mov	r2, r3
 80058ca:	6838      	ldr	r0, [r7, #0]
 80058cc:	f002 fe21 	bl	8008512 <memcpy>
	}
}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058e0:	f001 fd0a 	bl	80072f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ec:	e011      	b.n	8005912 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d012      	beq.n	800591c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3324      	adds	r3, #36	@ 0x24
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fd24 	bl	8006348 <xTaskRemoveFromEventList>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005906:	f000 fdfd 	bl	8006504 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	3b01      	subs	r3, #1
 800590e:	b2db      	uxtb	r3, r3
 8005910:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005916:	2b00      	cmp	r3, #0
 8005918:	dce9      	bgt.n	80058ee <prvUnlockQueue+0x16>
 800591a:	e000      	b.n	800591e <prvUnlockQueue+0x46>
					break;
 800591c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	22ff      	movs	r2, #255	@ 0xff
 8005922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005926:	f001 fd19 	bl	800735c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800592a:	f001 fce5 	bl	80072f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005934:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005936:	e011      	b.n	800595c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d012      	beq.n	8005966 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3310      	adds	r3, #16
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fcff 	bl	8006348 <xTaskRemoveFromEventList>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005950:	f000 fdd8 	bl	8006504 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005954:	7bbb      	ldrb	r3, [r7, #14]
 8005956:	3b01      	subs	r3, #1
 8005958:	b2db      	uxtb	r3, r3
 800595a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800595c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005960:	2b00      	cmp	r3, #0
 8005962:	dce9      	bgt.n	8005938 <prvUnlockQueue+0x60>
 8005964:	e000      	b.n	8005968 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005966:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	22ff      	movs	r2, #255	@ 0xff
 800596c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005970:	f001 fcf4 	bl	800735c <vPortExitCritical>
}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005984:	f001 fcb8 	bl	80072f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005990:	2301      	movs	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e001      	b.n	800599a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800599a:	f001 fcdf 	bl	800735c <vPortExitCritical>

	return xReturn;
 800599e:	68fb      	ldr	r3, [r7, #12]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059b0:	f001 fca2 	bl	80072f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059bc:	429a      	cmp	r2, r3
 80059be:	d102      	bne.n	80059c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	e001      	b.n	80059ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059ca:	f001 fcc7 	bl	800735c <vPortExitCritical>

	return xReturn;
 80059ce:	68fb      	ldr	r3, [r7, #12]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e014      	b.n	8005a12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005a28 <vQueueAddToRegistry+0x50>)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10b      	bne.n	8005a0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059f4:	490c      	ldr	r1, [pc, #48]	@ (8005a28 <vQueueAddToRegistry+0x50>)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005a28 <vQueueAddToRegistry+0x50>)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	4413      	add	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a0a:	e006      	b.n	8005a1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b07      	cmp	r3, #7
 8005a16:	d9e7      	bls.n	80059e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20000b6c 	.word	0x20000b6c

08005a2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a3c:	f001 fc5c 	bl	80072f8 <vPortEnterCritical>
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a46:	b25b      	sxtb	r3, r3
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d103      	bne.n	8005a56 <vQueueWaitForMessageRestricted+0x2a>
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a5c:	b25b      	sxtb	r3, r3
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d103      	bne.n	8005a6c <vQueueWaitForMessageRestricted+0x40>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a6c:	f001 fc76 	bl	800735c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	3324      	adds	r3, #36	@ 0x24
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fc35 	bl	80062f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a86:	6978      	ldr	r0, [r7, #20]
 8005a88:	f7ff ff26 	bl	80058d8 <prvUnlockQueue>
	}
 8005a8c:	bf00      	nop
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08e      	sub	sp, #56	@ 0x38
 8005a98:	af04      	add	r7, sp, #16
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10b      	bne.n	8005ac0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	623b      	str	r3, [r7, #32]
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	e7fd      	b.n	8005abc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10b      	bne.n	8005ade <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	61fb      	str	r3, [r7, #28]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ade:	2354      	movs	r3, #84	@ 0x54
 8005ae0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b54      	cmp	r3, #84	@ 0x54
 8005ae6:	d00b      	beq.n	8005b00 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	61bb      	str	r3, [r7, #24]
}
 8005afa:	bf00      	nop
 8005afc:	bf00      	nop
 8005afe:	e7fd      	b.n	8005afc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01e      	beq.n	8005b46 <xTaskCreateStatic+0xb2>
 8005b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d01b      	beq.n	8005b46 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b16:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b20:	2300      	movs	r3, #0
 8005b22:	9303      	str	r3, [sp, #12]
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	9302      	str	r3, [sp, #8]
 8005b28:	f107 0314 	add.w	r3, r7, #20
 8005b2c:	9301      	str	r3, [sp, #4]
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f850 	bl	8005bde <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b40:	f000 f8d6 	bl	8005cf0 <prvAddNewTaskToReadyList>
 8005b44:	e001      	b.n	8005b4a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b4a:	697b      	ldr	r3, [r7, #20]
	}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3728      	adds	r7, #40	@ 0x28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08c      	sub	sp, #48	@ 0x30
 8005b58:	af04      	add	r7, sp, #16
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	4613      	mov	r3, r2
 8005b62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 fce7 	bl	800753c <pvPortMalloc>
 8005b6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00e      	beq.n	8005b94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b76:	2054      	movs	r0, #84	@ 0x54
 8005b78:	f001 fce0 	bl	800753c <pvPortMalloc>
 8005b7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b8a:	e005      	b.n	8005b98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b8c:	6978      	ldr	r0, [r7, #20]
 8005b8e:	f001 fda3 	bl	80076d8 <vPortFree>
 8005b92:	e001      	b.n	8005b98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d017      	beq.n	8005bce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9303      	str	r3, [sp, #12]
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	9302      	str	r3, [sp, #8]
 8005bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f80e 	bl	8005bde <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bc2:	69f8      	ldr	r0, [r7, #28]
 8005bc4:	f000 f894 	bl	8005cf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	e002      	b.n	8005bd4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
	}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b088      	sub	sp, #32
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
 8005bea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f023 0307 	bic.w	r3, r3, #7
 8005c04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00b      	beq.n	8005c28 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	617b      	str	r3, [r7, #20]
}
 8005c22:	bf00      	nop
 8005c24:	bf00      	nop
 8005c26:	e7fd      	b.n	8005c24 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01f      	beq.n	8005c6e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	e012      	b.n	8005c5a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	7819      	ldrb	r1, [r3, #0]
 8005c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	3334      	adds	r3, #52	@ 0x34
 8005c44:	460a      	mov	r2, r1
 8005c46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d006      	beq.n	8005c62 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	3301      	adds	r3, #1
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b0f      	cmp	r3, #15
 8005c5e:	d9e9      	bls.n	8005c34 <prvInitialiseNewTask+0x56>
 8005c60:	e000      	b.n	8005c64 <prvInitialiseNewTask+0x86>
			{
				break;
 8005c62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c6c:	e003      	b.n	8005c76 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c78:	2b06      	cmp	r3, #6
 8005c7a:	d901      	bls.n	8005c80 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c7c:	2306      	movs	r3, #6
 8005c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c84:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c8a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8e:	2200      	movs	r2, #0
 8005c90:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c94:	3304      	adds	r3, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff f972 	bl	8004f80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	3318      	adds	r3, #24
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff f96d 	bl	8004f80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005caa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	f1c3 0207 	rsb	r2, r3, #7
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	68f9      	ldr	r1, [r7, #12]
 8005cce:	69b8      	ldr	r0, [r7, #24]
 8005cd0:	f001 f9e2 	bl	8007098 <pxPortInitialiseStack>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ce6:	bf00      	nop
 8005ce8:	3720      	adds	r7, #32
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cf8:	f001 fafe 	bl	80072f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8005da8 <prvAddNewTaskToReadyList+0xb8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3301      	adds	r3, #1
 8005d02:	4a29      	ldr	r2, [pc, #164]	@ (8005da8 <prvAddNewTaskToReadyList+0xb8>)
 8005d04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d06:	4b29      	ldr	r3, [pc, #164]	@ (8005dac <prvAddNewTaskToReadyList+0xbc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d0e:	4a27      	ldr	r2, [pc, #156]	@ (8005dac <prvAddNewTaskToReadyList+0xbc>)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d14:	4b24      	ldr	r3, [pc, #144]	@ (8005da8 <prvAddNewTaskToReadyList+0xb8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d110      	bne.n	8005d3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d1c:	f000 fc16 	bl	800654c <prvInitialiseTaskLists>
 8005d20:	e00d      	b.n	8005d3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d22:	4b23      	ldr	r3, [pc, #140]	@ (8005db0 <prvAddNewTaskToReadyList+0xc0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d109      	bne.n	8005d3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d2a:	4b20      	ldr	r3, [pc, #128]	@ (8005dac <prvAddNewTaskToReadyList+0xbc>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d802      	bhi.n	8005d3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d38:	4a1c      	ldr	r2, [pc, #112]	@ (8005dac <prvAddNewTaskToReadyList+0xbc>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005db4 <prvAddNewTaskToReadyList+0xc4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	4a1b      	ldr	r2, [pc, #108]	@ (8005db4 <prvAddNewTaskToReadyList+0xc4>)
 8005d46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	4b19      	ldr	r3, [pc, #100]	@ (8005db8 <prvAddNewTaskToReadyList+0xc8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	4a18      	ldr	r2, [pc, #96]	@ (8005db8 <prvAddNewTaskToReadyList+0xc8>)
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4a15      	ldr	r2, [pc, #84]	@ (8005dbc <prvAddNewTaskToReadyList+0xcc>)
 8005d68:	441a      	add	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4610      	mov	r0, r2
 8005d72:	f7ff f912 	bl	8004f9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d76:	f001 faf1 	bl	800735c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <prvAddNewTaskToReadyList+0xc0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00e      	beq.n	8005da0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d82:	4b0a      	ldr	r3, [pc, #40]	@ (8005dac <prvAddNewTaskToReadyList+0xbc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d207      	bcs.n	8005da0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d90:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <prvAddNewTaskToReadyList+0xd0>)
 8005d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20000cac 	.word	0x20000cac
 8005dac:	20000bac 	.word	0x20000bac
 8005db0:	20000cb8 	.word	0x20000cb8
 8005db4:	20000cc8 	.word	0x20000cc8
 8005db8:	20000cb4 	.word	0x20000cb4
 8005dbc:	20000bb0 	.word	0x20000bb0
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d018      	beq.n	8005e08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dd6:	4b14      	ldr	r3, [pc, #80]	@ (8005e28 <vTaskDelay+0x64>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <vTaskDelay+0x32>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	60bb      	str	r3, [r7, #8]
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	e7fd      	b.n	8005df2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005df6:	f000 f883 	bl	8005f00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fd09 	bl	8006814 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e02:	f000 f88b 	bl	8005f1c <xTaskResumeAll>
 8005e06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d107      	bne.n	8005e1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e0e:	4b07      	ldr	r3, [pc, #28]	@ (8005e2c <vTaskDelay+0x68>)
 8005e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000cd4 	.word	0x20000cd4
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	@ 0x28
 8005e34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e3e:	463a      	mov	r2, r7
 8005e40:	1d39      	adds	r1, r7, #4
 8005e42:	f107 0308 	add.w	r3, r7, #8
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fb f896 	bl	8000f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	9202      	str	r2, [sp, #8]
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	2300      	movs	r3, #0
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	4922      	ldr	r1, [pc, #136]	@ (8005ee8 <vTaskStartScheduler+0xb8>)
 8005e60:	4822      	ldr	r0, [pc, #136]	@ (8005eec <vTaskStartScheduler+0xbc>)
 8005e62:	f7ff fe17 	bl	8005a94 <xTaskCreateStatic>
 8005e66:	4603      	mov	r3, r0
 8005e68:	4a21      	ldr	r2, [pc, #132]	@ (8005ef0 <vTaskStartScheduler+0xc0>)
 8005e6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e6c:	4b20      	ldr	r3, [pc, #128]	@ (8005ef0 <vTaskStartScheduler+0xc0>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	e001      	b.n	8005e7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d102      	bne.n	8005e8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e84:	f000 fd2c 	bl	80068e0 <xTimerCreateTimerTask>
 8005e88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d116      	bne.n	8005ebe <vTaskStartScheduler+0x8e>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	613b      	str	r3, [r7, #16]
}
 8005ea2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ea4:	4b13      	ldr	r3, [pc, #76]	@ (8005ef4 <vTaskStartScheduler+0xc4>)
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eac:	4b12      	ldr	r3, [pc, #72]	@ (8005ef8 <vTaskStartScheduler+0xc8>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005eb2:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <vTaskStartScheduler+0xcc>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005eb8:	f001 f97a 	bl	80071b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ebc:	e00f      	b.n	8005ede <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec4:	d10b      	bne.n	8005ede <vTaskStartScheduler+0xae>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	60fb      	str	r3, [r7, #12]
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	e7fd      	b.n	8005eda <vTaskStartScheduler+0xaa>
}
 8005ede:	bf00      	nop
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	0800a6f4 	.word	0x0800a6f4
 8005eec:	0800651d 	.word	0x0800651d
 8005ef0:	20000cd0 	.word	0x20000cd0
 8005ef4:	20000ccc 	.word	0x20000ccc
 8005ef8:	20000cb8 	.word	0x20000cb8
 8005efc:	20000cb0 	.word	0x20000cb0

08005f00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f04:	4b04      	ldr	r3, [pc, #16]	@ (8005f18 <vTaskSuspendAll+0x18>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	4a03      	ldr	r2, [pc, #12]	@ (8005f18 <vTaskSuspendAll+0x18>)
 8005f0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f0e:	bf00      	nop
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	20000cd4 	.word	0x20000cd4

08005f1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f2a:	4b42      	ldr	r3, [pc, #264]	@ (8006034 <xTaskResumeAll+0x118>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10b      	bne.n	8005f4a <xTaskResumeAll+0x2e>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	603b      	str	r3, [r7, #0]
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	e7fd      	b.n	8005f46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f4a:	f001 f9d5 	bl	80072f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f4e:	4b39      	ldr	r3, [pc, #228]	@ (8006034 <xTaskResumeAll+0x118>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	4a37      	ldr	r2, [pc, #220]	@ (8006034 <xTaskResumeAll+0x118>)
 8005f56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f58:	4b36      	ldr	r3, [pc, #216]	@ (8006034 <xTaskResumeAll+0x118>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d161      	bne.n	8006024 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f60:	4b35      	ldr	r3, [pc, #212]	@ (8006038 <xTaskResumeAll+0x11c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d05d      	beq.n	8006024 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f68:	e02e      	b.n	8005fc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6a:	4b34      	ldr	r3, [pc, #208]	@ (800603c <xTaskResumeAll+0x120>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3318      	adds	r3, #24
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff f86c 	bl	8005054 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff f867 	bl	8005054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	409a      	lsls	r2, r3
 8005f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8006040 <xTaskResumeAll+0x124>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	4a2a      	ldr	r2, [pc, #168]	@ (8006040 <xTaskResumeAll+0x124>)
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4a27      	ldr	r2, [pc, #156]	@ (8006044 <xTaskResumeAll+0x128>)
 8005fa6:	441a      	add	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4619      	mov	r1, r3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	f7fe fff3 	bl	8004f9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb8:	4b23      	ldr	r3, [pc, #140]	@ (8006048 <xTaskResumeAll+0x12c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fc2:	4b22      	ldr	r3, [pc, #136]	@ (800604c <xTaskResumeAll+0x130>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800603c <xTaskResumeAll+0x120>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1cc      	bne.n	8005f6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fd6:	f000 fb57 	bl	8006688 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fda:	4b1d      	ldr	r3, [pc, #116]	@ (8006050 <xTaskResumeAll+0x134>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d010      	beq.n	8006008 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fe6:	f000 f847 	bl	8006078 <xTaskIncrementTick>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ff0:	4b16      	ldr	r3, [pc, #88]	@ (800604c <xTaskResumeAll+0x130>)
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f1      	bne.n	8005fe6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006002:	4b13      	ldr	r3, [pc, #76]	@ (8006050 <xTaskResumeAll+0x134>)
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006008:	4b10      	ldr	r3, [pc, #64]	@ (800604c <xTaskResumeAll+0x130>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006010:	2301      	movs	r3, #1
 8006012:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006014:	4b0f      	ldr	r3, [pc, #60]	@ (8006054 <xTaskResumeAll+0x138>)
 8006016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006024:	f001 f99a 	bl	800735c <vPortExitCritical>

	return xAlreadyYielded;
 8006028:	68bb      	ldr	r3, [r7, #8]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000cd4 	.word	0x20000cd4
 8006038:	20000cac 	.word	0x20000cac
 800603c:	20000c6c 	.word	0x20000c6c
 8006040:	20000cb4 	.word	0x20000cb4
 8006044:	20000bb0 	.word	0x20000bb0
 8006048:	20000bac 	.word	0x20000bac
 800604c:	20000cc0 	.word	0x20000cc0
 8006050:	20000cbc 	.word	0x20000cbc
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800605e:	4b05      	ldr	r3, [pc, #20]	@ (8006074 <xTaskGetTickCount+0x1c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006064:	687b      	ldr	r3, [r7, #4]
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000cb0 	.word	0x20000cb0

08006078 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006082:	4b4f      	ldr	r3, [pc, #316]	@ (80061c0 <xTaskIncrementTick+0x148>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	f040 808f 	bne.w	80061aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800608c:	4b4d      	ldr	r3, [pc, #308]	@ (80061c4 <xTaskIncrementTick+0x14c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006094:	4a4b      	ldr	r2, [pc, #300]	@ (80061c4 <xTaskIncrementTick+0x14c>)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d121      	bne.n	80060e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80060a0:	4b49      	ldr	r3, [pc, #292]	@ (80061c8 <xTaskIncrementTick+0x150>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	603b      	str	r3, [r7, #0]
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	e7fd      	b.n	80060be <xTaskIncrementTick+0x46>
 80060c2:	4b41      	ldr	r3, [pc, #260]	@ (80061c8 <xTaskIncrementTick+0x150>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	4b40      	ldr	r3, [pc, #256]	@ (80061cc <xTaskIncrementTick+0x154>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a3e      	ldr	r2, [pc, #248]	@ (80061c8 <xTaskIncrementTick+0x150>)
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	4a3e      	ldr	r2, [pc, #248]	@ (80061cc <xTaskIncrementTick+0x154>)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	4b3e      	ldr	r3, [pc, #248]	@ (80061d0 <xTaskIncrementTick+0x158>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3301      	adds	r3, #1
 80060dc:	4a3c      	ldr	r2, [pc, #240]	@ (80061d0 <xTaskIncrementTick+0x158>)
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	f000 fad2 	bl	8006688 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060e4:	4b3b      	ldr	r3, [pc, #236]	@ (80061d4 <xTaskIncrementTick+0x15c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d348      	bcc.n	8006180 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ee:	4b36      	ldr	r3, [pc, #216]	@ (80061c8 <xTaskIncrementTick+0x150>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d104      	bne.n	8006102 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f8:	4b36      	ldr	r3, [pc, #216]	@ (80061d4 <xTaskIncrementTick+0x15c>)
 80060fa:	f04f 32ff 	mov.w	r2, #4294967295
 80060fe:	601a      	str	r2, [r3, #0]
					break;
 8006100:	e03e      	b.n	8006180 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006102:	4b31      	ldr	r3, [pc, #196]	@ (80061c8 <xTaskIncrementTick+0x150>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	429a      	cmp	r2, r3
 8006118:	d203      	bcs.n	8006122 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800611a:	4a2e      	ldr	r2, [pc, #184]	@ (80061d4 <xTaskIncrementTick+0x15c>)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006120:	e02e      	b.n	8006180 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	3304      	adds	r3, #4
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe ff94 	bl	8005054 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006130:	2b00      	cmp	r3, #0
 8006132:	d004      	beq.n	800613e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	3318      	adds	r3, #24
 8006138:	4618      	mov	r0, r3
 800613a:	f7fe ff8b 	bl	8005054 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	2201      	movs	r2, #1
 8006144:	409a      	lsls	r2, r3
 8006146:	4b24      	ldr	r3, [pc, #144]	@ (80061d8 <xTaskIncrementTick+0x160>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4313      	orrs	r3, r2
 800614c:	4a22      	ldr	r2, [pc, #136]	@ (80061d8 <xTaskIncrementTick+0x160>)
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4a1f      	ldr	r2, [pc, #124]	@ (80061dc <xTaskIncrementTick+0x164>)
 800615e:	441a      	add	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f7fe ff17 	bl	8004f9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006170:	4b1b      	ldr	r3, [pc, #108]	@ (80061e0 <xTaskIncrementTick+0x168>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006176:	429a      	cmp	r2, r3
 8006178:	d3b9      	bcc.n	80060ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800617a:	2301      	movs	r3, #1
 800617c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800617e:	e7b6      	b.n	80060ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006180:	4b17      	ldr	r3, [pc, #92]	@ (80061e0 <xTaskIncrementTick+0x168>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006186:	4915      	ldr	r1, [pc, #84]	@ (80061dc <xTaskIncrementTick+0x164>)
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d901      	bls.n	800619c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800619c:	4b11      	ldr	r3, [pc, #68]	@ (80061e4 <xTaskIncrementTick+0x16c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80061a4:	2301      	movs	r3, #1
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	e004      	b.n	80061b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061aa:	4b0f      	ldr	r3, [pc, #60]	@ (80061e8 <xTaskIncrementTick+0x170>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	4a0d      	ldr	r2, [pc, #52]	@ (80061e8 <xTaskIncrementTick+0x170>)
 80061b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061b4:	697b      	ldr	r3, [r7, #20]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000cd4 	.word	0x20000cd4
 80061c4:	20000cb0 	.word	0x20000cb0
 80061c8:	20000c64 	.word	0x20000c64
 80061cc:	20000c68 	.word	0x20000c68
 80061d0:	20000cc4 	.word	0x20000cc4
 80061d4:	20000ccc 	.word	0x20000ccc
 80061d8:	20000cb4 	.word	0x20000cb4
 80061dc:	20000bb0 	.word	0x20000bb0
 80061e0:	20000bac 	.word	0x20000bac
 80061e4:	20000cc0 	.word	0x20000cc0
 80061e8:	20000cbc 	.word	0x20000cbc

080061ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061f2:	4b27      	ldr	r3, [pc, #156]	@ (8006290 <vTaskSwitchContext+0xa4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061fa:	4b26      	ldr	r3, [pc, #152]	@ (8006294 <vTaskSwitchContext+0xa8>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006200:	e040      	b.n	8006284 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006202:	4b24      	ldr	r3, [pc, #144]	@ (8006294 <vTaskSwitchContext+0xa8>)
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006208:	4b23      	ldr	r3, [pc, #140]	@ (8006298 <vTaskSwitchContext+0xac>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	fab3 f383 	clz	r3, r3
 8006214:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006216:	7afb      	ldrb	r3, [r7, #11]
 8006218:	f1c3 031f 	rsb	r3, r3, #31
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	491f      	ldr	r1, [pc, #124]	@ (800629c <vTaskSwitchContext+0xb0>)
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	440b      	add	r3, r1
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	607b      	str	r3, [r7, #4]
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	e7fd      	b.n	8006246 <vTaskSwitchContext+0x5a>
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4a11      	ldr	r2, [pc, #68]	@ (800629c <vTaskSwitchContext+0xb0>)
 8006256:	4413      	add	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	605a      	str	r2, [r3, #4]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	3308      	adds	r3, #8
 800626c:	429a      	cmp	r2, r3
 800626e:	d104      	bne.n	800627a <vTaskSwitchContext+0x8e>
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	4a07      	ldr	r2, [pc, #28]	@ (80062a0 <vTaskSwitchContext+0xb4>)
 8006282:	6013      	str	r3, [r2, #0]
}
 8006284:	bf00      	nop
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20000cd4 	.word	0x20000cd4
 8006294:	20000cc0 	.word	0x20000cc0
 8006298:	20000cb4 	.word	0x20000cb4
 800629c:	20000bb0 	.word	0x20000bb0
 80062a0:	20000bac 	.word	0x20000bac

080062a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	60fb      	str	r3, [r7, #12]
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062cc:	4b07      	ldr	r3, [pc, #28]	@ (80062ec <vTaskPlaceOnEventList+0x48>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3318      	adds	r3, #24
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7fe fe84 	bl	8004fe2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062da:	2101      	movs	r1, #1
 80062dc:	6838      	ldr	r0, [r7, #0]
 80062de:	f000 fa99 	bl	8006814 <prvAddCurrentTaskToDelayedList>
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000bac 	.word	0x20000bac

080062f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10b      	bne.n	800631a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	617b      	str	r3, [r7, #20]
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800631a:	4b0a      	ldr	r3, [pc, #40]	@ (8006344 <vTaskPlaceOnEventListRestricted+0x54>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3318      	adds	r3, #24
 8006320:	4619      	mov	r1, r3
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7fe fe39 	bl	8004f9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800632e:	f04f 33ff 	mov.w	r3, #4294967295
 8006332:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	68b8      	ldr	r0, [r7, #8]
 8006338:	f000 fa6c 	bl	8006814 <prvAddCurrentTaskToDelayedList>
	}
 800633c:	bf00      	nop
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000bac 	.word	0x20000bac

08006348 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	60fb      	str	r3, [r7, #12]
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	e7fd      	b.n	8006372 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	3318      	adds	r3, #24
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fe6a 	bl	8005054 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006380:	4b1d      	ldr	r3, [pc, #116]	@ (80063f8 <xTaskRemoveFromEventList+0xb0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d11c      	bne.n	80063c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	3304      	adds	r3, #4
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fe61 	bl	8005054 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006396:	2201      	movs	r2, #1
 8006398:	409a      	lsls	r2, r3
 800639a:	4b18      	ldr	r3, [pc, #96]	@ (80063fc <xTaskRemoveFromEventList+0xb4>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4313      	orrs	r3, r2
 80063a0:	4a16      	ldr	r2, [pc, #88]	@ (80063fc <xTaskRemoveFromEventList+0xb4>)
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4a13      	ldr	r2, [pc, #76]	@ (8006400 <xTaskRemoveFromEventList+0xb8>)
 80063b2:	441a      	add	r2, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f7fe fded 	bl	8004f9a <vListInsertEnd>
 80063c0:	e005      	b.n	80063ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	3318      	adds	r3, #24
 80063c6:	4619      	mov	r1, r3
 80063c8:	480e      	ldr	r0, [pc, #56]	@ (8006404 <xTaskRemoveFromEventList+0xbc>)
 80063ca:	f7fe fde6 	bl	8004f9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006408 <xTaskRemoveFromEventList+0xc0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d8:	429a      	cmp	r2, r3
 80063da:	d905      	bls.n	80063e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063dc:	2301      	movs	r3, #1
 80063de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063e0:	4b0a      	ldr	r3, [pc, #40]	@ (800640c <xTaskRemoveFromEventList+0xc4>)
 80063e2:	2201      	movs	r2, #1
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	e001      	b.n	80063ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063ec:	697b      	ldr	r3, [r7, #20]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000cd4 	.word	0x20000cd4
 80063fc:	20000cb4 	.word	0x20000cb4
 8006400:	20000bb0 	.word	0x20000bb0
 8006404:	20000c6c 	.word	0x20000c6c
 8006408:	20000bac 	.word	0x20000bac
 800640c:	20000cc0 	.word	0x20000cc0

08006410 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006418:	4b06      	ldr	r3, [pc, #24]	@ (8006434 <vTaskInternalSetTimeOutState+0x24>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006420:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <vTaskInternalSetTimeOutState+0x28>)
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	605a      	str	r2, [r3, #4]
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	20000cc4 	.word	0x20000cc4
 8006438:	20000cb0 	.word	0x20000cb0

0800643c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10b      	bne.n	8006464 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	613b      	str	r3, [r7, #16]
}
 800645e:	bf00      	nop
 8006460:	bf00      	nop
 8006462:	e7fd      	b.n	8006460 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10b      	bne.n	8006482 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	60fb      	str	r3, [r7, #12]
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	e7fd      	b.n	800647e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006482:	f000 ff39 	bl	80072f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006486:	4b1d      	ldr	r3, [pc, #116]	@ (80064fc <xTaskCheckForTimeOut+0xc0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649e:	d102      	bne.n	80064a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	e023      	b.n	80064ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b15      	ldr	r3, [pc, #84]	@ (8006500 <xTaskCheckForTimeOut+0xc4>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d007      	beq.n	80064c2 <xTaskCheckForTimeOut+0x86>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d302      	bcc.n	80064c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064bc:	2301      	movs	r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e015      	b.n	80064ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d20b      	bcs.n	80064e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ff99 	bl	8006410 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	e004      	b.n	80064ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064ea:	2301      	movs	r3, #1
 80064ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064ee:	f000 ff35 	bl	800735c <vPortExitCritical>

	return xReturn;
 80064f2:	69fb      	ldr	r3, [r7, #28]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3720      	adds	r7, #32
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000cb0 	.word	0x20000cb0
 8006500:	20000cc4 	.word	0x20000cc4

08006504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006508:	4b03      	ldr	r3, [pc, #12]	@ (8006518 <vTaskMissedYield+0x14>)
 800650a:	2201      	movs	r2, #1
 800650c:	601a      	str	r2, [r3, #0]
}
 800650e:	bf00      	nop
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	20000cc0 	.word	0x20000cc0

0800651c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006524:	f000 f852 	bl	80065cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006528:	4b06      	ldr	r3, [pc, #24]	@ (8006544 <prvIdleTask+0x28>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d9f9      	bls.n	8006524 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006530:	4b05      	ldr	r3, [pc, #20]	@ (8006548 <prvIdleTask+0x2c>)
 8006532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006540:	e7f0      	b.n	8006524 <prvIdleTask+0x8>
 8006542:	bf00      	nop
 8006544:	20000bb0 	.word	0x20000bb0
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006552:	2300      	movs	r3, #0
 8006554:	607b      	str	r3, [r7, #4]
 8006556:	e00c      	b.n	8006572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4a12      	ldr	r2, [pc, #72]	@ (80065ac <prvInitialiseTaskLists+0x60>)
 8006564:	4413      	add	r3, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe fcea 	bl	8004f40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3301      	adds	r3, #1
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b06      	cmp	r3, #6
 8006576:	d9ef      	bls.n	8006558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006578:	480d      	ldr	r0, [pc, #52]	@ (80065b0 <prvInitialiseTaskLists+0x64>)
 800657a:	f7fe fce1 	bl	8004f40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800657e:	480d      	ldr	r0, [pc, #52]	@ (80065b4 <prvInitialiseTaskLists+0x68>)
 8006580:	f7fe fcde 	bl	8004f40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006584:	480c      	ldr	r0, [pc, #48]	@ (80065b8 <prvInitialiseTaskLists+0x6c>)
 8006586:	f7fe fcdb 	bl	8004f40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800658a:	480c      	ldr	r0, [pc, #48]	@ (80065bc <prvInitialiseTaskLists+0x70>)
 800658c:	f7fe fcd8 	bl	8004f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006590:	480b      	ldr	r0, [pc, #44]	@ (80065c0 <prvInitialiseTaskLists+0x74>)
 8006592:	f7fe fcd5 	bl	8004f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006596:	4b0b      	ldr	r3, [pc, #44]	@ (80065c4 <prvInitialiseTaskLists+0x78>)
 8006598:	4a05      	ldr	r2, [pc, #20]	@ (80065b0 <prvInitialiseTaskLists+0x64>)
 800659a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800659c:	4b0a      	ldr	r3, [pc, #40]	@ (80065c8 <prvInitialiseTaskLists+0x7c>)
 800659e:	4a05      	ldr	r2, [pc, #20]	@ (80065b4 <prvInitialiseTaskLists+0x68>)
 80065a0:	601a      	str	r2, [r3, #0]
}
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000bb0 	.word	0x20000bb0
 80065b0:	20000c3c 	.word	0x20000c3c
 80065b4:	20000c50 	.word	0x20000c50
 80065b8:	20000c6c 	.word	0x20000c6c
 80065bc:	20000c80 	.word	0x20000c80
 80065c0:	20000c98 	.word	0x20000c98
 80065c4:	20000c64 	.word	0x20000c64
 80065c8:	20000c68 	.word	0x20000c68

080065cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065d2:	e019      	b.n	8006608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065d4:	f000 fe90 	bl	80072f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d8:	4b10      	ldr	r3, [pc, #64]	@ (800661c <prvCheckTasksWaitingTermination+0x50>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fd35 	bl	8005054 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006620 <prvCheckTasksWaitingTermination+0x54>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	4a0b      	ldr	r2, [pc, #44]	@ (8006620 <prvCheckTasksWaitingTermination+0x54>)
 80065f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <prvCheckTasksWaitingTermination+0x58>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006624 <prvCheckTasksWaitingTermination+0x58>)
 80065fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065fe:	f000 fead 	bl	800735c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f810 	bl	8006628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006608:	4b06      	ldr	r3, [pc, #24]	@ (8006624 <prvCheckTasksWaitingTermination+0x58>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e1      	bne.n	80065d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000c80 	.word	0x20000c80
 8006620:	20000cac 	.word	0x20000cac
 8006624:	20000c94 	.word	0x20000c94

08006628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006636:	2b00      	cmp	r3, #0
 8006638:	d108      	bne.n	800664c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663e:	4618      	mov	r0, r3
 8006640:	f001 f84a 	bl	80076d8 <vPortFree>
				vPortFree( pxTCB );
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 f847 	bl	80076d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800664a:	e019      	b.n	8006680 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006652:	2b01      	cmp	r3, #1
 8006654:	d103      	bne.n	800665e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 f83e 	bl	80076d8 <vPortFree>
	}
 800665c:	e010      	b.n	8006680 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006664:	2b02      	cmp	r3, #2
 8006666:	d00b      	beq.n	8006680 <prvDeleteTCB+0x58>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	60fb      	str	r3, [r7, #12]
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <prvDeleteTCB+0x54>
	}
 8006680:	bf00      	nop
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800668e:	4b0c      	ldr	r3, [pc, #48]	@ (80066c0 <prvResetNextTaskUnblockTime+0x38>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d104      	bne.n	80066a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006698:	4b0a      	ldr	r3, [pc, #40]	@ (80066c4 <prvResetNextTaskUnblockTime+0x3c>)
 800669a:	f04f 32ff 	mov.w	r2, #4294967295
 800669e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066a0:	e008      	b.n	80066b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a2:	4b07      	ldr	r3, [pc, #28]	@ (80066c0 <prvResetNextTaskUnblockTime+0x38>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4a04      	ldr	r2, [pc, #16]	@ (80066c4 <prvResetNextTaskUnblockTime+0x3c>)
 80066b2:	6013      	str	r3, [r2, #0]
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	20000c64 	.word	0x20000c64
 80066c4:	20000ccc 	.word	0x20000ccc

080066c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066ce:	4b0b      	ldr	r3, [pc, #44]	@ (80066fc <xTaskGetSchedulerState+0x34>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d102      	bne.n	80066dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066d6:	2301      	movs	r3, #1
 80066d8:	607b      	str	r3, [r7, #4]
 80066da:	e008      	b.n	80066ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066dc:	4b08      	ldr	r3, [pc, #32]	@ (8006700 <xTaskGetSchedulerState+0x38>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066e4:	2302      	movs	r3, #2
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	e001      	b.n	80066ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066ea:	2300      	movs	r3, #0
 80066ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066ee:	687b      	ldr	r3, [r7, #4]
	}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	20000cb8 	.word	0x20000cb8
 8006700:	20000cd4 	.word	0x20000cd4

08006704 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d070      	beq.n	80067fc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800671a:	4b3b      	ldr	r3, [pc, #236]	@ (8006808 <xTaskPriorityDisinherit+0x104>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	429a      	cmp	r2, r3
 8006722:	d00b      	beq.n	800673c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	60fb      	str	r3, [r7, #12]
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	e7fd      	b.n	8006738 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10b      	bne.n	800675c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	60bb      	str	r3, [r7, #8]
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	e7fd      	b.n	8006758 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006760:	1e5a      	subs	r2, r3, #1
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800676e:	429a      	cmp	r2, r3
 8006770:	d044      	beq.n	80067fc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006776:	2b00      	cmp	r3, #0
 8006778:	d140      	bne.n	80067fc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	3304      	adds	r3, #4
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe fc68 	bl	8005054 <uxListRemove>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d115      	bne.n	80067b6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678e:	491f      	ldr	r1, [pc, #124]	@ (800680c <xTaskPriorityDisinherit+0x108>)
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <xTaskPriorityDisinherit+0xb2>
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	2201      	movs	r2, #1
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	43da      	mvns	r2, r3
 80067ac:	4b18      	ldr	r3, [pc, #96]	@ (8006810 <xTaskPriorityDisinherit+0x10c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4013      	ands	r3, r2
 80067b2:	4a17      	ldr	r2, [pc, #92]	@ (8006810 <xTaskPriorityDisinherit+0x10c>)
 80067b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c2:	f1c3 0207 	rsb	r2, r3, #7
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ce:	2201      	movs	r2, #1
 80067d0:	409a      	lsls	r2, r3
 80067d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006810 <xTaskPriorityDisinherit+0x10c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	4a0d      	ldr	r2, [pc, #52]	@ (8006810 <xTaskPriorityDisinherit+0x10c>)
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4a08      	ldr	r2, [pc, #32]	@ (800680c <xTaskPriorityDisinherit+0x108>)
 80067ea:	441a      	add	r2, r3
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4619      	mov	r1, r3
 80067f2:	4610      	mov	r0, r2
 80067f4:	f7fe fbd1 	bl	8004f9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067f8:	2301      	movs	r3, #1
 80067fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067fc:	697b      	ldr	r3, [r7, #20]
	}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000bac 	.word	0x20000bac
 800680c:	20000bb0 	.word	0x20000bb0
 8006810:	20000cb4 	.word	0x20000cb4

08006814 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800681e:	4b29      	ldr	r3, [pc, #164]	@ (80068c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006824:	4b28      	ldr	r3, [pc, #160]	@ (80068c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3304      	adds	r3, #4
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe fc12 	bl	8005054 <uxListRemove>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10b      	bne.n	800684e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006836:	4b24      	ldr	r3, [pc, #144]	@ (80068c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683c:	2201      	movs	r2, #1
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	43da      	mvns	r2, r3
 8006844:	4b21      	ldr	r3, [pc, #132]	@ (80068cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4013      	ands	r3, r2
 800684a:	4a20      	ldr	r2, [pc, #128]	@ (80068cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800684c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d10a      	bne.n	800686c <prvAddCurrentTaskToDelayedList+0x58>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d007      	beq.n	800686c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800685c:	4b1a      	ldr	r3, [pc, #104]	@ (80068c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3304      	adds	r3, #4
 8006862:	4619      	mov	r1, r3
 8006864:	481a      	ldr	r0, [pc, #104]	@ (80068d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006866:	f7fe fb98 	bl	8004f9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800686a:	e026      	b.n	80068ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4413      	add	r3, r2
 8006872:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006874:	4b14      	ldr	r3, [pc, #80]	@ (80068c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	429a      	cmp	r2, r3
 8006882:	d209      	bcs.n	8006898 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006884:	4b13      	ldr	r3, [pc, #76]	@ (80068d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	4b0f      	ldr	r3, [pc, #60]	@ (80068c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3304      	adds	r3, #4
 800688e:	4619      	mov	r1, r3
 8006890:	4610      	mov	r0, r2
 8006892:	f7fe fba6 	bl	8004fe2 <vListInsert>
}
 8006896:	e010      	b.n	80068ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006898:	4b0f      	ldr	r3, [pc, #60]	@ (80068d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	4b0a      	ldr	r3, [pc, #40]	@ (80068c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	4610      	mov	r0, r2
 80068a6:	f7fe fb9c 	bl	8004fe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068aa:	4b0c      	ldr	r3, [pc, #48]	@ (80068dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d202      	bcs.n	80068ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80068b4:	4a09      	ldr	r2, [pc, #36]	@ (80068dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	6013      	str	r3, [r2, #0]
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000cb0 	.word	0x20000cb0
 80068c8:	20000bac 	.word	0x20000bac
 80068cc:	20000cb4 	.word	0x20000cb4
 80068d0:	20000c98 	.word	0x20000c98
 80068d4:	20000c68 	.word	0x20000c68
 80068d8:	20000c64 	.word	0x20000c64
 80068dc:	20000ccc 	.word	0x20000ccc

080068e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	@ 0x28
 80068e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068ea:	f000 fb95 	bl	8007018 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006964 <xTimerCreateTimerTask+0x84>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d021      	beq.n	800693a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068fe:	1d3a      	adds	r2, r7, #4
 8006900:	f107 0108 	add.w	r1, r7, #8
 8006904:	f107 030c 	add.w	r3, r7, #12
 8006908:	4618      	mov	r0, r3
 800690a:	f7fa fb4f 	bl	8000fac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	9202      	str	r2, [sp, #8]
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	2301      	movs	r3, #1
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	2300      	movs	r3, #0
 800691e:	460a      	mov	r2, r1
 8006920:	4911      	ldr	r1, [pc, #68]	@ (8006968 <xTimerCreateTimerTask+0x88>)
 8006922:	4812      	ldr	r0, [pc, #72]	@ (800696c <xTimerCreateTimerTask+0x8c>)
 8006924:	f7ff f8b6 	bl	8005a94 <xTaskCreateStatic>
 8006928:	4603      	mov	r3, r0
 800692a:	4a11      	ldr	r2, [pc, #68]	@ (8006970 <xTimerCreateTimerTask+0x90>)
 800692c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800692e:	4b10      	ldr	r3, [pc, #64]	@ (8006970 <xTimerCreateTimerTask+0x90>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006936:	2301      	movs	r3, #1
 8006938:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	613b      	str	r3, [r7, #16]
}
 8006952:	bf00      	nop
 8006954:	bf00      	nop
 8006956:	e7fd      	b.n	8006954 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006958:	697b      	ldr	r3, [r7, #20]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000d08 	.word	0x20000d08
 8006968:	0800a6fc 	.word	0x0800a6fc
 800696c:	08006be9 	.word	0x08006be9
 8006970:	20000d0c 	.word	0x20000d0c

08006974 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006982:	2028      	movs	r0, #40	@ 0x28
 8006984:	f000 fdda 	bl	800753c <pvPortMalloc>
 8006988:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00d      	beq.n	80069ac <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f845 	bl	8006a36 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80069ac:	697b      	ldr	r3, [r7, #20]
	}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b08a      	sub	sp, #40	@ 0x28
 80069ba:	af02      	add	r7, sp, #8
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	607a      	str	r2, [r7, #4]
 80069c2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80069c4:	2328      	movs	r3, #40	@ 0x28
 80069c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	2b28      	cmp	r3, #40	@ 0x28
 80069cc:	d00b      	beq.n	80069e6 <xTimerCreateStatic+0x30>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	61bb      	str	r3, [r7, #24]
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	e7fd      	b.n	80069e2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80069e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10b      	bne.n	8006a06 <xTimerCreateStatic+0x50>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	617b      	str	r3, [r7, #20]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00d      	beq.n	8006a2c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 f805 	bl	8006a36 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
	}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b086      	sub	sp, #24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	617b      	str	r3, [r7, #20]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01e      	beq.n	8006aa6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006a68:	f000 fad6 	bl	8007018 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	3304      	adds	r3, #4
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe fa79 	bl	8004f80 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a9a:	f043 0304 	orr.w	r3, r3, #4
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006aa6:	bf00      	nop
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	@ 0x28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10b      	bne.n	8006ae0 <xTimerGenericCommand+0x30>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	623b      	str	r3, [r7, #32]
}
 8006ada:	bf00      	nop
 8006adc:	bf00      	nop
 8006ade:	e7fd      	b.n	8006adc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ae0:	4b19      	ldr	r3, [pc, #100]	@ (8006b48 <xTimerGenericCommand+0x98>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02a      	beq.n	8006b3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	dc18      	bgt.n	8006b2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006afa:	f7ff fde5 	bl	80066c8 <xTaskGetSchedulerState>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d109      	bne.n	8006b18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b04:	4b10      	ldr	r3, [pc, #64]	@ (8006b48 <xTimerGenericCommand+0x98>)
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	f107 0114 	add.w	r1, r7, #20
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b10:	f7fe fbd0 	bl	80052b4 <xQueueGenericSend>
 8006b14:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b16:	e012      	b.n	8006b3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b18:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <xTimerGenericCommand+0x98>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	f107 0114 	add.w	r1, r7, #20
 8006b20:	2300      	movs	r3, #0
 8006b22:	2200      	movs	r2, #0
 8006b24:	f7fe fbc6 	bl	80052b4 <xQueueGenericSend>
 8006b28:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b2a:	e008      	b.n	8006b3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b2c:	4b06      	ldr	r3, [pc, #24]	@ (8006b48 <xTimerGenericCommand+0x98>)
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	f107 0114 	add.w	r1, r7, #20
 8006b34:	2300      	movs	r3, #0
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	f7fe fcbe 	bl	80054b8 <xQueueGenericSendFromISR>
 8006b3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3728      	adds	r7, #40	@ 0x28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20000d08 	.word	0x20000d08

08006b4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b56:	4b23      	ldr	r3, [pc, #140]	@ (8006be4 <prvProcessExpiredTimer+0x98>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fe fa75 	bl	8005054 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d023      	beq.n	8006bc0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	18d1      	adds	r1, r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	6978      	ldr	r0, [r7, #20]
 8006b86:	f000 f8d5 	bl	8006d34 <prvInsertTimerInActiveList>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d020      	beq.n	8006bd2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b90:	2300      	movs	r3, #0
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	2300      	movs	r3, #0
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	2100      	movs	r1, #0
 8006b9a:	6978      	ldr	r0, [r7, #20]
 8006b9c:	f7ff ff88 	bl	8006ab0 <xTimerGenericCommand>
 8006ba0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d114      	bne.n	8006bd2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	60fb      	str	r3, [r7, #12]
}
 8006bba:	bf00      	nop
 8006bbc:	bf00      	nop
 8006bbe:	e7fd      	b.n	8006bbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006bc6:	f023 0301 	bic.w	r3, r3, #1
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	6978      	ldr	r0, [r7, #20]
 8006bd8:	4798      	blx	r3
}
 8006bda:	bf00      	nop
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000d00 	.word	0x20000d00

08006be8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bf0:	f107 0308 	add.w	r3, r7, #8
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 f859 	bl	8006cac <prvGetNextExpireTime>
 8006bfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f805 	bl	8006c10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c06:	f000 f8d7 	bl	8006db8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c0a:	bf00      	nop
 8006c0c:	e7f0      	b.n	8006bf0 <prvTimerTask+0x8>
	...

08006c10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c1a:	f7ff f971 	bl	8005f00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c1e:	f107 0308 	add.w	r3, r7, #8
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f866 	bl	8006cf4 <prvSampleTimeNow>
 8006c28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d130      	bne.n	8006c92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10a      	bne.n	8006c4c <prvProcessTimerOrBlockTask+0x3c>
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d806      	bhi.n	8006c4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c3e:	f7ff f96d 	bl	8005f1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c42:	68f9      	ldr	r1, [r7, #12]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff ff81 	bl	8006b4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c4a:	e024      	b.n	8006c96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d008      	beq.n	8006c64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c52:	4b13      	ldr	r3, [pc, #76]	@ (8006ca0 <prvProcessTimerOrBlockTask+0x90>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <prvProcessTimerOrBlockTask+0x50>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e000      	b.n	8006c62 <prvProcessTimerOrBlockTask+0x52>
 8006c60:	2300      	movs	r3, #0
 8006c62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca4 <prvProcessTimerOrBlockTask+0x94>)
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	4619      	mov	r1, r3
 8006c72:	f7fe fedb 	bl	8005a2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c76:	f7ff f951 	bl	8005f1c <xTaskResumeAll>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10a      	bne.n	8006c96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c80:	4b09      	ldr	r3, [pc, #36]	@ (8006ca8 <prvProcessTimerOrBlockTask+0x98>)
 8006c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	f3bf 8f6f 	isb	sy
}
 8006c90:	e001      	b.n	8006c96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c92:	f7ff f943 	bl	8005f1c <xTaskResumeAll>
}
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000d04 	.word	0x20000d04
 8006ca4:	20000d08 	.word	0x20000d08
 8006ca8:	e000ed04 	.word	0xe000ed04

08006cac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf0 <prvGetNextExpireTime+0x44>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <prvGetNextExpireTime+0x16>
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	e000      	b.n	8006cc4 <prvGetNextExpireTime+0x18>
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d105      	bne.n	8006cdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cd0:	4b07      	ldr	r3, [pc, #28]	@ (8006cf0 <prvGetNextExpireTime+0x44>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	e001      	b.n	8006ce0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000d00 	.word	0x20000d00

08006cf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006cfc:	f7ff f9ac 	bl	8006058 <xTaskGetTickCount>
 8006d00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d02:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <prvSampleTimeNow+0x3c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d205      	bcs.n	8006d18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d0c:	f000 f91e 	bl	8006f4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	e002      	b.n	8006d1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d1e:	4a04      	ldr	r2, [pc, #16]	@ (8006d30 <prvSampleTimeNow+0x3c>)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d24:	68fb      	ldr	r3, [r7, #12]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000d10 	.word	0x20000d10

08006d34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d812      	bhi.n	8006d80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d302      	bcc.n	8006d6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	e01b      	b.n	8006da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d6e:	4b10      	ldr	r3, [pc, #64]	@ (8006db0 <prvInsertTimerInActiveList+0x7c>)
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3304      	adds	r3, #4
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f7fe f932 	bl	8004fe2 <vListInsert>
 8006d7e:	e012      	b.n	8006da6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d206      	bcs.n	8006d96 <prvInsertTimerInActiveList+0x62>
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d302      	bcc.n	8006d96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	e007      	b.n	8006da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d96:	4b07      	ldr	r3, [pc, #28]	@ (8006db4 <prvInsertTimerInActiveList+0x80>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f7fe f91e 	bl	8004fe2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006da6:	697b      	ldr	r3, [r7, #20]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000d04 	.word	0x20000d04
 8006db4:	20000d00 	.word	0x20000d00

08006db8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08c      	sub	sp, #48	@ 0x30
 8006dbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dbe:	e0b2      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f2c0 80af 	blt.w	8006f26 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d004      	beq.n	8006dde <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe f93b 	bl	8005054 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff ff87 	bl	8006cf4 <prvSampleTimeNow>
 8006de6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b09      	cmp	r3, #9
 8006dec:	f200 8098 	bhi.w	8006f20 <prvProcessReceivedCommands+0x168>
 8006df0:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <prvProcessReceivedCommands+0x40>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e21 	.word	0x08006e21
 8006dfc:	08006e21 	.word	0x08006e21
 8006e00:	08006e21 	.word	0x08006e21
 8006e04:	08006e97 	.word	0x08006e97
 8006e08:	08006eab 	.word	0x08006eab
 8006e0c:	08006ef7 	.word	0x08006ef7
 8006e10:	08006e21 	.word	0x08006e21
 8006e14:	08006e21 	.word	0x08006e21
 8006e18:	08006e97 	.word	0x08006e97
 8006e1c:	08006eab 	.word	0x08006eab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e26:	f043 0301 	orr.w	r3, r3, #1
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	18d1      	adds	r1, r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a3a      	ldr	r2, [r7, #32]
 8006e3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e40:	f7ff ff78 	bl	8006d34 <prvInsertTimerInActiveList>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d06c      	beq.n	8006f24 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d061      	beq.n	8006f24 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	441a      	add	r2, r3
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e72:	f7ff fe1d 	bl	8006ab0 <xTimerGenericCommand>
 8006e76:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d152      	bne.n	8006f24 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	61bb      	str	r3, [r7, #24]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006ea8:	e03d      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006eb0:	f043 0301 	orr.w	r3, r3, #1
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10b      	bne.n	8006ee2 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	617b      	str	r3, [r7, #20]
}
 8006edc:	bf00      	nop
 8006ede:	bf00      	nop
 8006ee0:	e7fd      	b.n	8006ede <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	18d1      	adds	r1, r2, r3
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ef0:	f7ff ff20 	bl	8006d34 <prvInsertTimerInActiveList>
					break;
 8006ef4:	e017      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d103      	bne.n	8006f0c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8006f04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f06:	f000 fbe7 	bl	80076d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f0a:	e00c      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f12:	f023 0301 	bic.w	r3, r3, #1
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006f1e:	e002      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>
					break;
 8006f24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f26:	4b08      	ldr	r3, [pc, #32]	@ (8006f48 <prvProcessReceivedCommands+0x190>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f107 0108 	add.w	r1, r7, #8
 8006f2e:	2200      	movs	r2, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe fb5f 	bl	80055f4 <xQueueReceive>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f47f af41 	bne.w	8006dc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	3728      	adds	r7, #40	@ 0x28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20000d08 	.word	0x20000d08

08006f4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f52:	e049      	b.n	8006fe8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f54:	4b2e      	ldr	r3, [pc, #184]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe f871 	bl	8005054 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d02f      	beq.n	8006fe8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4413      	add	r3, r2
 8006f90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d90e      	bls.n	8006fb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fe f816 	bl	8004fe2 <vListInsert>
 8006fb6:	e017      	b.n	8006fe8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff fd74 	bl	8006ab0 <xTimerGenericCommand>
 8006fc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10b      	bne.n	8006fe8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	603b      	str	r3, [r7, #0]
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	e7fd      	b.n	8006fe4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fe8:	4b09      	ldr	r3, [pc, #36]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1b0      	bne.n	8006f54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ff2:	4b07      	ldr	r3, [pc, #28]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ff8:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <prvSwitchTimerLists+0xc8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a04      	ldr	r2, [pc, #16]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006ffe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007000:	4a04      	ldr	r2, [pc, #16]	@ (8007014 <prvSwitchTimerLists+0xc8>)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	6013      	str	r3, [r2, #0]
}
 8007006:	bf00      	nop
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20000d00 	.word	0x20000d00
 8007014:	20000d04 	.word	0x20000d04

08007018 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800701e:	f000 f96b 	bl	80072f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007022:	4b15      	ldr	r3, [pc, #84]	@ (8007078 <prvCheckForValidListAndQueue+0x60>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d120      	bne.n	800706c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800702a:	4814      	ldr	r0, [pc, #80]	@ (800707c <prvCheckForValidListAndQueue+0x64>)
 800702c:	f7fd ff88 	bl	8004f40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007030:	4813      	ldr	r0, [pc, #76]	@ (8007080 <prvCheckForValidListAndQueue+0x68>)
 8007032:	f7fd ff85 	bl	8004f40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007036:	4b13      	ldr	r3, [pc, #76]	@ (8007084 <prvCheckForValidListAndQueue+0x6c>)
 8007038:	4a10      	ldr	r2, [pc, #64]	@ (800707c <prvCheckForValidListAndQueue+0x64>)
 800703a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800703c:	4b12      	ldr	r3, [pc, #72]	@ (8007088 <prvCheckForValidListAndQueue+0x70>)
 800703e:	4a10      	ldr	r2, [pc, #64]	@ (8007080 <prvCheckForValidListAndQueue+0x68>)
 8007040:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007042:	2300      	movs	r3, #0
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	4b11      	ldr	r3, [pc, #68]	@ (800708c <prvCheckForValidListAndQueue+0x74>)
 8007048:	4a11      	ldr	r2, [pc, #68]	@ (8007090 <prvCheckForValidListAndQueue+0x78>)
 800704a:	210c      	movs	r1, #12
 800704c:	200a      	movs	r0, #10
 800704e:	f7fe f895 	bl	800517c <xQueueGenericCreateStatic>
 8007052:	4603      	mov	r3, r0
 8007054:	4a08      	ldr	r2, [pc, #32]	@ (8007078 <prvCheckForValidListAndQueue+0x60>)
 8007056:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007058:	4b07      	ldr	r3, [pc, #28]	@ (8007078 <prvCheckForValidListAndQueue+0x60>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007060:	4b05      	ldr	r3, [pc, #20]	@ (8007078 <prvCheckForValidListAndQueue+0x60>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	490b      	ldr	r1, [pc, #44]	@ (8007094 <prvCheckForValidListAndQueue+0x7c>)
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fcb6 	bl	80059d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800706c:	f000 f976 	bl	800735c <vPortExitCritical>
}
 8007070:	bf00      	nop
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000d08 	.word	0x20000d08
 800707c:	20000cd8 	.word	0x20000cd8
 8007080:	20000cec 	.word	0x20000cec
 8007084:	20000d00 	.word	0x20000d00
 8007088:	20000d04 	.word	0x20000d04
 800708c:	20000d8c 	.word	0x20000d8c
 8007090:	20000d14 	.word	0x20000d14
 8007094:	0800a704 	.word	0x0800a704

08007098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3b04      	subs	r3, #4
 80070a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3b04      	subs	r3, #4
 80070b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f023 0201 	bic.w	r2, r3, #1
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3b04      	subs	r3, #4
 80070c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070c8:	4a0c      	ldr	r2, [pc, #48]	@ (80070fc <pxPortInitialiseStack+0x64>)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3b14      	subs	r3, #20
 80070d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3b04      	subs	r3, #4
 80070de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f06f 0202 	mvn.w	r2, #2
 80070e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3b20      	subs	r3, #32
 80070ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070ee:	68fb      	ldr	r3, [r7, #12]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	08007101 	.word	0x08007101

08007100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800710a:	4b13      	ldr	r3, [pc, #76]	@ (8007158 <prvTaskExitError+0x58>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007112:	d00b      	beq.n	800712c <prvTaskExitError+0x2c>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	60fb      	str	r3, [r7, #12]
}
 8007126:	bf00      	nop
 8007128:	bf00      	nop
 800712a:	e7fd      	b.n	8007128 <prvTaskExitError+0x28>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	60bb      	str	r3, [r7, #8]
}
 800713e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007140:	bf00      	nop
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0fc      	beq.n	8007142 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	2000000c 	.word	0x2000000c
 800715c:	00000000 	.word	0x00000000

08007160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007160:	4b07      	ldr	r3, [pc, #28]	@ (8007180 <pxCurrentTCBConst2>)
 8007162:	6819      	ldr	r1, [r3, #0]
 8007164:	6808      	ldr	r0, [r1, #0]
 8007166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	f380 8809 	msr	PSP, r0
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f04f 0000 	mov.w	r0, #0
 8007176:	f380 8811 	msr	BASEPRI, r0
 800717a:	4770      	bx	lr
 800717c:	f3af 8000 	nop.w

08007180 <pxCurrentTCBConst2>:
 8007180:	20000bac 	.word	0x20000bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop

08007188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007188:	4808      	ldr	r0, [pc, #32]	@ (80071ac <prvPortStartFirstTask+0x24>)
 800718a:	6800      	ldr	r0, [r0, #0]
 800718c:	6800      	ldr	r0, [r0, #0]
 800718e:	f380 8808 	msr	MSP, r0
 8007192:	f04f 0000 	mov.w	r0, #0
 8007196:	f380 8814 	msr	CONTROL, r0
 800719a:	b662      	cpsie	i
 800719c:	b661      	cpsie	f
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	df00      	svc	0
 80071a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071aa:	bf00      	nop
 80071ac:	e000ed08 	.word	0xe000ed08

080071b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071b6:	4b47      	ldr	r3, [pc, #284]	@ (80072d4 <xPortStartScheduler+0x124>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a47      	ldr	r2, [pc, #284]	@ (80072d8 <xPortStartScheduler+0x128>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d10b      	bne.n	80071d8 <xPortStartScheduler+0x28>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	613b      	str	r3, [r7, #16]
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	e7fd      	b.n	80071d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071d8:	4b3e      	ldr	r3, [pc, #248]	@ (80072d4 <xPortStartScheduler+0x124>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a3f      	ldr	r2, [pc, #252]	@ (80072dc <xPortStartScheduler+0x12c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d10b      	bne.n	80071fa <xPortStartScheduler+0x4a>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	60fb      	str	r3, [r7, #12]
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	e7fd      	b.n	80071f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071fa:	4b39      	ldr	r3, [pc, #228]	@ (80072e0 <xPortStartScheduler+0x130>)
 80071fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	22ff      	movs	r2, #255	@ 0xff
 800720a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800721c:	b2da      	uxtb	r2, r3
 800721e:	4b31      	ldr	r3, [pc, #196]	@ (80072e4 <xPortStartScheduler+0x134>)
 8007220:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007222:	4b31      	ldr	r3, [pc, #196]	@ (80072e8 <xPortStartScheduler+0x138>)
 8007224:	2207      	movs	r2, #7
 8007226:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007228:	e009      	b.n	800723e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800722a:	4b2f      	ldr	r3, [pc, #188]	@ (80072e8 <xPortStartScheduler+0x138>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3b01      	subs	r3, #1
 8007230:	4a2d      	ldr	r2, [pc, #180]	@ (80072e8 <xPortStartScheduler+0x138>)
 8007232:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	b2db      	uxtb	r3, r3
 800723c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800723e:	78fb      	ldrb	r3, [r7, #3]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007246:	2b80      	cmp	r3, #128	@ 0x80
 8007248:	d0ef      	beq.n	800722a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800724a:	4b27      	ldr	r3, [pc, #156]	@ (80072e8 <xPortStartScheduler+0x138>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f1c3 0307 	rsb	r3, r3, #7
 8007252:	2b04      	cmp	r3, #4
 8007254:	d00b      	beq.n	800726e <xPortStartScheduler+0xbe>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60bb      	str	r3, [r7, #8]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800726e:	4b1e      	ldr	r3, [pc, #120]	@ (80072e8 <xPortStartScheduler+0x138>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	4a1c      	ldr	r2, [pc, #112]	@ (80072e8 <xPortStartScheduler+0x138>)
 8007276:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007278:	4b1b      	ldr	r3, [pc, #108]	@ (80072e8 <xPortStartScheduler+0x138>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007280:	4a19      	ldr	r2, [pc, #100]	@ (80072e8 <xPortStartScheduler+0x138>)
 8007282:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800728c:	4b17      	ldr	r3, [pc, #92]	@ (80072ec <xPortStartScheduler+0x13c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a16      	ldr	r2, [pc, #88]	@ (80072ec <xPortStartScheduler+0x13c>)
 8007292:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007298:	4b14      	ldr	r3, [pc, #80]	@ (80072ec <xPortStartScheduler+0x13c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a13      	ldr	r2, [pc, #76]	@ (80072ec <xPortStartScheduler+0x13c>)
 800729e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80072a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072a4:	f000 f8da 	bl	800745c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072a8:	4b11      	ldr	r3, [pc, #68]	@ (80072f0 <xPortStartScheduler+0x140>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072ae:	f000 f8f9 	bl	80074a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072b2:	4b10      	ldr	r3, [pc, #64]	@ (80072f4 <xPortStartScheduler+0x144>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a0f      	ldr	r2, [pc, #60]	@ (80072f4 <xPortStartScheduler+0x144>)
 80072b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80072bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072be:	f7ff ff63 	bl	8007188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072c2:	f7fe ff93 	bl	80061ec <vTaskSwitchContext>
	prvTaskExitError();
 80072c6:	f7ff ff1b 	bl	8007100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	e000ed00 	.word	0xe000ed00
 80072d8:	410fc271 	.word	0x410fc271
 80072dc:	410fc270 	.word	0x410fc270
 80072e0:	e000e400 	.word	0xe000e400
 80072e4:	20000dd4 	.word	0x20000dd4
 80072e8:	20000dd8 	.word	0x20000dd8
 80072ec:	e000ed20 	.word	0xe000ed20
 80072f0:	2000000c 	.word	0x2000000c
 80072f4:	e000ef34 	.word	0xe000ef34

080072f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007312:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <vPortEnterCritical+0x5c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3301      	adds	r3, #1
 8007318:	4a0e      	ldr	r2, [pc, #56]	@ (8007354 <vPortEnterCritical+0x5c>)
 800731a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800731c:	4b0d      	ldr	r3, [pc, #52]	@ (8007354 <vPortEnterCritical+0x5c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d110      	bne.n	8007346 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007324:	4b0c      	ldr	r3, [pc, #48]	@ (8007358 <vPortEnterCritical+0x60>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <vPortEnterCritical+0x4e>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	603b      	str	r3, [r7, #0]
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <vPortEnterCritical+0x4a>
	}
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	2000000c 	.word	0x2000000c
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007362:	4b12      	ldr	r3, [pc, #72]	@ (80073ac <vPortExitCritical+0x50>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10b      	bne.n	8007382 <vPortExitCritical+0x26>
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	607b      	str	r3, [r7, #4]
}
 800737c:	bf00      	nop
 800737e:	bf00      	nop
 8007380:	e7fd      	b.n	800737e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007382:	4b0a      	ldr	r3, [pc, #40]	@ (80073ac <vPortExitCritical+0x50>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3b01      	subs	r3, #1
 8007388:	4a08      	ldr	r2, [pc, #32]	@ (80073ac <vPortExitCritical+0x50>)
 800738a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800738c:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <vPortExitCritical+0x50>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <vPortExitCritical+0x44>
 8007394:	2300      	movs	r3, #0
 8007396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f383 8811 	msr	BASEPRI, r3
}
 800739e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	2000000c 	.word	0x2000000c

080073b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073b0:	f3ef 8009 	mrs	r0, PSP
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	4b15      	ldr	r3, [pc, #84]	@ (8007410 <pxCurrentTCBConst>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	f01e 0f10 	tst.w	lr, #16
 80073c0:	bf08      	it	eq
 80073c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ca:	6010      	str	r0, [r2, #0]
 80073cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073d4:	f380 8811 	msr	BASEPRI, r0
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f7fe ff04 	bl	80061ec <vTaskSwitchContext>
 80073e4:	f04f 0000 	mov.w	r0, #0
 80073e8:	f380 8811 	msr	BASEPRI, r0
 80073ec:	bc09      	pop	{r0, r3}
 80073ee:	6819      	ldr	r1, [r3, #0]
 80073f0:	6808      	ldr	r0, [r1, #0]
 80073f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f6:	f01e 0f10 	tst.w	lr, #16
 80073fa:	bf08      	it	eq
 80073fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007400:	f380 8809 	msr	PSP, r0
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	f3af 8000 	nop.w

08007410 <pxCurrentTCBConst>:
 8007410:	20000bac 	.word	0x20000bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop

08007418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	607b      	str	r3, [r7, #4]
}
 8007430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007432:	f7fe fe21 	bl	8006078 <xTaskIncrementTick>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800743c:	4b06      	ldr	r3, [pc, #24]	@ (8007458 <SysTick_Handler+0x40>)
 800743e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	2300      	movs	r3, #0
 8007446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	f383 8811 	msr	BASEPRI, r3
}
 800744e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	e000ed04 	.word	0xe000ed04

0800745c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800745c:	b480      	push	{r7}
 800745e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007460:	4b0b      	ldr	r3, [pc, #44]	@ (8007490 <vPortSetupTimerInterrupt+0x34>)
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007466:	4b0b      	ldr	r3, [pc, #44]	@ (8007494 <vPortSetupTimerInterrupt+0x38>)
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800746c:	4b0a      	ldr	r3, [pc, #40]	@ (8007498 <vPortSetupTimerInterrupt+0x3c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a0a      	ldr	r2, [pc, #40]	@ (800749c <vPortSetupTimerInterrupt+0x40>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	099b      	lsrs	r3, r3, #6
 8007478:	4a09      	ldr	r2, [pc, #36]	@ (80074a0 <vPortSetupTimerInterrupt+0x44>)
 800747a:	3b01      	subs	r3, #1
 800747c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800747e:	4b04      	ldr	r3, [pc, #16]	@ (8007490 <vPortSetupTimerInterrupt+0x34>)
 8007480:	2207      	movs	r2, #7
 8007482:	601a      	str	r2, [r3, #0]
}
 8007484:	bf00      	nop
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	e000e010 	.word	0xe000e010
 8007494:	e000e018 	.word	0xe000e018
 8007498:	20000000 	.word	0x20000000
 800749c:	10624dd3 	.word	0x10624dd3
 80074a0:	e000e014 	.word	0xe000e014

080074a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80074b4 <vPortEnableVFP+0x10>
 80074a8:	6801      	ldr	r1, [r0, #0]
 80074aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80074ae:	6001      	str	r1, [r0, #0]
 80074b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074b2:	bf00      	nop
 80074b4:	e000ed88 	.word	0xe000ed88

080074b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074be:	f3ef 8305 	mrs	r3, IPSR
 80074c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	d915      	bls.n	80074f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074ca:	4a18      	ldr	r2, [pc, #96]	@ (800752c <vPortValidateInterruptPriority+0x74>)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074d4:	4b16      	ldr	r3, [pc, #88]	@ (8007530 <vPortValidateInterruptPriority+0x78>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	7afa      	ldrb	r2, [r7, #11]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d20b      	bcs.n	80074f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	607b      	str	r3, [r7, #4]
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	e7fd      	b.n	80074f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007534 <vPortValidateInterruptPriority+0x7c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007538 <vPortValidateInterruptPriority+0x80>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	d90b      	bls.n	800751e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	603b      	str	r3, [r7, #0]
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <vPortValidateInterruptPriority+0x62>
	}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	e000e3f0 	.word	0xe000e3f0
 8007530:	20000dd4 	.word	0x20000dd4
 8007534:	e000ed0c 	.word	0xe000ed0c
 8007538:	20000dd8 	.word	0x20000dd8

0800753c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	@ 0x28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007544:	2300      	movs	r3, #0
 8007546:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007548:	f7fe fcda 	bl	8005f00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800754c:	4b5c      	ldr	r3, [pc, #368]	@ (80076c0 <pvPortMalloc+0x184>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007554:	f000 f924 	bl	80077a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007558:	4b5a      	ldr	r3, [pc, #360]	@ (80076c4 <pvPortMalloc+0x188>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4013      	ands	r3, r2
 8007560:	2b00      	cmp	r3, #0
 8007562:	f040 8095 	bne.w	8007690 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01e      	beq.n	80075aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800756c:	2208      	movs	r2, #8
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4413      	add	r3, r2
 8007572:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	2b00      	cmp	r3, #0
 800757c:	d015      	beq.n	80075aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f023 0307 	bic.w	r3, r3, #7
 8007584:	3308      	adds	r3, #8
 8007586:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f003 0307 	and.w	r3, r3, #7
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00b      	beq.n	80075aa <pvPortMalloc+0x6e>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	617b      	str	r3, [r7, #20]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d06f      	beq.n	8007690 <pvPortMalloc+0x154>
 80075b0:	4b45      	ldr	r3, [pc, #276]	@ (80076c8 <pvPortMalloc+0x18c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d86a      	bhi.n	8007690 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075ba:	4b44      	ldr	r3, [pc, #272]	@ (80076cc <pvPortMalloc+0x190>)
 80075bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075be:	4b43      	ldr	r3, [pc, #268]	@ (80076cc <pvPortMalloc+0x190>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075c4:	e004      	b.n	80075d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d903      	bls.n	80075e2 <pvPortMalloc+0xa6>
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1f1      	bne.n	80075c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075e2:	4b37      	ldr	r3, [pc, #220]	@ (80076c0 <pvPortMalloc+0x184>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d051      	beq.n	8007690 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2208      	movs	r2, #8
 80075f2:	4413      	add	r3, r2
 80075f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	1ad2      	subs	r2, r2, r3
 8007606:	2308      	movs	r3, #8
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	429a      	cmp	r2, r3
 800760c:	d920      	bls.n	8007650 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800760e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4413      	add	r3, r2
 8007614:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <pvPortMalloc+0xfc>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	613b      	str	r3, [r7, #16]
}
 8007632:	bf00      	nop
 8007634:	bf00      	nop
 8007636:	e7fd      	b.n	8007634 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800764a:	69b8      	ldr	r0, [r7, #24]
 800764c:	f000 f90a 	bl	8007864 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007650:	4b1d      	ldr	r3, [pc, #116]	@ (80076c8 <pvPortMalloc+0x18c>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	4a1b      	ldr	r2, [pc, #108]	@ (80076c8 <pvPortMalloc+0x18c>)
 800765c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800765e:	4b1a      	ldr	r3, [pc, #104]	@ (80076c8 <pvPortMalloc+0x18c>)
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b1b      	ldr	r3, [pc, #108]	@ (80076d0 <pvPortMalloc+0x194>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d203      	bcs.n	8007672 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800766a:	4b17      	ldr	r3, [pc, #92]	@ (80076c8 <pvPortMalloc+0x18c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a18      	ldr	r2, [pc, #96]	@ (80076d0 <pvPortMalloc+0x194>)
 8007670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	4b13      	ldr	r3, [pc, #76]	@ (80076c4 <pvPortMalloc+0x188>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	431a      	orrs	r2, r3
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007686:	4b13      	ldr	r3, [pc, #76]	@ (80076d4 <pvPortMalloc+0x198>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3301      	adds	r3, #1
 800768c:	4a11      	ldr	r2, [pc, #68]	@ (80076d4 <pvPortMalloc+0x198>)
 800768e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007690:	f7fe fc44 	bl	8005f1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <pvPortMalloc+0x17a>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	60fb      	str	r3, [r7, #12]
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	e7fd      	b.n	80076b2 <pvPortMalloc+0x176>
	return pvReturn;
 80076b6:	69fb      	ldr	r3, [r7, #28]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3728      	adds	r7, #40	@ 0x28
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	200049e4 	.word	0x200049e4
 80076c4:	200049f8 	.word	0x200049f8
 80076c8:	200049e8 	.word	0x200049e8
 80076cc:	200049dc 	.word	0x200049dc
 80076d0:	200049ec 	.word	0x200049ec
 80076d4:	200049f0 	.word	0x200049f0

080076d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d04f      	beq.n	800778a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076ea:	2308      	movs	r3, #8
 80076ec:	425b      	negs	r3, r3
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4413      	add	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	4b25      	ldr	r3, [pc, #148]	@ (8007794 <vPortFree+0xbc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4013      	ands	r3, r2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10b      	bne.n	800771e <vPortFree+0x46>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60fb      	str	r3, [r7, #12]
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	e7fd      	b.n	800771a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00b      	beq.n	800773e <vPortFree+0x66>
	__asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	60bb      	str	r3, [r7, #8]
}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	e7fd      	b.n	800773a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	4b14      	ldr	r3, [pc, #80]	@ (8007794 <vPortFree+0xbc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4013      	ands	r3, r2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01e      	beq.n	800778a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d11a      	bne.n	800778a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	4b0e      	ldr	r3, [pc, #56]	@ (8007794 <vPortFree+0xbc>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	43db      	mvns	r3, r3
 800775e:	401a      	ands	r2, r3
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007764:	f7fe fbcc 	bl	8005f00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	4b0a      	ldr	r3, [pc, #40]	@ (8007798 <vPortFree+0xc0>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4413      	add	r3, r2
 8007772:	4a09      	ldr	r2, [pc, #36]	@ (8007798 <vPortFree+0xc0>)
 8007774:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007776:	6938      	ldr	r0, [r7, #16]
 8007778:	f000 f874 	bl	8007864 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800777c:	4b07      	ldr	r3, [pc, #28]	@ (800779c <vPortFree+0xc4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3301      	adds	r3, #1
 8007782:	4a06      	ldr	r2, [pc, #24]	@ (800779c <vPortFree+0xc4>)
 8007784:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007786:	f7fe fbc9 	bl	8005f1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800778a:	bf00      	nop
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	200049f8 	.word	0x200049f8
 8007798:	200049e8 	.word	0x200049e8
 800779c:	200049f4 	.word	0x200049f4

080077a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80077aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077ac:	4b27      	ldr	r3, [pc, #156]	@ (800784c <prvHeapInit+0xac>)
 80077ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00c      	beq.n	80077d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3307      	adds	r3, #7
 80077be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0307 	bic.w	r3, r3, #7
 80077c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	4a1f      	ldr	r2, [pc, #124]	@ (800784c <prvHeapInit+0xac>)
 80077d0:	4413      	add	r3, r2
 80077d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007850 <prvHeapInit+0xb0>)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077de:	4b1c      	ldr	r3, [pc, #112]	@ (8007850 <prvHeapInit+0xb0>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	4413      	add	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077ec:	2208      	movs	r2, #8
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	1a9b      	subs	r3, r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0307 	bic.w	r3, r3, #7
 80077fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4a15      	ldr	r2, [pc, #84]	@ (8007854 <prvHeapInit+0xb4>)
 8007800:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007802:	4b14      	ldr	r3, [pc, #80]	@ (8007854 <prvHeapInit+0xb4>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800780a:	4b12      	ldr	r3, [pc, #72]	@ (8007854 <prvHeapInit+0xb4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	1ad2      	subs	r2, r2, r3
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007820:	4b0c      	ldr	r3, [pc, #48]	@ (8007854 <prvHeapInit+0xb4>)
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	4a0a      	ldr	r2, [pc, #40]	@ (8007858 <prvHeapInit+0xb8>)
 800782e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	4a09      	ldr	r2, [pc, #36]	@ (800785c <prvHeapInit+0xbc>)
 8007836:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007838:	4b09      	ldr	r3, [pc, #36]	@ (8007860 <prvHeapInit+0xc0>)
 800783a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800783e:	601a      	str	r2, [r3, #0]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	20000ddc 	.word	0x20000ddc
 8007850:	200049dc 	.word	0x200049dc
 8007854:	200049e4 	.word	0x200049e4
 8007858:	200049ec 	.word	0x200049ec
 800785c:	200049e8 	.word	0x200049e8
 8007860:	200049f8 	.word	0x200049f8

08007864 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800786c:	4b28      	ldr	r3, [pc, #160]	@ (8007910 <prvInsertBlockIntoFreeList+0xac>)
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	e002      	b.n	8007878 <prvInsertBlockIntoFreeList+0x14>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	429a      	cmp	r2, r3
 8007880:	d8f7      	bhi.n	8007872 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4413      	add	r3, r2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d108      	bne.n	80078a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	441a      	add	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	441a      	add	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d118      	bne.n	80078ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4b15      	ldr	r3, [pc, #84]	@ (8007914 <prvInsertBlockIntoFreeList+0xb0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d00d      	beq.n	80078e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	441a      	add	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	e008      	b.n	80078f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007914 <prvInsertBlockIntoFreeList+0xb0>)
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	e003      	b.n	80078f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d002      	beq.n	8007902 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	200049dc 	.word	0x200049dc
 8007914:	200049e4 	.word	0x200049e4

08007918 <__cvt>:
 8007918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800791c:	ec57 6b10 	vmov	r6, r7, d0
 8007920:	2f00      	cmp	r7, #0
 8007922:	460c      	mov	r4, r1
 8007924:	4619      	mov	r1, r3
 8007926:	463b      	mov	r3, r7
 8007928:	bfbb      	ittet	lt
 800792a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800792e:	461f      	movlt	r7, r3
 8007930:	2300      	movge	r3, #0
 8007932:	232d      	movlt	r3, #45	@ 0x2d
 8007934:	700b      	strb	r3, [r1, #0]
 8007936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007938:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800793c:	4691      	mov	r9, r2
 800793e:	f023 0820 	bic.w	r8, r3, #32
 8007942:	bfbc      	itt	lt
 8007944:	4632      	movlt	r2, r6
 8007946:	4616      	movlt	r6, r2
 8007948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800794c:	d005      	beq.n	800795a <__cvt+0x42>
 800794e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007952:	d100      	bne.n	8007956 <__cvt+0x3e>
 8007954:	3401      	adds	r4, #1
 8007956:	2102      	movs	r1, #2
 8007958:	e000      	b.n	800795c <__cvt+0x44>
 800795a:	2103      	movs	r1, #3
 800795c:	ab03      	add	r3, sp, #12
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	ab02      	add	r3, sp, #8
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	ec47 6b10 	vmov	d0, r6, r7
 8007968:	4653      	mov	r3, sl
 800796a:	4622      	mov	r2, r4
 800796c:	f000 fe68 	bl	8008640 <_dtoa_r>
 8007970:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007974:	4605      	mov	r5, r0
 8007976:	d119      	bne.n	80079ac <__cvt+0x94>
 8007978:	f019 0f01 	tst.w	r9, #1
 800797c:	d00e      	beq.n	800799c <__cvt+0x84>
 800797e:	eb00 0904 	add.w	r9, r0, r4
 8007982:	2200      	movs	r2, #0
 8007984:	2300      	movs	r3, #0
 8007986:	4630      	mov	r0, r6
 8007988:	4639      	mov	r1, r7
 800798a:	f7f9 f8bd 	bl	8000b08 <__aeabi_dcmpeq>
 800798e:	b108      	cbz	r0, 8007994 <__cvt+0x7c>
 8007990:	f8cd 900c 	str.w	r9, [sp, #12]
 8007994:	2230      	movs	r2, #48	@ 0x30
 8007996:	9b03      	ldr	r3, [sp, #12]
 8007998:	454b      	cmp	r3, r9
 800799a:	d31e      	bcc.n	80079da <__cvt+0xc2>
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079a0:	1b5b      	subs	r3, r3, r5
 80079a2:	4628      	mov	r0, r5
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	b004      	add	sp, #16
 80079a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80079b0:	eb00 0904 	add.w	r9, r0, r4
 80079b4:	d1e5      	bne.n	8007982 <__cvt+0x6a>
 80079b6:	7803      	ldrb	r3, [r0, #0]
 80079b8:	2b30      	cmp	r3, #48	@ 0x30
 80079ba:	d10a      	bne.n	80079d2 <__cvt+0xba>
 80079bc:	2200      	movs	r2, #0
 80079be:	2300      	movs	r3, #0
 80079c0:	4630      	mov	r0, r6
 80079c2:	4639      	mov	r1, r7
 80079c4:	f7f9 f8a0 	bl	8000b08 <__aeabi_dcmpeq>
 80079c8:	b918      	cbnz	r0, 80079d2 <__cvt+0xba>
 80079ca:	f1c4 0401 	rsb	r4, r4, #1
 80079ce:	f8ca 4000 	str.w	r4, [sl]
 80079d2:	f8da 3000 	ldr.w	r3, [sl]
 80079d6:	4499      	add	r9, r3
 80079d8:	e7d3      	b.n	8007982 <__cvt+0x6a>
 80079da:	1c59      	adds	r1, r3, #1
 80079dc:	9103      	str	r1, [sp, #12]
 80079de:	701a      	strb	r2, [r3, #0]
 80079e0:	e7d9      	b.n	8007996 <__cvt+0x7e>

080079e2 <__exponent>:
 80079e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079e4:	2900      	cmp	r1, #0
 80079e6:	bfba      	itte	lt
 80079e8:	4249      	neglt	r1, r1
 80079ea:	232d      	movlt	r3, #45	@ 0x2d
 80079ec:	232b      	movge	r3, #43	@ 0x2b
 80079ee:	2909      	cmp	r1, #9
 80079f0:	7002      	strb	r2, [r0, #0]
 80079f2:	7043      	strb	r3, [r0, #1]
 80079f4:	dd29      	ble.n	8007a4a <__exponent+0x68>
 80079f6:	f10d 0307 	add.w	r3, sp, #7
 80079fa:	461d      	mov	r5, r3
 80079fc:	270a      	movs	r7, #10
 80079fe:	461a      	mov	r2, r3
 8007a00:	fbb1 f6f7 	udiv	r6, r1, r7
 8007a04:	fb07 1416 	mls	r4, r7, r6, r1
 8007a08:	3430      	adds	r4, #48	@ 0x30
 8007a0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007a0e:	460c      	mov	r4, r1
 8007a10:	2c63      	cmp	r4, #99	@ 0x63
 8007a12:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a16:	4631      	mov	r1, r6
 8007a18:	dcf1      	bgt.n	80079fe <__exponent+0x1c>
 8007a1a:	3130      	adds	r1, #48	@ 0x30
 8007a1c:	1e94      	subs	r4, r2, #2
 8007a1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a22:	1c41      	adds	r1, r0, #1
 8007a24:	4623      	mov	r3, r4
 8007a26:	42ab      	cmp	r3, r5
 8007a28:	d30a      	bcc.n	8007a40 <__exponent+0x5e>
 8007a2a:	f10d 0309 	add.w	r3, sp, #9
 8007a2e:	1a9b      	subs	r3, r3, r2
 8007a30:	42ac      	cmp	r4, r5
 8007a32:	bf88      	it	hi
 8007a34:	2300      	movhi	r3, #0
 8007a36:	3302      	adds	r3, #2
 8007a38:	4403      	add	r3, r0
 8007a3a:	1a18      	subs	r0, r3, r0
 8007a3c:	b003      	add	sp, #12
 8007a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a48:	e7ed      	b.n	8007a26 <__exponent+0x44>
 8007a4a:	2330      	movs	r3, #48	@ 0x30
 8007a4c:	3130      	adds	r1, #48	@ 0x30
 8007a4e:	7083      	strb	r3, [r0, #2]
 8007a50:	70c1      	strb	r1, [r0, #3]
 8007a52:	1d03      	adds	r3, r0, #4
 8007a54:	e7f1      	b.n	8007a3a <__exponent+0x58>
	...

08007a58 <_printf_float>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	b08d      	sub	sp, #52	@ 0x34
 8007a5e:	460c      	mov	r4, r1
 8007a60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a64:	4616      	mov	r6, r2
 8007a66:	461f      	mov	r7, r3
 8007a68:	4605      	mov	r5, r0
 8007a6a:	f000 fcdb 	bl	8008424 <_localeconv_r>
 8007a6e:	6803      	ldr	r3, [r0, #0]
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7f8 fc1c 	bl	80002b0 <strlen>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a80:	9005      	str	r0, [sp, #20]
 8007a82:	3307      	adds	r3, #7
 8007a84:	f023 0307 	bic.w	r3, r3, #7
 8007a88:	f103 0208 	add.w	r2, r3, #8
 8007a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a90:	f8d4 b000 	ldr.w	fp, [r4]
 8007a94:	f8c8 2000 	str.w	r2, [r8]
 8007a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007aa0:	9307      	str	r3, [sp, #28]
 8007aa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007aa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007aae:	4b9c      	ldr	r3, [pc, #624]	@ (8007d20 <_printf_float+0x2c8>)
 8007ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab4:	f7f9 f85a 	bl	8000b6c <__aeabi_dcmpun>
 8007ab8:	bb70      	cbnz	r0, 8007b18 <_printf_float+0xc0>
 8007aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007abe:	4b98      	ldr	r3, [pc, #608]	@ (8007d20 <_printf_float+0x2c8>)
 8007ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac4:	f7f9 f834 	bl	8000b30 <__aeabi_dcmple>
 8007ac8:	bb30      	cbnz	r0, 8007b18 <_printf_float+0xc0>
 8007aca:	2200      	movs	r2, #0
 8007acc:	2300      	movs	r3, #0
 8007ace:	4640      	mov	r0, r8
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	f7f9 f823 	bl	8000b1c <__aeabi_dcmplt>
 8007ad6:	b110      	cbz	r0, 8007ade <_printf_float+0x86>
 8007ad8:	232d      	movs	r3, #45	@ 0x2d
 8007ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ade:	4a91      	ldr	r2, [pc, #580]	@ (8007d24 <_printf_float+0x2cc>)
 8007ae0:	4b91      	ldr	r3, [pc, #580]	@ (8007d28 <_printf_float+0x2d0>)
 8007ae2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ae6:	bf94      	ite	ls
 8007ae8:	4690      	movls	r8, r2
 8007aea:	4698      	movhi	r8, r3
 8007aec:	2303      	movs	r3, #3
 8007aee:	6123      	str	r3, [r4, #16]
 8007af0:	f02b 0304 	bic.w	r3, fp, #4
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	f04f 0900 	mov.w	r9, #0
 8007afa:	9700      	str	r7, [sp, #0]
 8007afc:	4633      	mov	r3, r6
 8007afe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007b00:	4621      	mov	r1, r4
 8007b02:	4628      	mov	r0, r5
 8007b04:	f000 f9d2 	bl	8007eac <_printf_common>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	f040 808d 	bne.w	8007c28 <_printf_float+0x1d0>
 8007b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b12:	b00d      	add	sp, #52	@ 0x34
 8007b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b18:	4642      	mov	r2, r8
 8007b1a:	464b      	mov	r3, r9
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	4649      	mov	r1, r9
 8007b20:	f7f9 f824 	bl	8000b6c <__aeabi_dcmpun>
 8007b24:	b140      	cbz	r0, 8007b38 <_printf_float+0xe0>
 8007b26:	464b      	mov	r3, r9
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	bfbc      	itt	lt
 8007b2c:	232d      	movlt	r3, #45	@ 0x2d
 8007b2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007b32:	4a7e      	ldr	r2, [pc, #504]	@ (8007d2c <_printf_float+0x2d4>)
 8007b34:	4b7e      	ldr	r3, [pc, #504]	@ (8007d30 <_printf_float+0x2d8>)
 8007b36:	e7d4      	b.n	8007ae2 <_printf_float+0x8a>
 8007b38:	6863      	ldr	r3, [r4, #4]
 8007b3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007b3e:	9206      	str	r2, [sp, #24]
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	d13b      	bne.n	8007bbc <_printf_float+0x164>
 8007b44:	2306      	movs	r3, #6
 8007b46:	6063      	str	r3, [r4, #4]
 8007b48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	6022      	str	r2, [r4, #0]
 8007b50:	9303      	str	r3, [sp, #12]
 8007b52:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007b58:	ab09      	add	r3, sp, #36	@ 0x24
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	6861      	ldr	r1, [r4, #4]
 8007b5e:	ec49 8b10 	vmov	d0, r8, r9
 8007b62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b66:	4628      	mov	r0, r5
 8007b68:	f7ff fed6 	bl	8007918 <__cvt>
 8007b6c:	9b06      	ldr	r3, [sp, #24]
 8007b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b70:	2b47      	cmp	r3, #71	@ 0x47
 8007b72:	4680      	mov	r8, r0
 8007b74:	d129      	bne.n	8007bca <_printf_float+0x172>
 8007b76:	1cc8      	adds	r0, r1, #3
 8007b78:	db02      	blt.n	8007b80 <_printf_float+0x128>
 8007b7a:	6863      	ldr	r3, [r4, #4]
 8007b7c:	4299      	cmp	r1, r3
 8007b7e:	dd41      	ble.n	8007c04 <_printf_float+0x1ac>
 8007b80:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b84:	fa5f fa8a 	uxtb.w	sl, sl
 8007b88:	3901      	subs	r1, #1
 8007b8a:	4652      	mov	r2, sl
 8007b8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b90:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b92:	f7ff ff26 	bl	80079e2 <__exponent>
 8007b96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b98:	1813      	adds	r3, r2, r0
 8007b9a:	2a01      	cmp	r2, #1
 8007b9c:	4681      	mov	r9, r0
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	dc02      	bgt.n	8007ba8 <_printf_float+0x150>
 8007ba2:	6822      	ldr	r2, [r4, #0]
 8007ba4:	07d2      	lsls	r2, r2, #31
 8007ba6:	d501      	bpl.n	8007bac <_printf_float+0x154>
 8007ba8:	3301      	adds	r3, #1
 8007baa:	6123      	str	r3, [r4, #16]
 8007bac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0a2      	beq.n	8007afa <_printf_float+0xa2>
 8007bb4:	232d      	movs	r3, #45	@ 0x2d
 8007bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bba:	e79e      	b.n	8007afa <_printf_float+0xa2>
 8007bbc:	9a06      	ldr	r2, [sp, #24]
 8007bbe:	2a47      	cmp	r2, #71	@ 0x47
 8007bc0:	d1c2      	bne.n	8007b48 <_printf_float+0xf0>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1c0      	bne.n	8007b48 <_printf_float+0xf0>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e7bd      	b.n	8007b46 <_printf_float+0xee>
 8007bca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007bce:	d9db      	bls.n	8007b88 <_printf_float+0x130>
 8007bd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007bd4:	d118      	bne.n	8007c08 <_printf_float+0x1b0>
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	6863      	ldr	r3, [r4, #4]
 8007bda:	dd0b      	ble.n	8007bf4 <_printf_float+0x19c>
 8007bdc:	6121      	str	r1, [r4, #16]
 8007bde:	b913      	cbnz	r3, 8007be6 <_printf_float+0x18e>
 8007be0:	6822      	ldr	r2, [r4, #0]
 8007be2:	07d0      	lsls	r0, r2, #31
 8007be4:	d502      	bpl.n	8007bec <_printf_float+0x194>
 8007be6:	3301      	adds	r3, #1
 8007be8:	440b      	add	r3, r1
 8007bea:	6123      	str	r3, [r4, #16]
 8007bec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007bee:	f04f 0900 	mov.w	r9, #0
 8007bf2:	e7db      	b.n	8007bac <_printf_float+0x154>
 8007bf4:	b913      	cbnz	r3, 8007bfc <_printf_float+0x1a4>
 8007bf6:	6822      	ldr	r2, [r4, #0]
 8007bf8:	07d2      	lsls	r2, r2, #31
 8007bfa:	d501      	bpl.n	8007c00 <_printf_float+0x1a8>
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	e7f4      	b.n	8007bea <_printf_float+0x192>
 8007c00:	2301      	movs	r3, #1
 8007c02:	e7f2      	b.n	8007bea <_printf_float+0x192>
 8007c04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c0a:	4299      	cmp	r1, r3
 8007c0c:	db05      	blt.n	8007c1a <_printf_float+0x1c2>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	6121      	str	r1, [r4, #16]
 8007c12:	07d8      	lsls	r0, r3, #31
 8007c14:	d5ea      	bpl.n	8007bec <_printf_float+0x194>
 8007c16:	1c4b      	adds	r3, r1, #1
 8007c18:	e7e7      	b.n	8007bea <_printf_float+0x192>
 8007c1a:	2900      	cmp	r1, #0
 8007c1c:	bfd4      	ite	le
 8007c1e:	f1c1 0202 	rsble	r2, r1, #2
 8007c22:	2201      	movgt	r2, #1
 8007c24:	4413      	add	r3, r2
 8007c26:	e7e0      	b.n	8007bea <_printf_float+0x192>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	055a      	lsls	r2, r3, #21
 8007c2c:	d407      	bmi.n	8007c3e <_printf_float+0x1e6>
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	4642      	mov	r2, r8
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d12b      	bne.n	8007c94 <_printf_float+0x23c>
 8007c3c:	e767      	b.n	8007b0e <_printf_float+0xb6>
 8007c3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c42:	f240 80dd 	bls.w	8007e00 <_printf_float+0x3a8>
 8007c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f7f8 ff5b 	bl	8000b08 <__aeabi_dcmpeq>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d033      	beq.n	8007cbe <_printf_float+0x266>
 8007c56:	4a37      	ldr	r2, [pc, #220]	@ (8007d34 <_printf_float+0x2dc>)
 8007c58:	2301      	movs	r3, #1
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b8      	blx	r7
 8007c60:	3001      	adds	r0, #1
 8007c62:	f43f af54 	beq.w	8007b0e <_printf_float+0xb6>
 8007c66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007c6a:	4543      	cmp	r3, r8
 8007c6c:	db02      	blt.n	8007c74 <_printf_float+0x21c>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	07d8      	lsls	r0, r3, #31
 8007c72:	d50f      	bpl.n	8007c94 <_printf_float+0x23c>
 8007c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f43f af45 	beq.w	8007b0e <_printf_float+0xb6>
 8007c84:	f04f 0900 	mov.w	r9, #0
 8007c88:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c8c:	f104 0a1a 	add.w	sl, r4, #26
 8007c90:	45c8      	cmp	r8, r9
 8007c92:	dc09      	bgt.n	8007ca8 <_printf_float+0x250>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	079b      	lsls	r3, r3, #30
 8007c98:	f100 8103 	bmi.w	8007ea2 <_printf_float+0x44a>
 8007c9c:	68e0      	ldr	r0, [r4, #12]
 8007c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ca0:	4298      	cmp	r0, r3
 8007ca2:	bfb8      	it	lt
 8007ca4:	4618      	movlt	r0, r3
 8007ca6:	e734      	b.n	8007b12 <_printf_float+0xba>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	4652      	mov	r2, sl
 8007cac:	4631      	mov	r1, r6
 8007cae:	4628      	mov	r0, r5
 8007cb0:	47b8      	blx	r7
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	f43f af2b 	beq.w	8007b0e <_printf_float+0xb6>
 8007cb8:	f109 0901 	add.w	r9, r9, #1
 8007cbc:	e7e8      	b.n	8007c90 <_printf_float+0x238>
 8007cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	dc39      	bgt.n	8007d38 <_printf_float+0x2e0>
 8007cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8007d34 <_printf_float+0x2dc>)
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	f43f af1d 	beq.w	8007b0e <_printf_float+0xb6>
 8007cd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007cd8:	ea59 0303 	orrs.w	r3, r9, r3
 8007cdc:	d102      	bne.n	8007ce4 <_printf_float+0x28c>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	07d9      	lsls	r1, r3, #31
 8007ce2:	d5d7      	bpl.n	8007c94 <_printf_float+0x23c>
 8007ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4628      	mov	r0, r5
 8007cec:	47b8      	blx	r7
 8007cee:	3001      	adds	r0, #1
 8007cf0:	f43f af0d 	beq.w	8007b0e <_printf_float+0xb6>
 8007cf4:	f04f 0a00 	mov.w	sl, #0
 8007cf8:	f104 0b1a 	add.w	fp, r4, #26
 8007cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cfe:	425b      	negs	r3, r3
 8007d00:	4553      	cmp	r3, sl
 8007d02:	dc01      	bgt.n	8007d08 <_printf_float+0x2b0>
 8007d04:	464b      	mov	r3, r9
 8007d06:	e793      	b.n	8007c30 <_printf_float+0x1d8>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	465a      	mov	r2, fp
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	4628      	mov	r0, r5
 8007d10:	47b8      	blx	r7
 8007d12:	3001      	adds	r0, #1
 8007d14:	f43f aefb 	beq.w	8007b0e <_printf_float+0xb6>
 8007d18:	f10a 0a01 	add.w	sl, sl, #1
 8007d1c:	e7ee      	b.n	8007cfc <_printf_float+0x2a4>
 8007d1e:	bf00      	nop
 8007d20:	7fefffff 	.word	0x7fefffff
 8007d24:	0800a724 	.word	0x0800a724
 8007d28:	0800a728 	.word	0x0800a728
 8007d2c:	0800a72c 	.word	0x0800a72c
 8007d30:	0800a730 	.word	0x0800a730
 8007d34:	0800a734 	.word	0x0800a734
 8007d38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d3e:	4553      	cmp	r3, sl
 8007d40:	bfa8      	it	ge
 8007d42:	4653      	movge	r3, sl
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	4699      	mov	r9, r3
 8007d48:	dc36      	bgt.n	8007db8 <_printf_float+0x360>
 8007d4a:	f04f 0b00 	mov.w	fp, #0
 8007d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d52:	f104 021a 	add.w	r2, r4, #26
 8007d56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d58:	9306      	str	r3, [sp, #24]
 8007d5a:	eba3 0309 	sub.w	r3, r3, r9
 8007d5e:	455b      	cmp	r3, fp
 8007d60:	dc31      	bgt.n	8007dc6 <_printf_float+0x36e>
 8007d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d64:	459a      	cmp	sl, r3
 8007d66:	dc3a      	bgt.n	8007dde <_printf_float+0x386>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	07da      	lsls	r2, r3, #31
 8007d6c:	d437      	bmi.n	8007dde <_printf_float+0x386>
 8007d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d70:	ebaa 0903 	sub.w	r9, sl, r3
 8007d74:	9b06      	ldr	r3, [sp, #24]
 8007d76:	ebaa 0303 	sub.w	r3, sl, r3
 8007d7a:	4599      	cmp	r9, r3
 8007d7c:	bfa8      	it	ge
 8007d7e:	4699      	movge	r9, r3
 8007d80:	f1b9 0f00 	cmp.w	r9, #0
 8007d84:	dc33      	bgt.n	8007dee <_printf_float+0x396>
 8007d86:	f04f 0800 	mov.w	r8, #0
 8007d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d8e:	f104 0b1a 	add.w	fp, r4, #26
 8007d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d94:	ebaa 0303 	sub.w	r3, sl, r3
 8007d98:	eba3 0309 	sub.w	r3, r3, r9
 8007d9c:	4543      	cmp	r3, r8
 8007d9e:	f77f af79 	ble.w	8007c94 <_printf_float+0x23c>
 8007da2:	2301      	movs	r3, #1
 8007da4:	465a      	mov	r2, fp
 8007da6:	4631      	mov	r1, r6
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b8      	blx	r7
 8007dac:	3001      	adds	r0, #1
 8007dae:	f43f aeae 	beq.w	8007b0e <_printf_float+0xb6>
 8007db2:	f108 0801 	add.w	r8, r8, #1
 8007db6:	e7ec      	b.n	8007d92 <_printf_float+0x33a>
 8007db8:	4642      	mov	r2, r8
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	47b8      	blx	r7
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d1c2      	bne.n	8007d4a <_printf_float+0x2f2>
 8007dc4:	e6a3      	b.n	8007b0e <_printf_float+0xb6>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4628      	mov	r0, r5
 8007dcc:	9206      	str	r2, [sp, #24]
 8007dce:	47b8      	blx	r7
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	f43f ae9c 	beq.w	8007b0e <_printf_float+0xb6>
 8007dd6:	9a06      	ldr	r2, [sp, #24]
 8007dd8:	f10b 0b01 	add.w	fp, fp, #1
 8007ddc:	e7bb      	b.n	8007d56 <_printf_float+0x2fe>
 8007dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007de2:	4631      	mov	r1, r6
 8007de4:	4628      	mov	r0, r5
 8007de6:	47b8      	blx	r7
 8007de8:	3001      	adds	r0, #1
 8007dea:	d1c0      	bne.n	8007d6e <_printf_float+0x316>
 8007dec:	e68f      	b.n	8007b0e <_printf_float+0xb6>
 8007dee:	9a06      	ldr	r2, [sp, #24]
 8007df0:	464b      	mov	r3, r9
 8007df2:	4442      	add	r2, r8
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b8      	blx	r7
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d1c3      	bne.n	8007d86 <_printf_float+0x32e>
 8007dfe:	e686      	b.n	8007b0e <_printf_float+0xb6>
 8007e00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e04:	f1ba 0f01 	cmp.w	sl, #1
 8007e08:	dc01      	bgt.n	8007e0e <_printf_float+0x3b6>
 8007e0a:	07db      	lsls	r3, r3, #31
 8007e0c:	d536      	bpl.n	8007e7c <_printf_float+0x424>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	4642      	mov	r2, r8
 8007e12:	4631      	mov	r1, r6
 8007e14:	4628      	mov	r0, r5
 8007e16:	47b8      	blx	r7
 8007e18:	3001      	adds	r0, #1
 8007e1a:	f43f ae78 	beq.w	8007b0e <_printf_float+0xb6>
 8007e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e22:	4631      	mov	r1, r6
 8007e24:	4628      	mov	r0, r5
 8007e26:	47b8      	blx	r7
 8007e28:	3001      	adds	r0, #1
 8007e2a:	f43f ae70 	beq.w	8007b0e <_printf_float+0xb6>
 8007e2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e32:	2200      	movs	r2, #0
 8007e34:	2300      	movs	r3, #0
 8007e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e3a:	f7f8 fe65 	bl	8000b08 <__aeabi_dcmpeq>
 8007e3e:	b9c0      	cbnz	r0, 8007e72 <_printf_float+0x41a>
 8007e40:	4653      	mov	r3, sl
 8007e42:	f108 0201 	add.w	r2, r8, #1
 8007e46:	4631      	mov	r1, r6
 8007e48:	4628      	mov	r0, r5
 8007e4a:	47b8      	blx	r7
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d10c      	bne.n	8007e6a <_printf_float+0x412>
 8007e50:	e65d      	b.n	8007b0e <_printf_float+0xb6>
 8007e52:	2301      	movs	r3, #1
 8007e54:	465a      	mov	r2, fp
 8007e56:	4631      	mov	r1, r6
 8007e58:	4628      	mov	r0, r5
 8007e5a:	47b8      	blx	r7
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	f43f ae56 	beq.w	8007b0e <_printf_float+0xb6>
 8007e62:	f108 0801 	add.w	r8, r8, #1
 8007e66:	45d0      	cmp	r8, sl
 8007e68:	dbf3      	blt.n	8007e52 <_printf_float+0x3fa>
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e70:	e6df      	b.n	8007c32 <_printf_float+0x1da>
 8007e72:	f04f 0800 	mov.w	r8, #0
 8007e76:	f104 0b1a 	add.w	fp, r4, #26
 8007e7a:	e7f4      	b.n	8007e66 <_printf_float+0x40e>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	4642      	mov	r2, r8
 8007e80:	e7e1      	b.n	8007e46 <_printf_float+0x3ee>
 8007e82:	2301      	movs	r3, #1
 8007e84:	464a      	mov	r2, r9
 8007e86:	4631      	mov	r1, r6
 8007e88:	4628      	mov	r0, r5
 8007e8a:	47b8      	blx	r7
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	f43f ae3e 	beq.w	8007b0e <_printf_float+0xb6>
 8007e92:	f108 0801 	add.w	r8, r8, #1
 8007e96:	68e3      	ldr	r3, [r4, #12]
 8007e98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e9a:	1a5b      	subs	r3, r3, r1
 8007e9c:	4543      	cmp	r3, r8
 8007e9e:	dcf0      	bgt.n	8007e82 <_printf_float+0x42a>
 8007ea0:	e6fc      	b.n	8007c9c <_printf_float+0x244>
 8007ea2:	f04f 0800 	mov.w	r8, #0
 8007ea6:	f104 0919 	add.w	r9, r4, #25
 8007eaa:	e7f4      	b.n	8007e96 <_printf_float+0x43e>

08007eac <_printf_common>:
 8007eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb0:	4616      	mov	r6, r2
 8007eb2:	4698      	mov	r8, r3
 8007eb4:	688a      	ldr	r2, [r1, #8]
 8007eb6:	690b      	ldr	r3, [r1, #16]
 8007eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	bfb8      	it	lt
 8007ec0:	4613      	movlt	r3, r2
 8007ec2:	6033      	str	r3, [r6, #0]
 8007ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ec8:	4607      	mov	r7, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	b10a      	cbz	r2, 8007ed2 <_printf_common+0x26>
 8007ece:	3301      	adds	r3, #1
 8007ed0:	6033      	str	r3, [r6, #0]
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	0699      	lsls	r1, r3, #26
 8007ed6:	bf42      	ittt	mi
 8007ed8:	6833      	ldrmi	r3, [r6, #0]
 8007eda:	3302      	addmi	r3, #2
 8007edc:	6033      	strmi	r3, [r6, #0]
 8007ede:	6825      	ldr	r5, [r4, #0]
 8007ee0:	f015 0506 	ands.w	r5, r5, #6
 8007ee4:	d106      	bne.n	8007ef4 <_printf_common+0x48>
 8007ee6:	f104 0a19 	add.w	sl, r4, #25
 8007eea:	68e3      	ldr	r3, [r4, #12]
 8007eec:	6832      	ldr	r2, [r6, #0]
 8007eee:	1a9b      	subs	r3, r3, r2
 8007ef0:	42ab      	cmp	r3, r5
 8007ef2:	dc26      	bgt.n	8007f42 <_printf_common+0x96>
 8007ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ef8:	6822      	ldr	r2, [r4, #0]
 8007efa:	3b00      	subs	r3, #0
 8007efc:	bf18      	it	ne
 8007efe:	2301      	movne	r3, #1
 8007f00:	0692      	lsls	r2, r2, #26
 8007f02:	d42b      	bmi.n	8007f5c <_printf_common+0xb0>
 8007f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f08:	4641      	mov	r1, r8
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	47c8      	blx	r9
 8007f0e:	3001      	adds	r0, #1
 8007f10:	d01e      	beq.n	8007f50 <_printf_common+0xa4>
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	6922      	ldr	r2, [r4, #16]
 8007f16:	f003 0306 	and.w	r3, r3, #6
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	bf02      	ittt	eq
 8007f1e:	68e5      	ldreq	r5, [r4, #12]
 8007f20:	6833      	ldreq	r3, [r6, #0]
 8007f22:	1aed      	subeq	r5, r5, r3
 8007f24:	68a3      	ldr	r3, [r4, #8]
 8007f26:	bf0c      	ite	eq
 8007f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f2c:	2500      	movne	r5, #0
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	bfc4      	itt	gt
 8007f32:	1a9b      	subgt	r3, r3, r2
 8007f34:	18ed      	addgt	r5, r5, r3
 8007f36:	2600      	movs	r6, #0
 8007f38:	341a      	adds	r4, #26
 8007f3a:	42b5      	cmp	r5, r6
 8007f3c:	d11a      	bne.n	8007f74 <_printf_common+0xc8>
 8007f3e:	2000      	movs	r0, #0
 8007f40:	e008      	b.n	8007f54 <_printf_common+0xa8>
 8007f42:	2301      	movs	r3, #1
 8007f44:	4652      	mov	r2, sl
 8007f46:	4641      	mov	r1, r8
 8007f48:	4638      	mov	r0, r7
 8007f4a:	47c8      	blx	r9
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d103      	bne.n	8007f58 <_printf_common+0xac>
 8007f50:	f04f 30ff 	mov.w	r0, #4294967295
 8007f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f58:	3501      	adds	r5, #1
 8007f5a:	e7c6      	b.n	8007eea <_printf_common+0x3e>
 8007f5c:	18e1      	adds	r1, r4, r3
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	2030      	movs	r0, #48	@ 0x30
 8007f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f66:	4422      	add	r2, r4
 8007f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f70:	3302      	adds	r3, #2
 8007f72:	e7c7      	b.n	8007f04 <_printf_common+0x58>
 8007f74:	2301      	movs	r3, #1
 8007f76:	4622      	mov	r2, r4
 8007f78:	4641      	mov	r1, r8
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	47c8      	blx	r9
 8007f7e:	3001      	adds	r0, #1
 8007f80:	d0e6      	beq.n	8007f50 <_printf_common+0xa4>
 8007f82:	3601      	adds	r6, #1
 8007f84:	e7d9      	b.n	8007f3a <_printf_common+0x8e>
	...

08007f88 <_printf_i>:
 8007f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8c:	7e0f      	ldrb	r7, [r1, #24]
 8007f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f90:	2f78      	cmp	r7, #120	@ 0x78
 8007f92:	4691      	mov	r9, r2
 8007f94:	4680      	mov	r8, r0
 8007f96:	460c      	mov	r4, r1
 8007f98:	469a      	mov	sl, r3
 8007f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f9e:	d807      	bhi.n	8007fb0 <_printf_i+0x28>
 8007fa0:	2f62      	cmp	r7, #98	@ 0x62
 8007fa2:	d80a      	bhi.n	8007fba <_printf_i+0x32>
 8007fa4:	2f00      	cmp	r7, #0
 8007fa6:	f000 80d2 	beq.w	800814e <_printf_i+0x1c6>
 8007faa:	2f58      	cmp	r7, #88	@ 0x58
 8007fac:	f000 80b9 	beq.w	8008122 <_printf_i+0x19a>
 8007fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007fb8:	e03a      	b.n	8008030 <_printf_i+0xa8>
 8007fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007fbe:	2b15      	cmp	r3, #21
 8007fc0:	d8f6      	bhi.n	8007fb0 <_printf_i+0x28>
 8007fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8007fc8 <_printf_i+0x40>)
 8007fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fc8:	08008021 	.word	0x08008021
 8007fcc:	08008035 	.word	0x08008035
 8007fd0:	08007fb1 	.word	0x08007fb1
 8007fd4:	08007fb1 	.word	0x08007fb1
 8007fd8:	08007fb1 	.word	0x08007fb1
 8007fdc:	08007fb1 	.word	0x08007fb1
 8007fe0:	08008035 	.word	0x08008035
 8007fe4:	08007fb1 	.word	0x08007fb1
 8007fe8:	08007fb1 	.word	0x08007fb1
 8007fec:	08007fb1 	.word	0x08007fb1
 8007ff0:	08007fb1 	.word	0x08007fb1
 8007ff4:	08008135 	.word	0x08008135
 8007ff8:	0800805f 	.word	0x0800805f
 8007ffc:	080080ef 	.word	0x080080ef
 8008000:	08007fb1 	.word	0x08007fb1
 8008004:	08007fb1 	.word	0x08007fb1
 8008008:	08008157 	.word	0x08008157
 800800c:	08007fb1 	.word	0x08007fb1
 8008010:	0800805f 	.word	0x0800805f
 8008014:	08007fb1 	.word	0x08007fb1
 8008018:	08007fb1 	.word	0x08007fb1
 800801c:	080080f7 	.word	0x080080f7
 8008020:	6833      	ldr	r3, [r6, #0]
 8008022:	1d1a      	adds	r2, r3, #4
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6032      	str	r2, [r6, #0]
 8008028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800802c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008030:	2301      	movs	r3, #1
 8008032:	e09d      	b.n	8008170 <_printf_i+0x1e8>
 8008034:	6833      	ldr	r3, [r6, #0]
 8008036:	6820      	ldr	r0, [r4, #0]
 8008038:	1d19      	adds	r1, r3, #4
 800803a:	6031      	str	r1, [r6, #0]
 800803c:	0606      	lsls	r6, r0, #24
 800803e:	d501      	bpl.n	8008044 <_printf_i+0xbc>
 8008040:	681d      	ldr	r5, [r3, #0]
 8008042:	e003      	b.n	800804c <_printf_i+0xc4>
 8008044:	0645      	lsls	r5, r0, #25
 8008046:	d5fb      	bpl.n	8008040 <_printf_i+0xb8>
 8008048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800804c:	2d00      	cmp	r5, #0
 800804e:	da03      	bge.n	8008058 <_printf_i+0xd0>
 8008050:	232d      	movs	r3, #45	@ 0x2d
 8008052:	426d      	negs	r5, r5
 8008054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008058:	4859      	ldr	r0, [pc, #356]	@ (80081c0 <_printf_i+0x238>)
 800805a:	230a      	movs	r3, #10
 800805c:	e011      	b.n	8008082 <_printf_i+0xfa>
 800805e:	6821      	ldr	r1, [r4, #0]
 8008060:	6833      	ldr	r3, [r6, #0]
 8008062:	0608      	lsls	r0, r1, #24
 8008064:	f853 5b04 	ldr.w	r5, [r3], #4
 8008068:	d402      	bmi.n	8008070 <_printf_i+0xe8>
 800806a:	0649      	lsls	r1, r1, #25
 800806c:	bf48      	it	mi
 800806e:	b2ad      	uxthmi	r5, r5
 8008070:	2f6f      	cmp	r7, #111	@ 0x6f
 8008072:	4853      	ldr	r0, [pc, #332]	@ (80081c0 <_printf_i+0x238>)
 8008074:	6033      	str	r3, [r6, #0]
 8008076:	bf14      	ite	ne
 8008078:	230a      	movne	r3, #10
 800807a:	2308      	moveq	r3, #8
 800807c:	2100      	movs	r1, #0
 800807e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008082:	6866      	ldr	r6, [r4, #4]
 8008084:	60a6      	str	r6, [r4, #8]
 8008086:	2e00      	cmp	r6, #0
 8008088:	bfa2      	ittt	ge
 800808a:	6821      	ldrge	r1, [r4, #0]
 800808c:	f021 0104 	bicge.w	r1, r1, #4
 8008090:	6021      	strge	r1, [r4, #0]
 8008092:	b90d      	cbnz	r5, 8008098 <_printf_i+0x110>
 8008094:	2e00      	cmp	r6, #0
 8008096:	d04b      	beq.n	8008130 <_printf_i+0x1a8>
 8008098:	4616      	mov	r6, r2
 800809a:	fbb5 f1f3 	udiv	r1, r5, r3
 800809e:	fb03 5711 	mls	r7, r3, r1, r5
 80080a2:	5dc7      	ldrb	r7, [r0, r7]
 80080a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080a8:	462f      	mov	r7, r5
 80080aa:	42bb      	cmp	r3, r7
 80080ac:	460d      	mov	r5, r1
 80080ae:	d9f4      	bls.n	800809a <_printf_i+0x112>
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d10b      	bne.n	80080cc <_printf_i+0x144>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	07df      	lsls	r7, r3, #31
 80080b8:	d508      	bpl.n	80080cc <_printf_i+0x144>
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	6861      	ldr	r1, [r4, #4]
 80080be:	4299      	cmp	r1, r3
 80080c0:	bfde      	ittt	le
 80080c2:	2330      	movle	r3, #48	@ 0x30
 80080c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080cc:	1b92      	subs	r2, r2, r6
 80080ce:	6122      	str	r2, [r4, #16]
 80080d0:	f8cd a000 	str.w	sl, [sp]
 80080d4:	464b      	mov	r3, r9
 80080d6:	aa03      	add	r2, sp, #12
 80080d8:	4621      	mov	r1, r4
 80080da:	4640      	mov	r0, r8
 80080dc:	f7ff fee6 	bl	8007eac <_printf_common>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d14a      	bne.n	800817a <_printf_i+0x1f2>
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295
 80080e8:	b004      	add	sp, #16
 80080ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	f043 0320 	orr.w	r3, r3, #32
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	4833      	ldr	r0, [pc, #204]	@ (80081c4 <_printf_i+0x23c>)
 80080f8:	2778      	movs	r7, #120	@ 0x78
 80080fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	6831      	ldr	r1, [r6, #0]
 8008102:	061f      	lsls	r7, r3, #24
 8008104:	f851 5b04 	ldr.w	r5, [r1], #4
 8008108:	d402      	bmi.n	8008110 <_printf_i+0x188>
 800810a:	065f      	lsls	r7, r3, #25
 800810c:	bf48      	it	mi
 800810e:	b2ad      	uxthmi	r5, r5
 8008110:	6031      	str	r1, [r6, #0]
 8008112:	07d9      	lsls	r1, r3, #31
 8008114:	bf44      	itt	mi
 8008116:	f043 0320 	orrmi.w	r3, r3, #32
 800811a:	6023      	strmi	r3, [r4, #0]
 800811c:	b11d      	cbz	r5, 8008126 <_printf_i+0x19e>
 800811e:	2310      	movs	r3, #16
 8008120:	e7ac      	b.n	800807c <_printf_i+0xf4>
 8008122:	4827      	ldr	r0, [pc, #156]	@ (80081c0 <_printf_i+0x238>)
 8008124:	e7e9      	b.n	80080fa <_printf_i+0x172>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	f023 0320 	bic.w	r3, r3, #32
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	e7f6      	b.n	800811e <_printf_i+0x196>
 8008130:	4616      	mov	r6, r2
 8008132:	e7bd      	b.n	80080b0 <_printf_i+0x128>
 8008134:	6833      	ldr	r3, [r6, #0]
 8008136:	6825      	ldr	r5, [r4, #0]
 8008138:	6961      	ldr	r1, [r4, #20]
 800813a:	1d18      	adds	r0, r3, #4
 800813c:	6030      	str	r0, [r6, #0]
 800813e:	062e      	lsls	r6, r5, #24
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	d501      	bpl.n	8008148 <_printf_i+0x1c0>
 8008144:	6019      	str	r1, [r3, #0]
 8008146:	e002      	b.n	800814e <_printf_i+0x1c6>
 8008148:	0668      	lsls	r0, r5, #25
 800814a:	d5fb      	bpl.n	8008144 <_printf_i+0x1bc>
 800814c:	8019      	strh	r1, [r3, #0]
 800814e:	2300      	movs	r3, #0
 8008150:	6123      	str	r3, [r4, #16]
 8008152:	4616      	mov	r6, r2
 8008154:	e7bc      	b.n	80080d0 <_printf_i+0x148>
 8008156:	6833      	ldr	r3, [r6, #0]
 8008158:	1d1a      	adds	r2, r3, #4
 800815a:	6032      	str	r2, [r6, #0]
 800815c:	681e      	ldr	r6, [r3, #0]
 800815e:	6862      	ldr	r2, [r4, #4]
 8008160:	2100      	movs	r1, #0
 8008162:	4630      	mov	r0, r6
 8008164:	f7f8 f854 	bl	8000210 <memchr>
 8008168:	b108      	cbz	r0, 800816e <_printf_i+0x1e6>
 800816a:	1b80      	subs	r0, r0, r6
 800816c:	6060      	str	r0, [r4, #4]
 800816e:	6863      	ldr	r3, [r4, #4]
 8008170:	6123      	str	r3, [r4, #16]
 8008172:	2300      	movs	r3, #0
 8008174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008178:	e7aa      	b.n	80080d0 <_printf_i+0x148>
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	4632      	mov	r2, r6
 800817e:	4649      	mov	r1, r9
 8008180:	4640      	mov	r0, r8
 8008182:	47d0      	blx	sl
 8008184:	3001      	adds	r0, #1
 8008186:	d0ad      	beq.n	80080e4 <_printf_i+0x15c>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	079b      	lsls	r3, r3, #30
 800818c:	d413      	bmi.n	80081b6 <_printf_i+0x22e>
 800818e:	68e0      	ldr	r0, [r4, #12]
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	4298      	cmp	r0, r3
 8008194:	bfb8      	it	lt
 8008196:	4618      	movlt	r0, r3
 8008198:	e7a6      	b.n	80080e8 <_printf_i+0x160>
 800819a:	2301      	movs	r3, #1
 800819c:	4632      	mov	r2, r6
 800819e:	4649      	mov	r1, r9
 80081a0:	4640      	mov	r0, r8
 80081a2:	47d0      	blx	sl
 80081a4:	3001      	adds	r0, #1
 80081a6:	d09d      	beq.n	80080e4 <_printf_i+0x15c>
 80081a8:	3501      	adds	r5, #1
 80081aa:	68e3      	ldr	r3, [r4, #12]
 80081ac:	9903      	ldr	r1, [sp, #12]
 80081ae:	1a5b      	subs	r3, r3, r1
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	dcf2      	bgt.n	800819a <_printf_i+0x212>
 80081b4:	e7eb      	b.n	800818e <_printf_i+0x206>
 80081b6:	2500      	movs	r5, #0
 80081b8:	f104 0619 	add.w	r6, r4, #25
 80081bc:	e7f5      	b.n	80081aa <_printf_i+0x222>
 80081be:	bf00      	nop
 80081c0:	0800a736 	.word	0x0800a736
 80081c4:	0800a747 	.word	0x0800a747

080081c8 <std>:
 80081c8:	2300      	movs	r3, #0
 80081ca:	b510      	push	{r4, lr}
 80081cc:	4604      	mov	r4, r0
 80081ce:	e9c0 3300 	strd	r3, r3, [r0]
 80081d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081d6:	6083      	str	r3, [r0, #8]
 80081d8:	8181      	strh	r1, [r0, #12]
 80081da:	6643      	str	r3, [r0, #100]	@ 0x64
 80081dc:	81c2      	strh	r2, [r0, #14]
 80081de:	6183      	str	r3, [r0, #24]
 80081e0:	4619      	mov	r1, r3
 80081e2:	2208      	movs	r2, #8
 80081e4:	305c      	adds	r0, #92	@ 0x5c
 80081e6:	f000 f914 	bl	8008412 <memset>
 80081ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008220 <std+0x58>)
 80081ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80081ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008224 <std+0x5c>)
 80081f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008228 <std+0x60>)
 80081f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081f6:	4b0d      	ldr	r3, [pc, #52]	@ (800822c <std+0x64>)
 80081f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80081fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008230 <std+0x68>)
 80081fc:	6224      	str	r4, [r4, #32]
 80081fe:	429c      	cmp	r4, r3
 8008200:	d006      	beq.n	8008210 <std+0x48>
 8008202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008206:	4294      	cmp	r4, r2
 8008208:	d002      	beq.n	8008210 <std+0x48>
 800820a:	33d0      	adds	r3, #208	@ 0xd0
 800820c:	429c      	cmp	r4, r3
 800820e:	d105      	bne.n	800821c <std+0x54>
 8008210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008218:	f000 b978 	b.w	800850c <__retarget_lock_init_recursive>
 800821c:	bd10      	pop	{r4, pc}
 800821e:	bf00      	nop
 8008220:	0800838d 	.word	0x0800838d
 8008224:	080083af 	.word	0x080083af
 8008228:	080083e7 	.word	0x080083e7
 800822c:	0800840b 	.word	0x0800840b
 8008230:	200049fc 	.word	0x200049fc

08008234 <stdio_exit_handler>:
 8008234:	4a02      	ldr	r2, [pc, #8]	@ (8008240 <stdio_exit_handler+0xc>)
 8008236:	4903      	ldr	r1, [pc, #12]	@ (8008244 <stdio_exit_handler+0x10>)
 8008238:	4803      	ldr	r0, [pc, #12]	@ (8008248 <stdio_exit_handler+0x14>)
 800823a:	f000 b869 	b.w	8008310 <_fwalk_sglue>
 800823e:	bf00      	nop
 8008240:	20000010 	.word	0x20000010
 8008244:	08009e85 	.word	0x08009e85
 8008248:	20000020 	.word	0x20000020

0800824c <cleanup_stdio>:
 800824c:	6841      	ldr	r1, [r0, #4]
 800824e:	4b0c      	ldr	r3, [pc, #48]	@ (8008280 <cleanup_stdio+0x34>)
 8008250:	4299      	cmp	r1, r3
 8008252:	b510      	push	{r4, lr}
 8008254:	4604      	mov	r4, r0
 8008256:	d001      	beq.n	800825c <cleanup_stdio+0x10>
 8008258:	f001 fe14 	bl	8009e84 <_fflush_r>
 800825c:	68a1      	ldr	r1, [r4, #8]
 800825e:	4b09      	ldr	r3, [pc, #36]	@ (8008284 <cleanup_stdio+0x38>)
 8008260:	4299      	cmp	r1, r3
 8008262:	d002      	beq.n	800826a <cleanup_stdio+0x1e>
 8008264:	4620      	mov	r0, r4
 8008266:	f001 fe0d 	bl	8009e84 <_fflush_r>
 800826a:	68e1      	ldr	r1, [r4, #12]
 800826c:	4b06      	ldr	r3, [pc, #24]	@ (8008288 <cleanup_stdio+0x3c>)
 800826e:	4299      	cmp	r1, r3
 8008270:	d004      	beq.n	800827c <cleanup_stdio+0x30>
 8008272:	4620      	mov	r0, r4
 8008274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008278:	f001 be04 	b.w	8009e84 <_fflush_r>
 800827c:	bd10      	pop	{r4, pc}
 800827e:	bf00      	nop
 8008280:	200049fc 	.word	0x200049fc
 8008284:	20004a64 	.word	0x20004a64
 8008288:	20004acc 	.word	0x20004acc

0800828c <global_stdio_init.part.0>:
 800828c:	b510      	push	{r4, lr}
 800828e:	4b0b      	ldr	r3, [pc, #44]	@ (80082bc <global_stdio_init.part.0+0x30>)
 8008290:	4c0b      	ldr	r4, [pc, #44]	@ (80082c0 <global_stdio_init.part.0+0x34>)
 8008292:	4a0c      	ldr	r2, [pc, #48]	@ (80082c4 <global_stdio_init.part.0+0x38>)
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	4620      	mov	r0, r4
 8008298:	2200      	movs	r2, #0
 800829a:	2104      	movs	r1, #4
 800829c:	f7ff ff94 	bl	80081c8 <std>
 80082a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082a4:	2201      	movs	r2, #1
 80082a6:	2109      	movs	r1, #9
 80082a8:	f7ff ff8e 	bl	80081c8 <std>
 80082ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082b0:	2202      	movs	r2, #2
 80082b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b6:	2112      	movs	r1, #18
 80082b8:	f7ff bf86 	b.w	80081c8 <std>
 80082bc:	20004b34 	.word	0x20004b34
 80082c0:	200049fc 	.word	0x200049fc
 80082c4:	08008235 	.word	0x08008235

080082c8 <__sfp_lock_acquire>:
 80082c8:	4801      	ldr	r0, [pc, #4]	@ (80082d0 <__sfp_lock_acquire+0x8>)
 80082ca:	f000 b920 	b.w	800850e <__retarget_lock_acquire_recursive>
 80082ce:	bf00      	nop
 80082d0:	20004b3d 	.word	0x20004b3d

080082d4 <__sfp_lock_release>:
 80082d4:	4801      	ldr	r0, [pc, #4]	@ (80082dc <__sfp_lock_release+0x8>)
 80082d6:	f000 b91b 	b.w	8008510 <__retarget_lock_release_recursive>
 80082da:	bf00      	nop
 80082dc:	20004b3d 	.word	0x20004b3d

080082e0 <__sinit>:
 80082e0:	b510      	push	{r4, lr}
 80082e2:	4604      	mov	r4, r0
 80082e4:	f7ff fff0 	bl	80082c8 <__sfp_lock_acquire>
 80082e8:	6a23      	ldr	r3, [r4, #32]
 80082ea:	b11b      	cbz	r3, 80082f4 <__sinit+0x14>
 80082ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f0:	f7ff bff0 	b.w	80082d4 <__sfp_lock_release>
 80082f4:	4b04      	ldr	r3, [pc, #16]	@ (8008308 <__sinit+0x28>)
 80082f6:	6223      	str	r3, [r4, #32]
 80082f8:	4b04      	ldr	r3, [pc, #16]	@ (800830c <__sinit+0x2c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1f5      	bne.n	80082ec <__sinit+0xc>
 8008300:	f7ff ffc4 	bl	800828c <global_stdio_init.part.0>
 8008304:	e7f2      	b.n	80082ec <__sinit+0xc>
 8008306:	bf00      	nop
 8008308:	0800824d 	.word	0x0800824d
 800830c:	20004b34 	.word	0x20004b34

08008310 <_fwalk_sglue>:
 8008310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008314:	4607      	mov	r7, r0
 8008316:	4688      	mov	r8, r1
 8008318:	4614      	mov	r4, r2
 800831a:	2600      	movs	r6, #0
 800831c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008320:	f1b9 0901 	subs.w	r9, r9, #1
 8008324:	d505      	bpl.n	8008332 <_fwalk_sglue+0x22>
 8008326:	6824      	ldr	r4, [r4, #0]
 8008328:	2c00      	cmp	r4, #0
 800832a:	d1f7      	bne.n	800831c <_fwalk_sglue+0xc>
 800832c:	4630      	mov	r0, r6
 800832e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008332:	89ab      	ldrh	r3, [r5, #12]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d907      	bls.n	8008348 <_fwalk_sglue+0x38>
 8008338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800833c:	3301      	adds	r3, #1
 800833e:	d003      	beq.n	8008348 <_fwalk_sglue+0x38>
 8008340:	4629      	mov	r1, r5
 8008342:	4638      	mov	r0, r7
 8008344:	47c0      	blx	r8
 8008346:	4306      	orrs	r6, r0
 8008348:	3568      	adds	r5, #104	@ 0x68
 800834a:	e7e9      	b.n	8008320 <_fwalk_sglue+0x10>

0800834c <siprintf>:
 800834c:	b40e      	push	{r1, r2, r3}
 800834e:	b500      	push	{lr}
 8008350:	b09c      	sub	sp, #112	@ 0x70
 8008352:	ab1d      	add	r3, sp, #116	@ 0x74
 8008354:	9002      	str	r0, [sp, #8]
 8008356:	9006      	str	r0, [sp, #24]
 8008358:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800835c:	4809      	ldr	r0, [pc, #36]	@ (8008384 <siprintf+0x38>)
 800835e:	9107      	str	r1, [sp, #28]
 8008360:	9104      	str	r1, [sp, #16]
 8008362:	4909      	ldr	r1, [pc, #36]	@ (8008388 <siprintf+0x3c>)
 8008364:	f853 2b04 	ldr.w	r2, [r3], #4
 8008368:	9105      	str	r1, [sp, #20]
 800836a:	6800      	ldr	r0, [r0, #0]
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	a902      	add	r1, sp, #8
 8008370:	f001 fc08 	bl	8009b84 <_svfiprintf_r>
 8008374:	9b02      	ldr	r3, [sp, #8]
 8008376:	2200      	movs	r2, #0
 8008378:	701a      	strb	r2, [r3, #0]
 800837a:	b01c      	add	sp, #112	@ 0x70
 800837c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008380:	b003      	add	sp, #12
 8008382:	4770      	bx	lr
 8008384:	2000001c 	.word	0x2000001c
 8008388:	ffff0208 	.word	0xffff0208

0800838c <__sread>:
 800838c:	b510      	push	{r4, lr}
 800838e:	460c      	mov	r4, r1
 8008390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008394:	f000 f86c 	bl	8008470 <_read_r>
 8008398:	2800      	cmp	r0, #0
 800839a:	bfab      	itete	ge
 800839c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800839e:	89a3      	ldrhlt	r3, [r4, #12]
 80083a0:	181b      	addge	r3, r3, r0
 80083a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083a6:	bfac      	ite	ge
 80083a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083aa:	81a3      	strhlt	r3, [r4, #12]
 80083ac:	bd10      	pop	{r4, pc}

080083ae <__swrite>:
 80083ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b2:	461f      	mov	r7, r3
 80083b4:	898b      	ldrh	r3, [r1, #12]
 80083b6:	05db      	lsls	r3, r3, #23
 80083b8:	4605      	mov	r5, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	4616      	mov	r6, r2
 80083be:	d505      	bpl.n	80083cc <__swrite+0x1e>
 80083c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c4:	2302      	movs	r3, #2
 80083c6:	2200      	movs	r2, #0
 80083c8:	f000 f840 	bl	800844c <_lseek_r>
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083d6:	81a3      	strh	r3, [r4, #12]
 80083d8:	4632      	mov	r2, r6
 80083da:	463b      	mov	r3, r7
 80083dc:	4628      	mov	r0, r5
 80083de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083e2:	f000 b857 	b.w	8008494 <_write_r>

080083e6 <__sseek>:
 80083e6:	b510      	push	{r4, lr}
 80083e8:	460c      	mov	r4, r1
 80083ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ee:	f000 f82d 	bl	800844c <_lseek_r>
 80083f2:	1c43      	adds	r3, r0, #1
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	bf15      	itete	ne
 80083f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008402:	81a3      	strheq	r3, [r4, #12]
 8008404:	bf18      	it	ne
 8008406:	81a3      	strhne	r3, [r4, #12]
 8008408:	bd10      	pop	{r4, pc}

0800840a <__sclose>:
 800840a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800840e:	f000 b80d 	b.w	800842c <_close_r>

08008412 <memset>:
 8008412:	4402      	add	r2, r0
 8008414:	4603      	mov	r3, r0
 8008416:	4293      	cmp	r3, r2
 8008418:	d100      	bne.n	800841c <memset+0xa>
 800841a:	4770      	bx	lr
 800841c:	f803 1b01 	strb.w	r1, [r3], #1
 8008420:	e7f9      	b.n	8008416 <memset+0x4>
	...

08008424 <_localeconv_r>:
 8008424:	4800      	ldr	r0, [pc, #0]	@ (8008428 <_localeconv_r+0x4>)
 8008426:	4770      	bx	lr
 8008428:	2000015c 	.word	0x2000015c

0800842c <_close_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d06      	ldr	r5, [pc, #24]	@ (8008448 <_close_r+0x1c>)
 8008430:	2300      	movs	r3, #0
 8008432:	4604      	mov	r4, r0
 8008434:	4608      	mov	r0, r1
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	f7f9 fe12 	bl	8002060 <_close>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_close_r+0x1a>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_close_r+0x1a>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	20004b38 	.word	0x20004b38

0800844c <_lseek_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d07      	ldr	r5, [pc, #28]	@ (800846c <_lseek_r+0x20>)
 8008450:	4604      	mov	r4, r0
 8008452:	4608      	mov	r0, r1
 8008454:	4611      	mov	r1, r2
 8008456:	2200      	movs	r2, #0
 8008458:	602a      	str	r2, [r5, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	f7f9 fe27 	bl	80020ae <_lseek>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_lseek_r+0x1e>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	b103      	cbz	r3, 800846a <_lseek_r+0x1e>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	20004b38 	.word	0x20004b38

08008470 <_read_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4d07      	ldr	r5, [pc, #28]	@ (8008490 <_read_r+0x20>)
 8008474:	4604      	mov	r4, r0
 8008476:	4608      	mov	r0, r1
 8008478:	4611      	mov	r1, r2
 800847a:	2200      	movs	r2, #0
 800847c:	602a      	str	r2, [r5, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	f7f9 fdb5 	bl	8001fee <_read>
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	d102      	bne.n	800848e <_read_r+0x1e>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	b103      	cbz	r3, 800848e <_read_r+0x1e>
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	bd38      	pop	{r3, r4, r5, pc}
 8008490:	20004b38 	.word	0x20004b38

08008494 <_write_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d07      	ldr	r5, [pc, #28]	@ (80084b4 <_write_r+0x20>)
 8008498:	4604      	mov	r4, r0
 800849a:	4608      	mov	r0, r1
 800849c:	4611      	mov	r1, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	602a      	str	r2, [r5, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	f7f9 fdc0 	bl	8002028 <_write>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d102      	bne.n	80084b2 <_write_r+0x1e>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	b103      	cbz	r3, 80084b2 <_write_r+0x1e>
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	bd38      	pop	{r3, r4, r5, pc}
 80084b4:	20004b38 	.word	0x20004b38

080084b8 <__errno>:
 80084b8:	4b01      	ldr	r3, [pc, #4]	@ (80084c0 <__errno+0x8>)
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	2000001c 	.word	0x2000001c

080084c4 <__libc_init_array>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4d0d      	ldr	r5, [pc, #52]	@ (80084fc <__libc_init_array+0x38>)
 80084c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008500 <__libc_init_array+0x3c>)
 80084ca:	1b64      	subs	r4, r4, r5
 80084cc:	10a4      	asrs	r4, r4, #2
 80084ce:	2600      	movs	r6, #0
 80084d0:	42a6      	cmp	r6, r4
 80084d2:	d109      	bne.n	80084e8 <__libc_init_array+0x24>
 80084d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008504 <__libc_init_array+0x40>)
 80084d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008508 <__libc_init_array+0x44>)
 80084d8:	f002 f864 	bl	800a5a4 <_init>
 80084dc:	1b64      	subs	r4, r4, r5
 80084de:	10a4      	asrs	r4, r4, #2
 80084e0:	2600      	movs	r6, #0
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d105      	bne.n	80084f2 <__libc_init_array+0x2e>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ec:	4798      	blx	r3
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7ee      	b.n	80084d0 <__libc_init_array+0xc>
 80084f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f6:	4798      	blx	r3
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7f2      	b.n	80084e2 <__libc_init_array+0x1e>
 80084fc:	0800aaa0 	.word	0x0800aaa0
 8008500:	0800aaa0 	.word	0x0800aaa0
 8008504:	0800aaa0 	.word	0x0800aaa0
 8008508:	0800aaa4 	.word	0x0800aaa4

0800850c <__retarget_lock_init_recursive>:
 800850c:	4770      	bx	lr

0800850e <__retarget_lock_acquire_recursive>:
 800850e:	4770      	bx	lr

08008510 <__retarget_lock_release_recursive>:
 8008510:	4770      	bx	lr

08008512 <memcpy>:
 8008512:	440a      	add	r2, r1
 8008514:	4291      	cmp	r1, r2
 8008516:	f100 33ff 	add.w	r3, r0, #4294967295
 800851a:	d100      	bne.n	800851e <memcpy+0xc>
 800851c:	4770      	bx	lr
 800851e:	b510      	push	{r4, lr}
 8008520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008528:	4291      	cmp	r1, r2
 800852a:	d1f9      	bne.n	8008520 <memcpy+0xe>
 800852c:	bd10      	pop	{r4, pc}

0800852e <quorem>:
 800852e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008532:	6903      	ldr	r3, [r0, #16]
 8008534:	690c      	ldr	r4, [r1, #16]
 8008536:	42a3      	cmp	r3, r4
 8008538:	4607      	mov	r7, r0
 800853a:	db7e      	blt.n	800863a <quorem+0x10c>
 800853c:	3c01      	subs	r4, #1
 800853e:	f101 0814 	add.w	r8, r1, #20
 8008542:	00a3      	lsls	r3, r4, #2
 8008544:	f100 0514 	add.w	r5, r0, #20
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008554:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008558:	3301      	adds	r3, #1
 800855a:	429a      	cmp	r2, r3
 800855c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008560:	fbb2 f6f3 	udiv	r6, r2, r3
 8008564:	d32e      	bcc.n	80085c4 <quorem+0x96>
 8008566:	f04f 0a00 	mov.w	sl, #0
 800856a:	46c4      	mov	ip, r8
 800856c:	46ae      	mov	lr, r5
 800856e:	46d3      	mov	fp, sl
 8008570:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008574:	b298      	uxth	r0, r3
 8008576:	fb06 a000 	mla	r0, r6, r0, sl
 800857a:	0c02      	lsrs	r2, r0, #16
 800857c:	0c1b      	lsrs	r3, r3, #16
 800857e:	fb06 2303 	mla	r3, r6, r3, r2
 8008582:	f8de 2000 	ldr.w	r2, [lr]
 8008586:	b280      	uxth	r0, r0
 8008588:	b292      	uxth	r2, r2
 800858a:	1a12      	subs	r2, r2, r0
 800858c:	445a      	add	r2, fp
 800858e:	f8de 0000 	ldr.w	r0, [lr]
 8008592:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008596:	b29b      	uxth	r3, r3
 8008598:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800859c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80085a0:	b292      	uxth	r2, r2
 80085a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80085a6:	45e1      	cmp	r9, ip
 80085a8:	f84e 2b04 	str.w	r2, [lr], #4
 80085ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80085b0:	d2de      	bcs.n	8008570 <quorem+0x42>
 80085b2:	9b00      	ldr	r3, [sp, #0]
 80085b4:	58eb      	ldr	r3, [r5, r3]
 80085b6:	b92b      	cbnz	r3, 80085c4 <quorem+0x96>
 80085b8:	9b01      	ldr	r3, [sp, #4]
 80085ba:	3b04      	subs	r3, #4
 80085bc:	429d      	cmp	r5, r3
 80085be:	461a      	mov	r2, r3
 80085c0:	d32f      	bcc.n	8008622 <quorem+0xf4>
 80085c2:	613c      	str	r4, [r7, #16]
 80085c4:	4638      	mov	r0, r7
 80085c6:	f001 f979 	bl	80098bc <__mcmp>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	db25      	blt.n	800861a <quorem+0xec>
 80085ce:	4629      	mov	r1, r5
 80085d0:	2000      	movs	r0, #0
 80085d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80085d6:	f8d1 c000 	ldr.w	ip, [r1]
 80085da:	fa1f fe82 	uxth.w	lr, r2
 80085de:	fa1f f38c 	uxth.w	r3, ip
 80085e2:	eba3 030e 	sub.w	r3, r3, lr
 80085e6:	4403      	add	r3, r0
 80085e8:	0c12      	lsrs	r2, r2, #16
 80085ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80085ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085f8:	45c1      	cmp	r9, r8
 80085fa:	f841 3b04 	str.w	r3, [r1], #4
 80085fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008602:	d2e6      	bcs.n	80085d2 <quorem+0xa4>
 8008604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008608:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800860c:	b922      	cbnz	r2, 8008618 <quorem+0xea>
 800860e:	3b04      	subs	r3, #4
 8008610:	429d      	cmp	r5, r3
 8008612:	461a      	mov	r2, r3
 8008614:	d30b      	bcc.n	800862e <quorem+0x100>
 8008616:	613c      	str	r4, [r7, #16]
 8008618:	3601      	adds	r6, #1
 800861a:	4630      	mov	r0, r6
 800861c:	b003      	add	sp, #12
 800861e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008622:	6812      	ldr	r2, [r2, #0]
 8008624:	3b04      	subs	r3, #4
 8008626:	2a00      	cmp	r2, #0
 8008628:	d1cb      	bne.n	80085c2 <quorem+0x94>
 800862a:	3c01      	subs	r4, #1
 800862c:	e7c6      	b.n	80085bc <quorem+0x8e>
 800862e:	6812      	ldr	r2, [r2, #0]
 8008630:	3b04      	subs	r3, #4
 8008632:	2a00      	cmp	r2, #0
 8008634:	d1ef      	bne.n	8008616 <quorem+0xe8>
 8008636:	3c01      	subs	r4, #1
 8008638:	e7ea      	b.n	8008610 <quorem+0xe2>
 800863a:	2000      	movs	r0, #0
 800863c:	e7ee      	b.n	800861c <quorem+0xee>
	...

08008640 <_dtoa_r>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	69c7      	ldr	r7, [r0, #28]
 8008646:	b099      	sub	sp, #100	@ 0x64
 8008648:	ed8d 0b02 	vstr	d0, [sp, #8]
 800864c:	ec55 4b10 	vmov	r4, r5, d0
 8008650:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008652:	9109      	str	r1, [sp, #36]	@ 0x24
 8008654:	4683      	mov	fp, r0
 8008656:	920e      	str	r2, [sp, #56]	@ 0x38
 8008658:	9313      	str	r3, [sp, #76]	@ 0x4c
 800865a:	b97f      	cbnz	r7, 800867c <_dtoa_r+0x3c>
 800865c:	2010      	movs	r0, #16
 800865e:	f000 fdfd 	bl	800925c <malloc>
 8008662:	4602      	mov	r2, r0
 8008664:	f8cb 001c 	str.w	r0, [fp, #28]
 8008668:	b920      	cbnz	r0, 8008674 <_dtoa_r+0x34>
 800866a:	4ba7      	ldr	r3, [pc, #668]	@ (8008908 <_dtoa_r+0x2c8>)
 800866c:	21ef      	movs	r1, #239	@ 0xef
 800866e:	48a7      	ldr	r0, [pc, #668]	@ (800890c <_dtoa_r+0x2cc>)
 8008670:	f001 fc5a 	bl	8009f28 <__assert_func>
 8008674:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008678:	6007      	str	r7, [r0, #0]
 800867a:	60c7      	str	r7, [r0, #12]
 800867c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008680:	6819      	ldr	r1, [r3, #0]
 8008682:	b159      	cbz	r1, 800869c <_dtoa_r+0x5c>
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	604a      	str	r2, [r1, #4]
 8008688:	2301      	movs	r3, #1
 800868a:	4093      	lsls	r3, r2
 800868c:	608b      	str	r3, [r1, #8]
 800868e:	4658      	mov	r0, fp
 8008690:	f000 feda 	bl	8009448 <_Bfree>
 8008694:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	1e2b      	subs	r3, r5, #0
 800869e:	bfb9      	ittee	lt
 80086a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80086a4:	9303      	strlt	r3, [sp, #12]
 80086a6:	2300      	movge	r3, #0
 80086a8:	6033      	strge	r3, [r6, #0]
 80086aa:	9f03      	ldr	r7, [sp, #12]
 80086ac:	4b98      	ldr	r3, [pc, #608]	@ (8008910 <_dtoa_r+0x2d0>)
 80086ae:	bfbc      	itt	lt
 80086b0:	2201      	movlt	r2, #1
 80086b2:	6032      	strlt	r2, [r6, #0]
 80086b4:	43bb      	bics	r3, r7
 80086b6:	d112      	bne.n	80086de <_dtoa_r+0x9e>
 80086b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80086ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80086be:	6013      	str	r3, [r2, #0]
 80086c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086c4:	4323      	orrs	r3, r4
 80086c6:	f000 854d 	beq.w	8009164 <_dtoa_r+0xb24>
 80086ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008924 <_dtoa_r+0x2e4>
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 854f 	beq.w	8009174 <_dtoa_r+0xb34>
 80086d6:	f10a 0303 	add.w	r3, sl, #3
 80086da:	f000 bd49 	b.w	8009170 <_dtoa_r+0xb30>
 80086de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086e2:	2200      	movs	r2, #0
 80086e4:	ec51 0b17 	vmov	r0, r1, d7
 80086e8:	2300      	movs	r3, #0
 80086ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80086ee:	f7f8 fa0b 	bl	8000b08 <__aeabi_dcmpeq>
 80086f2:	4680      	mov	r8, r0
 80086f4:	b158      	cbz	r0, 800870e <_dtoa_r+0xce>
 80086f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80086f8:	2301      	movs	r3, #1
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086fe:	b113      	cbz	r3, 8008706 <_dtoa_r+0xc6>
 8008700:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008702:	4b84      	ldr	r3, [pc, #528]	@ (8008914 <_dtoa_r+0x2d4>)
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008928 <_dtoa_r+0x2e8>
 800870a:	f000 bd33 	b.w	8009174 <_dtoa_r+0xb34>
 800870e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008712:	aa16      	add	r2, sp, #88	@ 0x58
 8008714:	a917      	add	r1, sp, #92	@ 0x5c
 8008716:	4658      	mov	r0, fp
 8008718:	f001 f980 	bl	8009a1c <__d2b>
 800871c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008720:	4681      	mov	r9, r0
 8008722:	2e00      	cmp	r6, #0
 8008724:	d077      	beq.n	8008816 <_dtoa_r+0x1d6>
 8008726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008728:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800872c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008734:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008738:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800873c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008740:	4619      	mov	r1, r3
 8008742:	2200      	movs	r2, #0
 8008744:	4b74      	ldr	r3, [pc, #464]	@ (8008918 <_dtoa_r+0x2d8>)
 8008746:	f7f7 fdbf 	bl	80002c8 <__aeabi_dsub>
 800874a:	a369      	add	r3, pc, #420	@ (adr r3, 80088f0 <_dtoa_r+0x2b0>)
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	f7f7 ff72 	bl	8000638 <__aeabi_dmul>
 8008754:	a368      	add	r3, pc, #416	@ (adr r3, 80088f8 <_dtoa_r+0x2b8>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	f7f7 fdb7 	bl	80002cc <__adddf3>
 800875e:	4604      	mov	r4, r0
 8008760:	4630      	mov	r0, r6
 8008762:	460d      	mov	r5, r1
 8008764:	f7f7 fefe 	bl	8000564 <__aeabi_i2d>
 8008768:	a365      	add	r3, pc, #404	@ (adr r3, 8008900 <_dtoa_r+0x2c0>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 ff63 	bl	8000638 <__aeabi_dmul>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4620      	mov	r0, r4
 8008778:	4629      	mov	r1, r5
 800877a:	f7f7 fda7 	bl	80002cc <__adddf3>
 800877e:	4604      	mov	r4, r0
 8008780:	460d      	mov	r5, r1
 8008782:	f7f8 fa09 	bl	8000b98 <__aeabi_d2iz>
 8008786:	2200      	movs	r2, #0
 8008788:	4607      	mov	r7, r0
 800878a:	2300      	movs	r3, #0
 800878c:	4620      	mov	r0, r4
 800878e:	4629      	mov	r1, r5
 8008790:	f7f8 f9c4 	bl	8000b1c <__aeabi_dcmplt>
 8008794:	b140      	cbz	r0, 80087a8 <_dtoa_r+0x168>
 8008796:	4638      	mov	r0, r7
 8008798:	f7f7 fee4 	bl	8000564 <__aeabi_i2d>
 800879c:	4622      	mov	r2, r4
 800879e:	462b      	mov	r3, r5
 80087a0:	f7f8 f9b2 	bl	8000b08 <__aeabi_dcmpeq>
 80087a4:	b900      	cbnz	r0, 80087a8 <_dtoa_r+0x168>
 80087a6:	3f01      	subs	r7, #1
 80087a8:	2f16      	cmp	r7, #22
 80087aa:	d851      	bhi.n	8008850 <_dtoa_r+0x210>
 80087ac:	4b5b      	ldr	r3, [pc, #364]	@ (800891c <_dtoa_r+0x2dc>)
 80087ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087ba:	f7f8 f9af 	bl	8000b1c <__aeabi_dcmplt>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d048      	beq.n	8008854 <_dtoa_r+0x214>
 80087c2:	3f01      	subs	r7, #1
 80087c4:	2300      	movs	r3, #0
 80087c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80087c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80087ca:	1b9b      	subs	r3, r3, r6
 80087cc:	1e5a      	subs	r2, r3, #1
 80087ce:	bf44      	itt	mi
 80087d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80087d4:	2300      	movmi	r3, #0
 80087d6:	9208      	str	r2, [sp, #32]
 80087d8:	bf54      	ite	pl
 80087da:	f04f 0800 	movpl.w	r8, #0
 80087de:	9308      	strmi	r3, [sp, #32]
 80087e0:	2f00      	cmp	r7, #0
 80087e2:	db39      	blt.n	8008858 <_dtoa_r+0x218>
 80087e4:	9b08      	ldr	r3, [sp, #32]
 80087e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80087e8:	443b      	add	r3, r7
 80087ea:	9308      	str	r3, [sp, #32]
 80087ec:	2300      	movs	r3, #0
 80087ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f2:	2b09      	cmp	r3, #9
 80087f4:	d864      	bhi.n	80088c0 <_dtoa_r+0x280>
 80087f6:	2b05      	cmp	r3, #5
 80087f8:	bfc4      	itt	gt
 80087fa:	3b04      	subgt	r3, #4
 80087fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80087fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008800:	f1a3 0302 	sub.w	r3, r3, #2
 8008804:	bfcc      	ite	gt
 8008806:	2400      	movgt	r4, #0
 8008808:	2401      	movle	r4, #1
 800880a:	2b03      	cmp	r3, #3
 800880c:	d863      	bhi.n	80088d6 <_dtoa_r+0x296>
 800880e:	e8df f003 	tbb	[pc, r3]
 8008812:	372a      	.short	0x372a
 8008814:	5535      	.short	0x5535
 8008816:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800881a:	441e      	add	r6, r3
 800881c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008820:	2b20      	cmp	r3, #32
 8008822:	bfc1      	itttt	gt
 8008824:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008828:	409f      	lslgt	r7, r3
 800882a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800882e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008832:	bfd6      	itet	le
 8008834:	f1c3 0320 	rsble	r3, r3, #32
 8008838:	ea47 0003 	orrgt.w	r0, r7, r3
 800883c:	fa04 f003 	lslle.w	r0, r4, r3
 8008840:	f7f7 fe80 	bl	8000544 <__aeabi_ui2d>
 8008844:	2201      	movs	r2, #1
 8008846:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800884a:	3e01      	subs	r6, #1
 800884c:	9214      	str	r2, [sp, #80]	@ 0x50
 800884e:	e777      	b.n	8008740 <_dtoa_r+0x100>
 8008850:	2301      	movs	r3, #1
 8008852:	e7b8      	b.n	80087c6 <_dtoa_r+0x186>
 8008854:	9012      	str	r0, [sp, #72]	@ 0x48
 8008856:	e7b7      	b.n	80087c8 <_dtoa_r+0x188>
 8008858:	427b      	negs	r3, r7
 800885a:	930a      	str	r3, [sp, #40]	@ 0x28
 800885c:	2300      	movs	r3, #0
 800885e:	eba8 0807 	sub.w	r8, r8, r7
 8008862:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008864:	e7c4      	b.n	80087f0 <_dtoa_r+0x1b0>
 8008866:	2300      	movs	r3, #0
 8008868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800886a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800886c:	2b00      	cmp	r3, #0
 800886e:	dc35      	bgt.n	80088dc <_dtoa_r+0x29c>
 8008870:	2301      	movs	r3, #1
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	9307      	str	r3, [sp, #28]
 8008876:	461a      	mov	r2, r3
 8008878:	920e      	str	r2, [sp, #56]	@ 0x38
 800887a:	e00b      	b.n	8008894 <_dtoa_r+0x254>
 800887c:	2301      	movs	r3, #1
 800887e:	e7f3      	b.n	8008868 <_dtoa_r+0x228>
 8008880:	2300      	movs	r3, #0
 8008882:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008886:	18fb      	adds	r3, r7, r3
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	3301      	adds	r3, #1
 800888c:	2b01      	cmp	r3, #1
 800888e:	9307      	str	r3, [sp, #28]
 8008890:	bfb8      	it	lt
 8008892:	2301      	movlt	r3, #1
 8008894:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008898:	2100      	movs	r1, #0
 800889a:	2204      	movs	r2, #4
 800889c:	f102 0514 	add.w	r5, r2, #20
 80088a0:	429d      	cmp	r5, r3
 80088a2:	d91f      	bls.n	80088e4 <_dtoa_r+0x2a4>
 80088a4:	6041      	str	r1, [r0, #4]
 80088a6:	4658      	mov	r0, fp
 80088a8:	f000 fd8e 	bl	80093c8 <_Balloc>
 80088ac:	4682      	mov	sl, r0
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d13c      	bne.n	800892c <_dtoa_r+0x2ec>
 80088b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008920 <_dtoa_r+0x2e0>)
 80088b4:	4602      	mov	r2, r0
 80088b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80088ba:	e6d8      	b.n	800866e <_dtoa_r+0x2e>
 80088bc:	2301      	movs	r3, #1
 80088be:	e7e0      	b.n	8008882 <_dtoa_r+0x242>
 80088c0:	2401      	movs	r4, #1
 80088c2:	2300      	movs	r3, #0
 80088c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80088c8:	f04f 33ff 	mov.w	r3, #4294967295
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	9307      	str	r3, [sp, #28]
 80088d0:	2200      	movs	r2, #0
 80088d2:	2312      	movs	r3, #18
 80088d4:	e7d0      	b.n	8008878 <_dtoa_r+0x238>
 80088d6:	2301      	movs	r3, #1
 80088d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088da:	e7f5      	b.n	80088c8 <_dtoa_r+0x288>
 80088dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	9307      	str	r3, [sp, #28]
 80088e2:	e7d7      	b.n	8008894 <_dtoa_r+0x254>
 80088e4:	3101      	adds	r1, #1
 80088e6:	0052      	lsls	r2, r2, #1
 80088e8:	e7d8      	b.n	800889c <_dtoa_r+0x25c>
 80088ea:	bf00      	nop
 80088ec:	f3af 8000 	nop.w
 80088f0:	636f4361 	.word	0x636f4361
 80088f4:	3fd287a7 	.word	0x3fd287a7
 80088f8:	8b60c8b3 	.word	0x8b60c8b3
 80088fc:	3fc68a28 	.word	0x3fc68a28
 8008900:	509f79fb 	.word	0x509f79fb
 8008904:	3fd34413 	.word	0x3fd34413
 8008908:	0800a765 	.word	0x0800a765
 800890c:	0800a77c 	.word	0x0800a77c
 8008910:	7ff00000 	.word	0x7ff00000
 8008914:	0800a735 	.word	0x0800a735
 8008918:	3ff80000 	.word	0x3ff80000
 800891c:	0800a878 	.word	0x0800a878
 8008920:	0800a7d4 	.word	0x0800a7d4
 8008924:	0800a761 	.word	0x0800a761
 8008928:	0800a734 	.word	0x0800a734
 800892c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008930:	6018      	str	r0, [r3, #0]
 8008932:	9b07      	ldr	r3, [sp, #28]
 8008934:	2b0e      	cmp	r3, #14
 8008936:	f200 80a4 	bhi.w	8008a82 <_dtoa_r+0x442>
 800893a:	2c00      	cmp	r4, #0
 800893c:	f000 80a1 	beq.w	8008a82 <_dtoa_r+0x442>
 8008940:	2f00      	cmp	r7, #0
 8008942:	dd33      	ble.n	80089ac <_dtoa_r+0x36c>
 8008944:	4bad      	ldr	r3, [pc, #692]	@ (8008bfc <_dtoa_r+0x5bc>)
 8008946:	f007 020f 	and.w	r2, r7, #15
 800894a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800894e:	ed93 7b00 	vldr	d7, [r3]
 8008952:	05f8      	lsls	r0, r7, #23
 8008954:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008958:	ea4f 1427 	mov.w	r4, r7, asr #4
 800895c:	d516      	bpl.n	800898c <_dtoa_r+0x34c>
 800895e:	4ba8      	ldr	r3, [pc, #672]	@ (8008c00 <_dtoa_r+0x5c0>)
 8008960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008964:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008968:	f7f7 ff90 	bl	800088c <__aeabi_ddiv>
 800896c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008970:	f004 040f 	and.w	r4, r4, #15
 8008974:	2603      	movs	r6, #3
 8008976:	4da2      	ldr	r5, [pc, #648]	@ (8008c00 <_dtoa_r+0x5c0>)
 8008978:	b954      	cbnz	r4, 8008990 <_dtoa_r+0x350>
 800897a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800897e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008982:	f7f7 ff83 	bl	800088c <__aeabi_ddiv>
 8008986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800898a:	e028      	b.n	80089de <_dtoa_r+0x39e>
 800898c:	2602      	movs	r6, #2
 800898e:	e7f2      	b.n	8008976 <_dtoa_r+0x336>
 8008990:	07e1      	lsls	r1, r4, #31
 8008992:	d508      	bpl.n	80089a6 <_dtoa_r+0x366>
 8008994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008998:	e9d5 2300 	ldrd	r2, r3, [r5]
 800899c:	f7f7 fe4c 	bl	8000638 <__aeabi_dmul>
 80089a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089a4:	3601      	adds	r6, #1
 80089a6:	1064      	asrs	r4, r4, #1
 80089a8:	3508      	adds	r5, #8
 80089aa:	e7e5      	b.n	8008978 <_dtoa_r+0x338>
 80089ac:	f000 80d2 	beq.w	8008b54 <_dtoa_r+0x514>
 80089b0:	427c      	negs	r4, r7
 80089b2:	4b92      	ldr	r3, [pc, #584]	@ (8008bfc <_dtoa_r+0x5bc>)
 80089b4:	4d92      	ldr	r5, [pc, #584]	@ (8008c00 <_dtoa_r+0x5c0>)
 80089b6:	f004 020f 	and.w	r2, r4, #15
 80089ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089c6:	f7f7 fe37 	bl	8000638 <__aeabi_dmul>
 80089ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ce:	1124      	asrs	r4, r4, #4
 80089d0:	2300      	movs	r3, #0
 80089d2:	2602      	movs	r6, #2
 80089d4:	2c00      	cmp	r4, #0
 80089d6:	f040 80b2 	bne.w	8008b3e <_dtoa_r+0x4fe>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1d3      	bne.n	8008986 <_dtoa_r+0x346>
 80089de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 80b7 	beq.w	8008b58 <_dtoa_r+0x518>
 80089ea:	4b86      	ldr	r3, [pc, #536]	@ (8008c04 <_dtoa_r+0x5c4>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	4620      	mov	r0, r4
 80089f0:	4629      	mov	r1, r5
 80089f2:	f7f8 f893 	bl	8000b1c <__aeabi_dcmplt>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	f000 80ae 	beq.w	8008b58 <_dtoa_r+0x518>
 80089fc:	9b07      	ldr	r3, [sp, #28]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 80aa 	beq.w	8008b58 <_dtoa_r+0x518>
 8008a04:	9b00      	ldr	r3, [sp, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dd37      	ble.n	8008a7a <_dtoa_r+0x43a>
 8008a0a:	1e7b      	subs	r3, r7, #1
 8008a0c:	9304      	str	r3, [sp, #16]
 8008a0e:	4620      	mov	r0, r4
 8008a10:	4b7d      	ldr	r3, [pc, #500]	@ (8008c08 <_dtoa_r+0x5c8>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	4629      	mov	r1, r5
 8008a16:	f7f7 fe0f 	bl	8000638 <__aeabi_dmul>
 8008a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a1e:	9c00      	ldr	r4, [sp, #0]
 8008a20:	3601      	adds	r6, #1
 8008a22:	4630      	mov	r0, r6
 8008a24:	f7f7 fd9e 	bl	8000564 <__aeabi_i2d>
 8008a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a2c:	f7f7 fe04 	bl	8000638 <__aeabi_dmul>
 8008a30:	4b76      	ldr	r3, [pc, #472]	@ (8008c0c <_dtoa_r+0x5cc>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	f7f7 fc4a 	bl	80002cc <__adddf3>
 8008a38:	4605      	mov	r5, r0
 8008a3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a3e:	2c00      	cmp	r4, #0
 8008a40:	f040 808d 	bne.w	8008b5e <_dtoa_r+0x51e>
 8008a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a48:	4b71      	ldr	r3, [pc, #452]	@ (8008c10 <_dtoa_r+0x5d0>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f7f7 fc3c 	bl	80002c8 <__aeabi_dsub>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a58:	462a      	mov	r2, r5
 8008a5a:	4633      	mov	r3, r6
 8008a5c:	f7f8 f87c 	bl	8000b58 <__aeabi_dcmpgt>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	f040 828b 	bne.w	8008f7c <_dtoa_r+0x93c>
 8008a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a70:	f7f8 f854 	bl	8000b1c <__aeabi_dcmplt>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	f040 8128 	bne.w	8008cca <_dtoa_r+0x68a>
 8008a7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008a7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008a82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f2c0 815a 	blt.w	8008d3e <_dtoa_r+0x6fe>
 8008a8a:	2f0e      	cmp	r7, #14
 8008a8c:	f300 8157 	bgt.w	8008d3e <_dtoa_r+0x6fe>
 8008a90:	4b5a      	ldr	r3, [pc, #360]	@ (8008bfc <_dtoa_r+0x5bc>)
 8008a92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a96:	ed93 7b00 	vldr	d7, [r3]
 8008a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	ed8d 7b00 	vstr	d7, [sp]
 8008aa2:	da03      	bge.n	8008aac <_dtoa_r+0x46c>
 8008aa4:	9b07      	ldr	r3, [sp, #28]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f340 8101 	ble.w	8008cae <_dtoa_r+0x66e>
 8008aac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ab0:	4656      	mov	r6, sl
 8008ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7f7 fee7 	bl	800088c <__aeabi_ddiv>
 8008abe:	f7f8 f86b 	bl	8000b98 <__aeabi_d2iz>
 8008ac2:	4680      	mov	r8, r0
 8008ac4:	f7f7 fd4e 	bl	8000564 <__aeabi_i2d>
 8008ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008acc:	f7f7 fdb4 	bl	8000638 <__aeabi_dmul>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008adc:	f7f7 fbf4 	bl	80002c8 <__aeabi_dsub>
 8008ae0:	f806 4b01 	strb.w	r4, [r6], #1
 8008ae4:	9d07      	ldr	r5, [sp, #28]
 8008ae6:	eba6 040a 	sub.w	r4, r6, sl
 8008aea:	42a5      	cmp	r5, r4
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	f040 8117 	bne.w	8008d22 <_dtoa_r+0x6e2>
 8008af4:	f7f7 fbea 	bl	80002cc <__adddf3>
 8008af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008afc:	4604      	mov	r4, r0
 8008afe:	460d      	mov	r5, r1
 8008b00:	f7f8 f82a 	bl	8000b58 <__aeabi_dcmpgt>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	f040 80f9 	bne.w	8008cfc <_dtoa_r+0x6bc>
 8008b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	4629      	mov	r1, r5
 8008b12:	f7f7 fff9 	bl	8000b08 <__aeabi_dcmpeq>
 8008b16:	b118      	cbz	r0, 8008b20 <_dtoa_r+0x4e0>
 8008b18:	f018 0f01 	tst.w	r8, #1
 8008b1c:	f040 80ee 	bne.w	8008cfc <_dtoa_r+0x6bc>
 8008b20:	4649      	mov	r1, r9
 8008b22:	4658      	mov	r0, fp
 8008b24:	f000 fc90 	bl	8009448 <_Bfree>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	7033      	strb	r3, [r6, #0]
 8008b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b2e:	3701      	adds	r7, #1
 8008b30:	601f      	str	r7, [r3, #0]
 8008b32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 831d 	beq.w	8009174 <_dtoa_r+0xb34>
 8008b3a:	601e      	str	r6, [r3, #0]
 8008b3c:	e31a      	b.n	8009174 <_dtoa_r+0xb34>
 8008b3e:	07e2      	lsls	r2, r4, #31
 8008b40:	d505      	bpl.n	8008b4e <_dtoa_r+0x50e>
 8008b42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b46:	f7f7 fd77 	bl	8000638 <__aeabi_dmul>
 8008b4a:	3601      	adds	r6, #1
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	1064      	asrs	r4, r4, #1
 8008b50:	3508      	adds	r5, #8
 8008b52:	e73f      	b.n	80089d4 <_dtoa_r+0x394>
 8008b54:	2602      	movs	r6, #2
 8008b56:	e742      	b.n	80089de <_dtoa_r+0x39e>
 8008b58:	9c07      	ldr	r4, [sp, #28]
 8008b5a:	9704      	str	r7, [sp, #16]
 8008b5c:	e761      	b.n	8008a22 <_dtoa_r+0x3e2>
 8008b5e:	4b27      	ldr	r3, [pc, #156]	@ (8008bfc <_dtoa_r+0x5bc>)
 8008b60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b6a:	4454      	add	r4, sl
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	d053      	beq.n	8008c18 <_dtoa_r+0x5d8>
 8008b70:	4928      	ldr	r1, [pc, #160]	@ (8008c14 <_dtoa_r+0x5d4>)
 8008b72:	2000      	movs	r0, #0
 8008b74:	f7f7 fe8a 	bl	800088c <__aeabi_ddiv>
 8008b78:	4633      	mov	r3, r6
 8008b7a:	462a      	mov	r2, r5
 8008b7c:	f7f7 fba4 	bl	80002c8 <__aeabi_dsub>
 8008b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b84:	4656      	mov	r6, sl
 8008b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b8a:	f7f8 f805 	bl	8000b98 <__aeabi_d2iz>
 8008b8e:	4605      	mov	r5, r0
 8008b90:	f7f7 fce8 	bl	8000564 <__aeabi_i2d>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b9c:	f7f7 fb94 	bl	80002c8 <__aeabi_dsub>
 8008ba0:	3530      	adds	r5, #48	@ 0x30
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008baa:	f806 5b01 	strb.w	r5, [r6], #1
 8008bae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008bb2:	f7f7 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d171      	bne.n	8008c9e <_dtoa_r+0x65e>
 8008bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bbe:	4911      	ldr	r1, [pc, #68]	@ (8008c04 <_dtoa_r+0x5c4>)
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	f7f7 fb81 	bl	80002c8 <__aeabi_dsub>
 8008bc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008bca:	f7f7 ffa7 	bl	8000b1c <__aeabi_dcmplt>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	f040 8095 	bne.w	8008cfe <_dtoa_r+0x6be>
 8008bd4:	42a6      	cmp	r6, r4
 8008bd6:	f43f af50 	beq.w	8008a7a <_dtoa_r+0x43a>
 8008bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008bde:	4b0a      	ldr	r3, [pc, #40]	@ (8008c08 <_dtoa_r+0x5c8>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	f7f7 fd29 	bl	8000638 <__aeabi_dmul>
 8008be6:	4b08      	ldr	r3, [pc, #32]	@ (8008c08 <_dtoa_r+0x5c8>)
 8008be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bec:	2200      	movs	r2, #0
 8008bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf2:	f7f7 fd21 	bl	8000638 <__aeabi_dmul>
 8008bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bfa:	e7c4      	b.n	8008b86 <_dtoa_r+0x546>
 8008bfc:	0800a878 	.word	0x0800a878
 8008c00:	0800a850 	.word	0x0800a850
 8008c04:	3ff00000 	.word	0x3ff00000
 8008c08:	40240000 	.word	0x40240000
 8008c0c:	401c0000 	.word	0x401c0000
 8008c10:	40140000 	.word	0x40140000
 8008c14:	3fe00000 	.word	0x3fe00000
 8008c18:	4631      	mov	r1, r6
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f7f7 fd0c 	bl	8000638 <__aeabi_dmul>
 8008c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c24:	9415      	str	r4, [sp, #84]	@ 0x54
 8008c26:	4656      	mov	r6, sl
 8008c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c2c:	f7f7 ffb4 	bl	8000b98 <__aeabi_d2iz>
 8008c30:	4605      	mov	r5, r0
 8008c32:	f7f7 fc97 	bl	8000564 <__aeabi_i2d>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c3e:	f7f7 fb43 	bl	80002c8 <__aeabi_dsub>
 8008c42:	3530      	adds	r5, #48	@ 0x30
 8008c44:	f806 5b01 	strb.w	r5, [r6], #1
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	42a6      	cmp	r6, r4
 8008c4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c52:	f04f 0200 	mov.w	r2, #0
 8008c56:	d124      	bne.n	8008ca2 <_dtoa_r+0x662>
 8008c58:	4bac      	ldr	r3, [pc, #688]	@ (8008f0c <_dtoa_r+0x8cc>)
 8008c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c5e:	f7f7 fb35 	bl	80002cc <__adddf3>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c6a:	f7f7 ff75 	bl	8000b58 <__aeabi_dcmpgt>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d145      	bne.n	8008cfe <_dtoa_r+0x6be>
 8008c72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c76:	49a5      	ldr	r1, [pc, #660]	@ (8008f0c <_dtoa_r+0x8cc>)
 8008c78:	2000      	movs	r0, #0
 8008c7a:	f7f7 fb25 	bl	80002c8 <__aeabi_dsub>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c86:	f7f7 ff49 	bl	8000b1c <__aeabi_dcmplt>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f aef5 	beq.w	8008a7a <_dtoa_r+0x43a>
 8008c90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008c92:	1e73      	subs	r3, r6, #1
 8008c94:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c9a:	2b30      	cmp	r3, #48	@ 0x30
 8008c9c:	d0f8      	beq.n	8008c90 <_dtoa_r+0x650>
 8008c9e:	9f04      	ldr	r7, [sp, #16]
 8008ca0:	e73e      	b.n	8008b20 <_dtoa_r+0x4e0>
 8008ca2:	4b9b      	ldr	r3, [pc, #620]	@ (8008f10 <_dtoa_r+0x8d0>)
 8008ca4:	f7f7 fcc8 	bl	8000638 <__aeabi_dmul>
 8008ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cac:	e7bc      	b.n	8008c28 <_dtoa_r+0x5e8>
 8008cae:	d10c      	bne.n	8008cca <_dtoa_r+0x68a>
 8008cb0:	4b98      	ldr	r3, [pc, #608]	@ (8008f14 <_dtoa_r+0x8d4>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cb8:	f7f7 fcbe 	bl	8000638 <__aeabi_dmul>
 8008cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cc0:	f7f7 ff40 	bl	8000b44 <__aeabi_dcmpge>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f000 8157 	beq.w	8008f78 <_dtoa_r+0x938>
 8008cca:	2400      	movs	r4, #0
 8008ccc:	4625      	mov	r5, r4
 8008cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	9304      	str	r3, [sp, #16]
 8008cd4:	4656      	mov	r6, sl
 8008cd6:	2700      	movs	r7, #0
 8008cd8:	4621      	mov	r1, r4
 8008cda:	4658      	mov	r0, fp
 8008cdc:	f000 fbb4 	bl	8009448 <_Bfree>
 8008ce0:	2d00      	cmp	r5, #0
 8008ce2:	d0dc      	beq.n	8008c9e <_dtoa_r+0x65e>
 8008ce4:	b12f      	cbz	r7, 8008cf2 <_dtoa_r+0x6b2>
 8008ce6:	42af      	cmp	r7, r5
 8008ce8:	d003      	beq.n	8008cf2 <_dtoa_r+0x6b2>
 8008cea:	4639      	mov	r1, r7
 8008cec:	4658      	mov	r0, fp
 8008cee:	f000 fbab 	bl	8009448 <_Bfree>
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	4658      	mov	r0, fp
 8008cf6:	f000 fba7 	bl	8009448 <_Bfree>
 8008cfa:	e7d0      	b.n	8008c9e <_dtoa_r+0x65e>
 8008cfc:	9704      	str	r7, [sp, #16]
 8008cfe:	4633      	mov	r3, r6
 8008d00:	461e      	mov	r6, r3
 8008d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d06:	2a39      	cmp	r2, #57	@ 0x39
 8008d08:	d107      	bne.n	8008d1a <_dtoa_r+0x6da>
 8008d0a:	459a      	cmp	sl, r3
 8008d0c:	d1f8      	bne.n	8008d00 <_dtoa_r+0x6c0>
 8008d0e:	9a04      	ldr	r2, [sp, #16]
 8008d10:	3201      	adds	r2, #1
 8008d12:	9204      	str	r2, [sp, #16]
 8008d14:	2230      	movs	r2, #48	@ 0x30
 8008d16:	f88a 2000 	strb.w	r2, [sl]
 8008d1a:	781a      	ldrb	r2, [r3, #0]
 8008d1c:	3201      	adds	r2, #1
 8008d1e:	701a      	strb	r2, [r3, #0]
 8008d20:	e7bd      	b.n	8008c9e <_dtoa_r+0x65e>
 8008d22:	4b7b      	ldr	r3, [pc, #492]	@ (8008f10 <_dtoa_r+0x8d0>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	f7f7 fc87 	bl	8000638 <__aeabi_dmul>
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4604      	mov	r4, r0
 8008d30:	460d      	mov	r5, r1
 8008d32:	f7f7 fee9 	bl	8000b08 <__aeabi_dcmpeq>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f43f aebb 	beq.w	8008ab2 <_dtoa_r+0x472>
 8008d3c:	e6f0      	b.n	8008b20 <_dtoa_r+0x4e0>
 8008d3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d40:	2a00      	cmp	r2, #0
 8008d42:	f000 80db 	beq.w	8008efc <_dtoa_r+0x8bc>
 8008d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d48:	2a01      	cmp	r2, #1
 8008d4a:	f300 80bf 	bgt.w	8008ecc <_dtoa_r+0x88c>
 8008d4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d50:	2a00      	cmp	r2, #0
 8008d52:	f000 80b7 	beq.w	8008ec4 <_dtoa_r+0x884>
 8008d56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008d5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d5c:	4646      	mov	r6, r8
 8008d5e:	9a08      	ldr	r2, [sp, #32]
 8008d60:	2101      	movs	r1, #1
 8008d62:	441a      	add	r2, r3
 8008d64:	4658      	mov	r0, fp
 8008d66:	4498      	add	r8, r3
 8008d68:	9208      	str	r2, [sp, #32]
 8008d6a:	f000 fc21 	bl	80095b0 <__i2b>
 8008d6e:	4605      	mov	r5, r0
 8008d70:	b15e      	cbz	r6, 8008d8a <_dtoa_r+0x74a>
 8008d72:	9b08      	ldr	r3, [sp, #32]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	dd08      	ble.n	8008d8a <_dtoa_r+0x74a>
 8008d78:	42b3      	cmp	r3, r6
 8008d7a:	9a08      	ldr	r2, [sp, #32]
 8008d7c:	bfa8      	it	ge
 8008d7e:	4633      	movge	r3, r6
 8008d80:	eba8 0803 	sub.w	r8, r8, r3
 8008d84:	1af6      	subs	r6, r6, r3
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	9308      	str	r3, [sp, #32]
 8008d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d8c:	b1f3      	cbz	r3, 8008dcc <_dtoa_r+0x78c>
 8008d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 80b7 	beq.w	8008f04 <_dtoa_r+0x8c4>
 8008d96:	b18c      	cbz	r4, 8008dbc <_dtoa_r+0x77c>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	4658      	mov	r0, fp
 8008d9e:	f000 fcc7 	bl	8009730 <__pow5mult>
 8008da2:	464a      	mov	r2, r9
 8008da4:	4601      	mov	r1, r0
 8008da6:	4605      	mov	r5, r0
 8008da8:	4658      	mov	r0, fp
 8008daa:	f000 fc17 	bl	80095dc <__multiply>
 8008dae:	4649      	mov	r1, r9
 8008db0:	9004      	str	r0, [sp, #16]
 8008db2:	4658      	mov	r0, fp
 8008db4:	f000 fb48 	bl	8009448 <_Bfree>
 8008db8:	9b04      	ldr	r3, [sp, #16]
 8008dba:	4699      	mov	r9, r3
 8008dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dbe:	1b1a      	subs	r2, r3, r4
 8008dc0:	d004      	beq.n	8008dcc <_dtoa_r+0x78c>
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	4658      	mov	r0, fp
 8008dc6:	f000 fcb3 	bl	8009730 <__pow5mult>
 8008dca:	4681      	mov	r9, r0
 8008dcc:	2101      	movs	r1, #1
 8008dce:	4658      	mov	r0, fp
 8008dd0:	f000 fbee 	bl	80095b0 <__i2b>
 8008dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 81cf 	beq.w	800917c <_dtoa_r+0xb3c>
 8008dde:	461a      	mov	r2, r3
 8008de0:	4601      	mov	r1, r0
 8008de2:	4658      	mov	r0, fp
 8008de4:	f000 fca4 	bl	8009730 <__pow5mult>
 8008de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	4604      	mov	r4, r0
 8008dee:	f300 8095 	bgt.w	8008f1c <_dtoa_r+0x8dc>
 8008df2:	9b02      	ldr	r3, [sp, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f040 8087 	bne.w	8008f08 <_dtoa_r+0x8c8>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f040 8089 	bne.w	8008f18 <_dtoa_r+0x8d8>
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e0c:	0d1b      	lsrs	r3, r3, #20
 8008e0e:	051b      	lsls	r3, r3, #20
 8008e10:	b12b      	cbz	r3, 8008e1e <_dtoa_r+0x7de>
 8008e12:	9b08      	ldr	r3, [sp, #32]
 8008e14:	3301      	adds	r3, #1
 8008e16:	9308      	str	r3, [sp, #32]
 8008e18:	f108 0801 	add.w	r8, r8, #1
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 81b0 	beq.w	8009188 <_dtoa_r+0xb48>
 8008e28:	6923      	ldr	r3, [r4, #16]
 8008e2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e2e:	6918      	ldr	r0, [r3, #16]
 8008e30:	f000 fb72 	bl	8009518 <__hi0bits>
 8008e34:	f1c0 0020 	rsb	r0, r0, #32
 8008e38:	9b08      	ldr	r3, [sp, #32]
 8008e3a:	4418      	add	r0, r3
 8008e3c:	f010 001f 	ands.w	r0, r0, #31
 8008e40:	d077      	beq.n	8008f32 <_dtoa_r+0x8f2>
 8008e42:	f1c0 0320 	rsb	r3, r0, #32
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	dd6b      	ble.n	8008f22 <_dtoa_r+0x8e2>
 8008e4a:	9b08      	ldr	r3, [sp, #32]
 8008e4c:	f1c0 001c 	rsb	r0, r0, #28
 8008e50:	4403      	add	r3, r0
 8008e52:	4480      	add	r8, r0
 8008e54:	4406      	add	r6, r0
 8008e56:	9308      	str	r3, [sp, #32]
 8008e58:	f1b8 0f00 	cmp.w	r8, #0
 8008e5c:	dd05      	ble.n	8008e6a <_dtoa_r+0x82a>
 8008e5e:	4649      	mov	r1, r9
 8008e60:	4642      	mov	r2, r8
 8008e62:	4658      	mov	r0, fp
 8008e64:	f000 fcbe 	bl	80097e4 <__lshift>
 8008e68:	4681      	mov	r9, r0
 8008e6a:	9b08      	ldr	r3, [sp, #32]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	dd05      	ble.n	8008e7c <_dtoa_r+0x83c>
 8008e70:	4621      	mov	r1, r4
 8008e72:	461a      	mov	r2, r3
 8008e74:	4658      	mov	r0, fp
 8008e76:	f000 fcb5 	bl	80097e4 <__lshift>
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d059      	beq.n	8008f36 <_dtoa_r+0x8f6>
 8008e82:	4621      	mov	r1, r4
 8008e84:	4648      	mov	r0, r9
 8008e86:	f000 fd19 	bl	80098bc <__mcmp>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	da53      	bge.n	8008f36 <_dtoa_r+0x8f6>
 8008e8e:	1e7b      	subs	r3, r7, #1
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	4649      	mov	r1, r9
 8008e94:	2300      	movs	r3, #0
 8008e96:	220a      	movs	r2, #10
 8008e98:	4658      	mov	r0, fp
 8008e9a:	f000 faf7 	bl	800948c <__multadd>
 8008e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ea0:	4681      	mov	r9, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 8172 	beq.w	800918c <_dtoa_r+0xb4c>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4629      	mov	r1, r5
 8008eac:	220a      	movs	r2, #10
 8008eae:	4658      	mov	r0, fp
 8008eb0:	f000 faec 	bl	800948c <__multadd>
 8008eb4:	9b00      	ldr	r3, [sp, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	4605      	mov	r5, r0
 8008eba:	dc67      	bgt.n	8008f8c <_dtoa_r+0x94c>
 8008ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	dc41      	bgt.n	8008f46 <_dtoa_r+0x906>
 8008ec2:	e063      	b.n	8008f8c <_dtoa_r+0x94c>
 8008ec4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ec6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008eca:	e746      	b.n	8008d5a <_dtoa_r+0x71a>
 8008ecc:	9b07      	ldr	r3, [sp, #28]
 8008ece:	1e5c      	subs	r4, r3, #1
 8008ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	bfbf      	itttt	lt
 8008ed6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ed8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008eda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008edc:	1ae3      	sublt	r3, r4, r3
 8008ede:	bfb4      	ite	lt
 8008ee0:	18d2      	addlt	r2, r2, r3
 8008ee2:	1b1c      	subge	r4, r3, r4
 8008ee4:	9b07      	ldr	r3, [sp, #28]
 8008ee6:	bfbc      	itt	lt
 8008ee8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008eea:	2400      	movlt	r4, #0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bfb5      	itete	lt
 8008ef0:	eba8 0603 	sublt.w	r6, r8, r3
 8008ef4:	9b07      	ldrge	r3, [sp, #28]
 8008ef6:	2300      	movlt	r3, #0
 8008ef8:	4646      	movge	r6, r8
 8008efa:	e730      	b.n	8008d5e <_dtoa_r+0x71e>
 8008efc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008efe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008f00:	4646      	mov	r6, r8
 8008f02:	e735      	b.n	8008d70 <_dtoa_r+0x730>
 8008f04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f06:	e75c      	b.n	8008dc2 <_dtoa_r+0x782>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e788      	b.n	8008e1e <_dtoa_r+0x7de>
 8008f0c:	3fe00000 	.word	0x3fe00000
 8008f10:	40240000 	.word	0x40240000
 8008f14:	40140000 	.word	0x40140000
 8008f18:	9b02      	ldr	r3, [sp, #8]
 8008f1a:	e780      	b.n	8008e1e <_dtoa_r+0x7de>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f20:	e782      	b.n	8008e28 <_dtoa_r+0x7e8>
 8008f22:	d099      	beq.n	8008e58 <_dtoa_r+0x818>
 8008f24:	9a08      	ldr	r2, [sp, #32]
 8008f26:	331c      	adds	r3, #28
 8008f28:	441a      	add	r2, r3
 8008f2a:	4498      	add	r8, r3
 8008f2c:	441e      	add	r6, r3
 8008f2e:	9208      	str	r2, [sp, #32]
 8008f30:	e792      	b.n	8008e58 <_dtoa_r+0x818>
 8008f32:	4603      	mov	r3, r0
 8008f34:	e7f6      	b.n	8008f24 <_dtoa_r+0x8e4>
 8008f36:	9b07      	ldr	r3, [sp, #28]
 8008f38:	9704      	str	r7, [sp, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	dc20      	bgt.n	8008f80 <_dtoa_r+0x940>
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	dd1e      	ble.n	8008f84 <_dtoa_r+0x944>
 8008f46:	9b00      	ldr	r3, [sp, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f47f aec0 	bne.w	8008cce <_dtoa_r+0x68e>
 8008f4e:	4621      	mov	r1, r4
 8008f50:	2205      	movs	r2, #5
 8008f52:	4658      	mov	r0, fp
 8008f54:	f000 fa9a 	bl	800948c <__multadd>
 8008f58:	4601      	mov	r1, r0
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	4648      	mov	r0, r9
 8008f5e:	f000 fcad 	bl	80098bc <__mcmp>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	f77f aeb3 	ble.w	8008cce <_dtoa_r+0x68e>
 8008f68:	4656      	mov	r6, sl
 8008f6a:	2331      	movs	r3, #49	@ 0x31
 8008f6c:	f806 3b01 	strb.w	r3, [r6], #1
 8008f70:	9b04      	ldr	r3, [sp, #16]
 8008f72:	3301      	adds	r3, #1
 8008f74:	9304      	str	r3, [sp, #16]
 8008f76:	e6ae      	b.n	8008cd6 <_dtoa_r+0x696>
 8008f78:	9c07      	ldr	r4, [sp, #28]
 8008f7a:	9704      	str	r7, [sp, #16]
 8008f7c:	4625      	mov	r5, r4
 8008f7e:	e7f3      	b.n	8008f68 <_dtoa_r+0x928>
 8008f80:	9b07      	ldr	r3, [sp, #28]
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 8104 	beq.w	8009194 <_dtoa_r+0xb54>
 8008f8c:	2e00      	cmp	r6, #0
 8008f8e:	dd05      	ble.n	8008f9c <_dtoa_r+0x95c>
 8008f90:	4629      	mov	r1, r5
 8008f92:	4632      	mov	r2, r6
 8008f94:	4658      	mov	r0, fp
 8008f96:	f000 fc25 	bl	80097e4 <__lshift>
 8008f9a:	4605      	mov	r5, r0
 8008f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d05a      	beq.n	8009058 <_dtoa_r+0xa18>
 8008fa2:	6869      	ldr	r1, [r5, #4]
 8008fa4:	4658      	mov	r0, fp
 8008fa6:	f000 fa0f 	bl	80093c8 <_Balloc>
 8008faa:	4606      	mov	r6, r0
 8008fac:	b928      	cbnz	r0, 8008fba <_dtoa_r+0x97a>
 8008fae:	4b84      	ldr	r3, [pc, #528]	@ (80091c0 <_dtoa_r+0xb80>)
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008fb6:	f7ff bb5a 	b.w	800866e <_dtoa_r+0x2e>
 8008fba:	692a      	ldr	r2, [r5, #16]
 8008fbc:	3202      	adds	r2, #2
 8008fbe:	0092      	lsls	r2, r2, #2
 8008fc0:	f105 010c 	add.w	r1, r5, #12
 8008fc4:	300c      	adds	r0, #12
 8008fc6:	f7ff faa4 	bl	8008512 <memcpy>
 8008fca:	2201      	movs	r2, #1
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4658      	mov	r0, fp
 8008fd0:	f000 fc08 	bl	80097e4 <__lshift>
 8008fd4:	f10a 0301 	add.w	r3, sl, #1
 8008fd8:	9307      	str	r3, [sp, #28]
 8008fda:	9b00      	ldr	r3, [sp, #0]
 8008fdc:	4453      	add	r3, sl
 8008fde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fe0:	9b02      	ldr	r3, [sp, #8]
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	462f      	mov	r7, r5
 8008fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fea:	4605      	mov	r5, r0
 8008fec:	9b07      	ldr	r3, [sp, #28]
 8008fee:	4621      	mov	r1, r4
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	4648      	mov	r0, r9
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	f7ff fa9a 	bl	800852e <quorem>
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	9002      	str	r0, [sp, #8]
 8008ffe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009002:	4648      	mov	r0, r9
 8009004:	f000 fc5a 	bl	80098bc <__mcmp>
 8009008:	462a      	mov	r2, r5
 800900a:	9008      	str	r0, [sp, #32]
 800900c:	4621      	mov	r1, r4
 800900e:	4658      	mov	r0, fp
 8009010:	f000 fc70 	bl	80098f4 <__mdiff>
 8009014:	68c2      	ldr	r2, [r0, #12]
 8009016:	4606      	mov	r6, r0
 8009018:	bb02      	cbnz	r2, 800905c <_dtoa_r+0xa1c>
 800901a:	4601      	mov	r1, r0
 800901c:	4648      	mov	r0, r9
 800901e:	f000 fc4d 	bl	80098bc <__mcmp>
 8009022:	4602      	mov	r2, r0
 8009024:	4631      	mov	r1, r6
 8009026:	4658      	mov	r0, fp
 8009028:	920e      	str	r2, [sp, #56]	@ 0x38
 800902a:	f000 fa0d 	bl	8009448 <_Bfree>
 800902e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009030:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009032:	9e07      	ldr	r6, [sp, #28]
 8009034:	ea43 0102 	orr.w	r1, r3, r2
 8009038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800903a:	4319      	orrs	r1, r3
 800903c:	d110      	bne.n	8009060 <_dtoa_r+0xa20>
 800903e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009042:	d029      	beq.n	8009098 <_dtoa_r+0xa58>
 8009044:	9b08      	ldr	r3, [sp, #32]
 8009046:	2b00      	cmp	r3, #0
 8009048:	dd02      	ble.n	8009050 <_dtoa_r+0xa10>
 800904a:	9b02      	ldr	r3, [sp, #8]
 800904c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009050:	9b00      	ldr	r3, [sp, #0]
 8009052:	f883 8000 	strb.w	r8, [r3]
 8009056:	e63f      	b.n	8008cd8 <_dtoa_r+0x698>
 8009058:	4628      	mov	r0, r5
 800905a:	e7bb      	b.n	8008fd4 <_dtoa_r+0x994>
 800905c:	2201      	movs	r2, #1
 800905e:	e7e1      	b.n	8009024 <_dtoa_r+0x9e4>
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	2b00      	cmp	r3, #0
 8009064:	db04      	blt.n	8009070 <_dtoa_r+0xa30>
 8009066:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009068:	430b      	orrs	r3, r1
 800906a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800906c:	430b      	orrs	r3, r1
 800906e:	d120      	bne.n	80090b2 <_dtoa_r+0xa72>
 8009070:	2a00      	cmp	r2, #0
 8009072:	dded      	ble.n	8009050 <_dtoa_r+0xa10>
 8009074:	4649      	mov	r1, r9
 8009076:	2201      	movs	r2, #1
 8009078:	4658      	mov	r0, fp
 800907a:	f000 fbb3 	bl	80097e4 <__lshift>
 800907e:	4621      	mov	r1, r4
 8009080:	4681      	mov	r9, r0
 8009082:	f000 fc1b 	bl	80098bc <__mcmp>
 8009086:	2800      	cmp	r0, #0
 8009088:	dc03      	bgt.n	8009092 <_dtoa_r+0xa52>
 800908a:	d1e1      	bne.n	8009050 <_dtoa_r+0xa10>
 800908c:	f018 0f01 	tst.w	r8, #1
 8009090:	d0de      	beq.n	8009050 <_dtoa_r+0xa10>
 8009092:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009096:	d1d8      	bne.n	800904a <_dtoa_r+0xa0a>
 8009098:	9a00      	ldr	r2, [sp, #0]
 800909a:	2339      	movs	r3, #57	@ 0x39
 800909c:	7013      	strb	r3, [r2, #0]
 800909e:	4633      	mov	r3, r6
 80090a0:	461e      	mov	r6, r3
 80090a2:	3b01      	subs	r3, #1
 80090a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80090a8:	2a39      	cmp	r2, #57	@ 0x39
 80090aa:	d052      	beq.n	8009152 <_dtoa_r+0xb12>
 80090ac:	3201      	adds	r2, #1
 80090ae:	701a      	strb	r2, [r3, #0]
 80090b0:	e612      	b.n	8008cd8 <_dtoa_r+0x698>
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	dd07      	ble.n	80090c6 <_dtoa_r+0xa86>
 80090b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090ba:	d0ed      	beq.n	8009098 <_dtoa_r+0xa58>
 80090bc:	9a00      	ldr	r2, [sp, #0]
 80090be:	f108 0301 	add.w	r3, r8, #1
 80090c2:	7013      	strb	r3, [r2, #0]
 80090c4:	e608      	b.n	8008cd8 <_dtoa_r+0x698>
 80090c6:	9b07      	ldr	r3, [sp, #28]
 80090c8:	9a07      	ldr	r2, [sp, #28]
 80090ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80090ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d028      	beq.n	8009126 <_dtoa_r+0xae6>
 80090d4:	4649      	mov	r1, r9
 80090d6:	2300      	movs	r3, #0
 80090d8:	220a      	movs	r2, #10
 80090da:	4658      	mov	r0, fp
 80090dc:	f000 f9d6 	bl	800948c <__multadd>
 80090e0:	42af      	cmp	r7, r5
 80090e2:	4681      	mov	r9, r0
 80090e4:	f04f 0300 	mov.w	r3, #0
 80090e8:	f04f 020a 	mov.w	r2, #10
 80090ec:	4639      	mov	r1, r7
 80090ee:	4658      	mov	r0, fp
 80090f0:	d107      	bne.n	8009102 <_dtoa_r+0xac2>
 80090f2:	f000 f9cb 	bl	800948c <__multadd>
 80090f6:	4607      	mov	r7, r0
 80090f8:	4605      	mov	r5, r0
 80090fa:	9b07      	ldr	r3, [sp, #28]
 80090fc:	3301      	adds	r3, #1
 80090fe:	9307      	str	r3, [sp, #28]
 8009100:	e774      	b.n	8008fec <_dtoa_r+0x9ac>
 8009102:	f000 f9c3 	bl	800948c <__multadd>
 8009106:	4629      	mov	r1, r5
 8009108:	4607      	mov	r7, r0
 800910a:	2300      	movs	r3, #0
 800910c:	220a      	movs	r2, #10
 800910e:	4658      	mov	r0, fp
 8009110:	f000 f9bc 	bl	800948c <__multadd>
 8009114:	4605      	mov	r5, r0
 8009116:	e7f0      	b.n	80090fa <_dtoa_r+0xaba>
 8009118:	9b00      	ldr	r3, [sp, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	bfcc      	ite	gt
 800911e:	461e      	movgt	r6, r3
 8009120:	2601      	movle	r6, #1
 8009122:	4456      	add	r6, sl
 8009124:	2700      	movs	r7, #0
 8009126:	4649      	mov	r1, r9
 8009128:	2201      	movs	r2, #1
 800912a:	4658      	mov	r0, fp
 800912c:	f000 fb5a 	bl	80097e4 <__lshift>
 8009130:	4621      	mov	r1, r4
 8009132:	4681      	mov	r9, r0
 8009134:	f000 fbc2 	bl	80098bc <__mcmp>
 8009138:	2800      	cmp	r0, #0
 800913a:	dcb0      	bgt.n	800909e <_dtoa_r+0xa5e>
 800913c:	d102      	bne.n	8009144 <_dtoa_r+0xb04>
 800913e:	f018 0f01 	tst.w	r8, #1
 8009142:	d1ac      	bne.n	800909e <_dtoa_r+0xa5e>
 8009144:	4633      	mov	r3, r6
 8009146:	461e      	mov	r6, r3
 8009148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800914c:	2a30      	cmp	r2, #48	@ 0x30
 800914e:	d0fa      	beq.n	8009146 <_dtoa_r+0xb06>
 8009150:	e5c2      	b.n	8008cd8 <_dtoa_r+0x698>
 8009152:	459a      	cmp	sl, r3
 8009154:	d1a4      	bne.n	80090a0 <_dtoa_r+0xa60>
 8009156:	9b04      	ldr	r3, [sp, #16]
 8009158:	3301      	adds	r3, #1
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	2331      	movs	r3, #49	@ 0x31
 800915e:	f88a 3000 	strb.w	r3, [sl]
 8009162:	e5b9      	b.n	8008cd8 <_dtoa_r+0x698>
 8009164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009166:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80091c4 <_dtoa_r+0xb84>
 800916a:	b11b      	cbz	r3, 8009174 <_dtoa_r+0xb34>
 800916c:	f10a 0308 	add.w	r3, sl, #8
 8009170:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	4650      	mov	r0, sl
 8009176:	b019      	add	sp, #100	@ 0x64
 8009178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800917e:	2b01      	cmp	r3, #1
 8009180:	f77f ae37 	ble.w	8008df2 <_dtoa_r+0x7b2>
 8009184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009186:	930a      	str	r3, [sp, #40]	@ 0x28
 8009188:	2001      	movs	r0, #1
 800918a:	e655      	b.n	8008e38 <_dtoa_r+0x7f8>
 800918c:	9b00      	ldr	r3, [sp, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	f77f aed6 	ble.w	8008f40 <_dtoa_r+0x900>
 8009194:	4656      	mov	r6, sl
 8009196:	4621      	mov	r1, r4
 8009198:	4648      	mov	r0, r9
 800919a:	f7ff f9c8 	bl	800852e <quorem>
 800919e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091a2:	f806 8b01 	strb.w	r8, [r6], #1
 80091a6:	9b00      	ldr	r3, [sp, #0]
 80091a8:	eba6 020a 	sub.w	r2, r6, sl
 80091ac:	4293      	cmp	r3, r2
 80091ae:	ddb3      	ble.n	8009118 <_dtoa_r+0xad8>
 80091b0:	4649      	mov	r1, r9
 80091b2:	2300      	movs	r3, #0
 80091b4:	220a      	movs	r2, #10
 80091b6:	4658      	mov	r0, fp
 80091b8:	f000 f968 	bl	800948c <__multadd>
 80091bc:	4681      	mov	r9, r0
 80091be:	e7ea      	b.n	8009196 <_dtoa_r+0xb56>
 80091c0:	0800a7d4 	.word	0x0800a7d4
 80091c4:	0800a758 	.word	0x0800a758

080091c8 <_free_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	4605      	mov	r5, r0
 80091cc:	2900      	cmp	r1, #0
 80091ce:	d041      	beq.n	8009254 <_free_r+0x8c>
 80091d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d4:	1f0c      	subs	r4, r1, #4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	bfb8      	it	lt
 80091da:	18e4      	addlt	r4, r4, r3
 80091dc:	f000 f8e8 	bl	80093b0 <__malloc_lock>
 80091e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009258 <_free_r+0x90>)
 80091e2:	6813      	ldr	r3, [r2, #0]
 80091e4:	b933      	cbnz	r3, 80091f4 <_free_r+0x2c>
 80091e6:	6063      	str	r3, [r4, #4]
 80091e8:	6014      	str	r4, [r2, #0]
 80091ea:	4628      	mov	r0, r5
 80091ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091f0:	f000 b8e4 	b.w	80093bc <__malloc_unlock>
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	d908      	bls.n	800920a <_free_r+0x42>
 80091f8:	6820      	ldr	r0, [r4, #0]
 80091fa:	1821      	adds	r1, r4, r0
 80091fc:	428b      	cmp	r3, r1
 80091fe:	bf01      	itttt	eq
 8009200:	6819      	ldreq	r1, [r3, #0]
 8009202:	685b      	ldreq	r3, [r3, #4]
 8009204:	1809      	addeq	r1, r1, r0
 8009206:	6021      	streq	r1, [r4, #0]
 8009208:	e7ed      	b.n	80091e6 <_free_r+0x1e>
 800920a:	461a      	mov	r2, r3
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	b10b      	cbz	r3, 8009214 <_free_r+0x4c>
 8009210:	42a3      	cmp	r3, r4
 8009212:	d9fa      	bls.n	800920a <_free_r+0x42>
 8009214:	6811      	ldr	r1, [r2, #0]
 8009216:	1850      	adds	r0, r2, r1
 8009218:	42a0      	cmp	r0, r4
 800921a:	d10b      	bne.n	8009234 <_free_r+0x6c>
 800921c:	6820      	ldr	r0, [r4, #0]
 800921e:	4401      	add	r1, r0
 8009220:	1850      	adds	r0, r2, r1
 8009222:	4283      	cmp	r3, r0
 8009224:	6011      	str	r1, [r2, #0]
 8009226:	d1e0      	bne.n	80091ea <_free_r+0x22>
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	6053      	str	r3, [r2, #4]
 800922e:	4408      	add	r0, r1
 8009230:	6010      	str	r0, [r2, #0]
 8009232:	e7da      	b.n	80091ea <_free_r+0x22>
 8009234:	d902      	bls.n	800923c <_free_r+0x74>
 8009236:	230c      	movs	r3, #12
 8009238:	602b      	str	r3, [r5, #0]
 800923a:	e7d6      	b.n	80091ea <_free_r+0x22>
 800923c:	6820      	ldr	r0, [r4, #0]
 800923e:	1821      	adds	r1, r4, r0
 8009240:	428b      	cmp	r3, r1
 8009242:	bf04      	itt	eq
 8009244:	6819      	ldreq	r1, [r3, #0]
 8009246:	685b      	ldreq	r3, [r3, #4]
 8009248:	6063      	str	r3, [r4, #4]
 800924a:	bf04      	itt	eq
 800924c:	1809      	addeq	r1, r1, r0
 800924e:	6021      	streq	r1, [r4, #0]
 8009250:	6054      	str	r4, [r2, #4]
 8009252:	e7ca      	b.n	80091ea <_free_r+0x22>
 8009254:	bd38      	pop	{r3, r4, r5, pc}
 8009256:	bf00      	nop
 8009258:	20004b44 	.word	0x20004b44

0800925c <malloc>:
 800925c:	4b02      	ldr	r3, [pc, #8]	@ (8009268 <malloc+0xc>)
 800925e:	4601      	mov	r1, r0
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	f000 b825 	b.w	80092b0 <_malloc_r>
 8009266:	bf00      	nop
 8009268:	2000001c 	.word	0x2000001c

0800926c <sbrk_aligned>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	4e0f      	ldr	r6, [pc, #60]	@ (80092ac <sbrk_aligned+0x40>)
 8009270:	460c      	mov	r4, r1
 8009272:	6831      	ldr	r1, [r6, #0]
 8009274:	4605      	mov	r5, r0
 8009276:	b911      	cbnz	r1, 800927e <sbrk_aligned+0x12>
 8009278:	f000 fe46 	bl	8009f08 <_sbrk_r>
 800927c:	6030      	str	r0, [r6, #0]
 800927e:	4621      	mov	r1, r4
 8009280:	4628      	mov	r0, r5
 8009282:	f000 fe41 	bl	8009f08 <_sbrk_r>
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	d103      	bne.n	8009292 <sbrk_aligned+0x26>
 800928a:	f04f 34ff 	mov.w	r4, #4294967295
 800928e:	4620      	mov	r0, r4
 8009290:	bd70      	pop	{r4, r5, r6, pc}
 8009292:	1cc4      	adds	r4, r0, #3
 8009294:	f024 0403 	bic.w	r4, r4, #3
 8009298:	42a0      	cmp	r0, r4
 800929a:	d0f8      	beq.n	800928e <sbrk_aligned+0x22>
 800929c:	1a21      	subs	r1, r4, r0
 800929e:	4628      	mov	r0, r5
 80092a0:	f000 fe32 	bl	8009f08 <_sbrk_r>
 80092a4:	3001      	adds	r0, #1
 80092a6:	d1f2      	bne.n	800928e <sbrk_aligned+0x22>
 80092a8:	e7ef      	b.n	800928a <sbrk_aligned+0x1e>
 80092aa:	bf00      	nop
 80092ac:	20004b40 	.word	0x20004b40

080092b0 <_malloc_r>:
 80092b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b4:	1ccd      	adds	r5, r1, #3
 80092b6:	f025 0503 	bic.w	r5, r5, #3
 80092ba:	3508      	adds	r5, #8
 80092bc:	2d0c      	cmp	r5, #12
 80092be:	bf38      	it	cc
 80092c0:	250c      	movcc	r5, #12
 80092c2:	2d00      	cmp	r5, #0
 80092c4:	4606      	mov	r6, r0
 80092c6:	db01      	blt.n	80092cc <_malloc_r+0x1c>
 80092c8:	42a9      	cmp	r1, r5
 80092ca:	d904      	bls.n	80092d6 <_malloc_r+0x26>
 80092cc:	230c      	movs	r3, #12
 80092ce:	6033      	str	r3, [r6, #0]
 80092d0:	2000      	movs	r0, #0
 80092d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093ac <_malloc_r+0xfc>
 80092da:	f000 f869 	bl	80093b0 <__malloc_lock>
 80092de:	f8d8 3000 	ldr.w	r3, [r8]
 80092e2:	461c      	mov	r4, r3
 80092e4:	bb44      	cbnz	r4, 8009338 <_malloc_r+0x88>
 80092e6:	4629      	mov	r1, r5
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff ffbf 	bl	800926c <sbrk_aligned>
 80092ee:	1c43      	adds	r3, r0, #1
 80092f0:	4604      	mov	r4, r0
 80092f2:	d158      	bne.n	80093a6 <_malloc_r+0xf6>
 80092f4:	f8d8 4000 	ldr.w	r4, [r8]
 80092f8:	4627      	mov	r7, r4
 80092fa:	2f00      	cmp	r7, #0
 80092fc:	d143      	bne.n	8009386 <_malloc_r+0xd6>
 80092fe:	2c00      	cmp	r4, #0
 8009300:	d04b      	beq.n	800939a <_malloc_r+0xea>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	4639      	mov	r1, r7
 8009306:	4630      	mov	r0, r6
 8009308:	eb04 0903 	add.w	r9, r4, r3
 800930c:	f000 fdfc 	bl	8009f08 <_sbrk_r>
 8009310:	4581      	cmp	r9, r0
 8009312:	d142      	bne.n	800939a <_malloc_r+0xea>
 8009314:	6821      	ldr	r1, [r4, #0]
 8009316:	1a6d      	subs	r5, r5, r1
 8009318:	4629      	mov	r1, r5
 800931a:	4630      	mov	r0, r6
 800931c:	f7ff ffa6 	bl	800926c <sbrk_aligned>
 8009320:	3001      	adds	r0, #1
 8009322:	d03a      	beq.n	800939a <_malloc_r+0xea>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	442b      	add	r3, r5
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	f8d8 3000 	ldr.w	r3, [r8]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	bb62      	cbnz	r2, 800938c <_malloc_r+0xdc>
 8009332:	f8c8 7000 	str.w	r7, [r8]
 8009336:	e00f      	b.n	8009358 <_malloc_r+0xa8>
 8009338:	6822      	ldr	r2, [r4, #0]
 800933a:	1b52      	subs	r2, r2, r5
 800933c:	d420      	bmi.n	8009380 <_malloc_r+0xd0>
 800933e:	2a0b      	cmp	r2, #11
 8009340:	d917      	bls.n	8009372 <_malloc_r+0xc2>
 8009342:	1961      	adds	r1, r4, r5
 8009344:	42a3      	cmp	r3, r4
 8009346:	6025      	str	r5, [r4, #0]
 8009348:	bf18      	it	ne
 800934a:	6059      	strne	r1, [r3, #4]
 800934c:	6863      	ldr	r3, [r4, #4]
 800934e:	bf08      	it	eq
 8009350:	f8c8 1000 	streq.w	r1, [r8]
 8009354:	5162      	str	r2, [r4, r5]
 8009356:	604b      	str	r3, [r1, #4]
 8009358:	4630      	mov	r0, r6
 800935a:	f000 f82f 	bl	80093bc <__malloc_unlock>
 800935e:	f104 000b 	add.w	r0, r4, #11
 8009362:	1d23      	adds	r3, r4, #4
 8009364:	f020 0007 	bic.w	r0, r0, #7
 8009368:	1ac2      	subs	r2, r0, r3
 800936a:	bf1c      	itt	ne
 800936c:	1a1b      	subne	r3, r3, r0
 800936e:	50a3      	strne	r3, [r4, r2]
 8009370:	e7af      	b.n	80092d2 <_malloc_r+0x22>
 8009372:	6862      	ldr	r2, [r4, #4]
 8009374:	42a3      	cmp	r3, r4
 8009376:	bf0c      	ite	eq
 8009378:	f8c8 2000 	streq.w	r2, [r8]
 800937c:	605a      	strne	r2, [r3, #4]
 800937e:	e7eb      	b.n	8009358 <_malloc_r+0xa8>
 8009380:	4623      	mov	r3, r4
 8009382:	6864      	ldr	r4, [r4, #4]
 8009384:	e7ae      	b.n	80092e4 <_malloc_r+0x34>
 8009386:	463c      	mov	r4, r7
 8009388:	687f      	ldr	r7, [r7, #4]
 800938a:	e7b6      	b.n	80092fa <_malloc_r+0x4a>
 800938c:	461a      	mov	r2, r3
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	42a3      	cmp	r3, r4
 8009392:	d1fb      	bne.n	800938c <_malloc_r+0xdc>
 8009394:	2300      	movs	r3, #0
 8009396:	6053      	str	r3, [r2, #4]
 8009398:	e7de      	b.n	8009358 <_malloc_r+0xa8>
 800939a:	230c      	movs	r3, #12
 800939c:	6033      	str	r3, [r6, #0]
 800939e:	4630      	mov	r0, r6
 80093a0:	f000 f80c 	bl	80093bc <__malloc_unlock>
 80093a4:	e794      	b.n	80092d0 <_malloc_r+0x20>
 80093a6:	6005      	str	r5, [r0, #0]
 80093a8:	e7d6      	b.n	8009358 <_malloc_r+0xa8>
 80093aa:	bf00      	nop
 80093ac:	20004b44 	.word	0x20004b44

080093b0 <__malloc_lock>:
 80093b0:	4801      	ldr	r0, [pc, #4]	@ (80093b8 <__malloc_lock+0x8>)
 80093b2:	f7ff b8ac 	b.w	800850e <__retarget_lock_acquire_recursive>
 80093b6:	bf00      	nop
 80093b8:	20004b3c 	.word	0x20004b3c

080093bc <__malloc_unlock>:
 80093bc:	4801      	ldr	r0, [pc, #4]	@ (80093c4 <__malloc_unlock+0x8>)
 80093be:	f7ff b8a7 	b.w	8008510 <__retarget_lock_release_recursive>
 80093c2:	bf00      	nop
 80093c4:	20004b3c 	.word	0x20004b3c

080093c8 <_Balloc>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	69c6      	ldr	r6, [r0, #28]
 80093cc:	4604      	mov	r4, r0
 80093ce:	460d      	mov	r5, r1
 80093d0:	b976      	cbnz	r6, 80093f0 <_Balloc+0x28>
 80093d2:	2010      	movs	r0, #16
 80093d4:	f7ff ff42 	bl	800925c <malloc>
 80093d8:	4602      	mov	r2, r0
 80093da:	61e0      	str	r0, [r4, #28]
 80093dc:	b920      	cbnz	r0, 80093e8 <_Balloc+0x20>
 80093de:	4b18      	ldr	r3, [pc, #96]	@ (8009440 <_Balloc+0x78>)
 80093e0:	4818      	ldr	r0, [pc, #96]	@ (8009444 <_Balloc+0x7c>)
 80093e2:	216b      	movs	r1, #107	@ 0x6b
 80093e4:	f000 fda0 	bl	8009f28 <__assert_func>
 80093e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093ec:	6006      	str	r6, [r0, #0]
 80093ee:	60c6      	str	r6, [r0, #12]
 80093f0:	69e6      	ldr	r6, [r4, #28]
 80093f2:	68f3      	ldr	r3, [r6, #12]
 80093f4:	b183      	cbz	r3, 8009418 <_Balloc+0x50>
 80093f6:	69e3      	ldr	r3, [r4, #28]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093fe:	b9b8      	cbnz	r0, 8009430 <_Balloc+0x68>
 8009400:	2101      	movs	r1, #1
 8009402:	fa01 f605 	lsl.w	r6, r1, r5
 8009406:	1d72      	adds	r2, r6, #5
 8009408:	0092      	lsls	r2, r2, #2
 800940a:	4620      	mov	r0, r4
 800940c:	f000 fdaa 	bl	8009f64 <_calloc_r>
 8009410:	b160      	cbz	r0, 800942c <_Balloc+0x64>
 8009412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009416:	e00e      	b.n	8009436 <_Balloc+0x6e>
 8009418:	2221      	movs	r2, #33	@ 0x21
 800941a:	2104      	movs	r1, #4
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fda1 	bl	8009f64 <_calloc_r>
 8009422:	69e3      	ldr	r3, [r4, #28]
 8009424:	60f0      	str	r0, [r6, #12]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e4      	bne.n	80093f6 <_Balloc+0x2e>
 800942c:	2000      	movs	r0, #0
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	6802      	ldr	r2, [r0, #0]
 8009432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009436:	2300      	movs	r3, #0
 8009438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800943c:	e7f7      	b.n	800942e <_Balloc+0x66>
 800943e:	bf00      	nop
 8009440:	0800a765 	.word	0x0800a765
 8009444:	0800a7e5 	.word	0x0800a7e5

08009448 <_Bfree>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	69c6      	ldr	r6, [r0, #28]
 800944c:	4605      	mov	r5, r0
 800944e:	460c      	mov	r4, r1
 8009450:	b976      	cbnz	r6, 8009470 <_Bfree+0x28>
 8009452:	2010      	movs	r0, #16
 8009454:	f7ff ff02 	bl	800925c <malloc>
 8009458:	4602      	mov	r2, r0
 800945a:	61e8      	str	r0, [r5, #28]
 800945c:	b920      	cbnz	r0, 8009468 <_Bfree+0x20>
 800945e:	4b09      	ldr	r3, [pc, #36]	@ (8009484 <_Bfree+0x3c>)
 8009460:	4809      	ldr	r0, [pc, #36]	@ (8009488 <_Bfree+0x40>)
 8009462:	218f      	movs	r1, #143	@ 0x8f
 8009464:	f000 fd60 	bl	8009f28 <__assert_func>
 8009468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800946c:	6006      	str	r6, [r0, #0]
 800946e:	60c6      	str	r6, [r0, #12]
 8009470:	b13c      	cbz	r4, 8009482 <_Bfree+0x3a>
 8009472:	69eb      	ldr	r3, [r5, #28]
 8009474:	6862      	ldr	r2, [r4, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800947c:	6021      	str	r1, [r4, #0]
 800947e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009482:	bd70      	pop	{r4, r5, r6, pc}
 8009484:	0800a765 	.word	0x0800a765
 8009488:	0800a7e5 	.word	0x0800a7e5

0800948c <__multadd>:
 800948c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009490:	690d      	ldr	r5, [r1, #16]
 8009492:	4607      	mov	r7, r0
 8009494:	460c      	mov	r4, r1
 8009496:	461e      	mov	r6, r3
 8009498:	f101 0c14 	add.w	ip, r1, #20
 800949c:	2000      	movs	r0, #0
 800949e:	f8dc 3000 	ldr.w	r3, [ip]
 80094a2:	b299      	uxth	r1, r3
 80094a4:	fb02 6101 	mla	r1, r2, r1, r6
 80094a8:	0c1e      	lsrs	r6, r3, #16
 80094aa:	0c0b      	lsrs	r3, r1, #16
 80094ac:	fb02 3306 	mla	r3, r2, r6, r3
 80094b0:	b289      	uxth	r1, r1
 80094b2:	3001      	adds	r0, #1
 80094b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094b8:	4285      	cmp	r5, r0
 80094ba:	f84c 1b04 	str.w	r1, [ip], #4
 80094be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094c2:	dcec      	bgt.n	800949e <__multadd+0x12>
 80094c4:	b30e      	cbz	r6, 800950a <__multadd+0x7e>
 80094c6:	68a3      	ldr	r3, [r4, #8]
 80094c8:	42ab      	cmp	r3, r5
 80094ca:	dc19      	bgt.n	8009500 <__multadd+0x74>
 80094cc:	6861      	ldr	r1, [r4, #4]
 80094ce:	4638      	mov	r0, r7
 80094d0:	3101      	adds	r1, #1
 80094d2:	f7ff ff79 	bl	80093c8 <_Balloc>
 80094d6:	4680      	mov	r8, r0
 80094d8:	b928      	cbnz	r0, 80094e6 <__multadd+0x5a>
 80094da:	4602      	mov	r2, r0
 80094dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009510 <__multadd+0x84>)
 80094de:	480d      	ldr	r0, [pc, #52]	@ (8009514 <__multadd+0x88>)
 80094e0:	21ba      	movs	r1, #186	@ 0xba
 80094e2:	f000 fd21 	bl	8009f28 <__assert_func>
 80094e6:	6922      	ldr	r2, [r4, #16]
 80094e8:	3202      	adds	r2, #2
 80094ea:	f104 010c 	add.w	r1, r4, #12
 80094ee:	0092      	lsls	r2, r2, #2
 80094f0:	300c      	adds	r0, #12
 80094f2:	f7ff f80e 	bl	8008512 <memcpy>
 80094f6:	4621      	mov	r1, r4
 80094f8:	4638      	mov	r0, r7
 80094fa:	f7ff ffa5 	bl	8009448 <_Bfree>
 80094fe:	4644      	mov	r4, r8
 8009500:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009504:	3501      	adds	r5, #1
 8009506:	615e      	str	r6, [r3, #20]
 8009508:	6125      	str	r5, [r4, #16]
 800950a:	4620      	mov	r0, r4
 800950c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009510:	0800a7d4 	.word	0x0800a7d4
 8009514:	0800a7e5 	.word	0x0800a7e5

08009518 <__hi0bits>:
 8009518:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800951c:	4603      	mov	r3, r0
 800951e:	bf36      	itet	cc
 8009520:	0403      	lslcc	r3, r0, #16
 8009522:	2000      	movcs	r0, #0
 8009524:	2010      	movcc	r0, #16
 8009526:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800952a:	bf3c      	itt	cc
 800952c:	021b      	lslcc	r3, r3, #8
 800952e:	3008      	addcc	r0, #8
 8009530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009534:	bf3c      	itt	cc
 8009536:	011b      	lslcc	r3, r3, #4
 8009538:	3004      	addcc	r0, #4
 800953a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800953e:	bf3c      	itt	cc
 8009540:	009b      	lslcc	r3, r3, #2
 8009542:	3002      	addcc	r0, #2
 8009544:	2b00      	cmp	r3, #0
 8009546:	db05      	blt.n	8009554 <__hi0bits+0x3c>
 8009548:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800954c:	f100 0001 	add.w	r0, r0, #1
 8009550:	bf08      	it	eq
 8009552:	2020      	moveq	r0, #32
 8009554:	4770      	bx	lr

08009556 <__lo0bits>:
 8009556:	6803      	ldr	r3, [r0, #0]
 8009558:	4602      	mov	r2, r0
 800955a:	f013 0007 	ands.w	r0, r3, #7
 800955e:	d00b      	beq.n	8009578 <__lo0bits+0x22>
 8009560:	07d9      	lsls	r1, r3, #31
 8009562:	d421      	bmi.n	80095a8 <__lo0bits+0x52>
 8009564:	0798      	lsls	r0, r3, #30
 8009566:	bf49      	itett	mi
 8009568:	085b      	lsrmi	r3, r3, #1
 800956a:	089b      	lsrpl	r3, r3, #2
 800956c:	2001      	movmi	r0, #1
 800956e:	6013      	strmi	r3, [r2, #0]
 8009570:	bf5c      	itt	pl
 8009572:	6013      	strpl	r3, [r2, #0]
 8009574:	2002      	movpl	r0, #2
 8009576:	4770      	bx	lr
 8009578:	b299      	uxth	r1, r3
 800957a:	b909      	cbnz	r1, 8009580 <__lo0bits+0x2a>
 800957c:	0c1b      	lsrs	r3, r3, #16
 800957e:	2010      	movs	r0, #16
 8009580:	b2d9      	uxtb	r1, r3
 8009582:	b909      	cbnz	r1, 8009588 <__lo0bits+0x32>
 8009584:	3008      	adds	r0, #8
 8009586:	0a1b      	lsrs	r3, r3, #8
 8009588:	0719      	lsls	r1, r3, #28
 800958a:	bf04      	itt	eq
 800958c:	091b      	lsreq	r3, r3, #4
 800958e:	3004      	addeq	r0, #4
 8009590:	0799      	lsls	r1, r3, #30
 8009592:	bf04      	itt	eq
 8009594:	089b      	lsreq	r3, r3, #2
 8009596:	3002      	addeq	r0, #2
 8009598:	07d9      	lsls	r1, r3, #31
 800959a:	d403      	bmi.n	80095a4 <__lo0bits+0x4e>
 800959c:	085b      	lsrs	r3, r3, #1
 800959e:	f100 0001 	add.w	r0, r0, #1
 80095a2:	d003      	beq.n	80095ac <__lo0bits+0x56>
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	4770      	bx	lr
 80095a8:	2000      	movs	r0, #0
 80095aa:	4770      	bx	lr
 80095ac:	2020      	movs	r0, #32
 80095ae:	4770      	bx	lr

080095b0 <__i2b>:
 80095b0:	b510      	push	{r4, lr}
 80095b2:	460c      	mov	r4, r1
 80095b4:	2101      	movs	r1, #1
 80095b6:	f7ff ff07 	bl	80093c8 <_Balloc>
 80095ba:	4602      	mov	r2, r0
 80095bc:	b928      	cbnz	r0, 80095ca <__i2b+0x1a>
 80095be:	4b05      	ldr	r3, [pc, #20]	@ (80095d4 <__i2b+0x24>)
 80095c0:	4805      	ldr	r0, [pc, #20]	@ (80095d8 <__i2b+0x28>)
 80095c2:	f240 1145 	movw	r1, #325	@ 0x145
 80095c6:	f000 fcaf 	bl	8009f28 <__assert_func>
 80095ca:	2301      	movs	r3, #1
 80095cc:	6144      	str	r4, [r0, #20]
 80095ce:	6103      	str	r3, [r0, #16]
 80095d0:	bd10      	pop	{r4, pc}
 80095d2:	bf00      	nop
 80095d4:	0800a7d4 	.word	0x0800a7d4
 80095d8:	0800a7e5 	.word	0x0800a7e5

080095dc <__multiply>:
 80095dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e0:	4614      	mov	r4, r2
 80095e2:	690a      	ldr	r2, [r1, #16]
 80095e4:	6923      	ldr	r3, [r4, #16]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	bfa8      	it	ge
 80095ea:	4623      	movge	r3, r4
 80095ec:	460f      	mov	r7, r1
 80095ee:	bfa4      	itt	ge
 80095f0:	460c      	movge	r4, r1
 80095f2:	461f      	movge	r7, r3
 80095f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80095f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80095fc:	68a3      	ldr	r3, [r4, #8]
 80095fe:	6861      	ldr	r1, [r4, #4]
 8009600:	eb0a 0609 	add.w	r6, sl, r9
 8009604:	42b3      	cmp	r3, r6
 8009606:	b085      	sub	sp, #20
 8009608:	bfb8      	it	lt
 800960a:	3101      	addlt	r1, #1
 800960c:	f7ff fedc 	bl	80093c8 <_Balloc>
 8009610:	b930      	cbnz	r0, 8009620 <__multiply+0x44>
 8009612:	4602      	mov	r2, r0
 8009614:	4b44      	ldr	r3, [pc, #272]	@ (8009728 <__multiply+0x14c>)
 8009616:	4845      	ldr	r0, [pc, #276]	@ (800972c <__multiply+0x150>)
 8009618:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800961c:	f000 fc84 	bl	8009f28 <__assert_func>
 8009620:	f100 0514 	add.w	r5, r0, #20
 8009624:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009628:	462b      	mov	r3, r5
 800962a:	2200      	movs	r2, #0
 800962c:	4543      	cmp	r3, r8
 800962e:	d321      	bcc.n	8009674 <__multiply+0x98>
 8009630:	f107 0114 	add.w	r1, r7, #20
 8009634:	f104 0214 	add.w	r2, r4, #20
 8009638:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800963c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009640:	9302      	str	r3, [sp, #8]
 8009642:	1b13      	subs	r3, r2, r4
 8009644:	3b15      	subs	r3, #21
 8009646:	f023 0303 	bic.w	r3, r3, #3
 800964a:	3304      	adds	r3, #4
 800964c:	f104 0715 	add.w	r7, r4, #21
 8009650:	42ba      	cmp	r2, r7
 8009652:	bf38      	it	cc
 8009654:	2304      	movcc	r3, #4
 8009656:	9301      	str	r3, [sp, #4]
 8009658:	9b02      	ldr	r3, [sp, #8]
 800965a:	9103      	str	r1, [sp, #12]
 800965c:	428b      	cmp	r3, r1
 800965e:	d80c      	bhi.n	800967a <__multiply+0x9e>
 8009660:	2e00      	cmp	r6, #0
 8009662:	dd03      	ble.n	800966c <__multiply+0x90>
 8009664:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009668:	2b00      	cmp	r3, #0
 800966a:	d05b      	beq.n	8009724 <__multiply+0x148>
 800966c:	6106      	str	r6, [r0, #16]
 800966e:	b005      	add	sp, #20
 8009670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009674:	f843 2b04 	str.w	r2, [r3], #4
 8009678:	e7d8      	b.n	800962c <__multiply+0x50>
 800967a:	f8b1 a000 	ldrh.w	sl, [r1]
 800967e:	f1ba 0f00 	cmp.w	sl, #0
 8009682:	d024      	beq.n	80096ce <__multiply+0xf2>
 8009684:	f104 0e14 	add.w	lr, r4, #20
 8009688:	46a9      	mov	r9, r5
 800968a:	f04f 0c00 	mov.w	ip, #0
 800968e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009692:	f8d9 3000 	ldr.w	r3, [r9]
 8009696:	fa1f fb87 	uxth.w	fp, r7
 800969a:	b29b      	uxth	r3, r3
 800969c:	fb0a 330b 	mla	r3, sl, fp, r3
 80096a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80096a4:	f8d9 7000 	ldr.w	r7, [r9]
 80096a8:	4463      	add	r3, ip
 80096aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80096ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80096b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80096bc:	4572      	cmp	r2, lr
 80096be:	f849 3b04 	str.w	r3, [r9], #4
 80096c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80096c6:	d8e2      	bhi.n	800968e <__multiply+0xb2>
 80096c8:	9b01      	ldr	r3, [sp, #4]
 80096ca:	f845 c003 	str.w	ip, [r5, r3]
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80096d4:	3104      	adds	r1, #4
 80096d6:	f1b9 0f00 	cmp.w	r9, #0
 80096da:	d021      	beq.n	8009720 <__multiply+0x144>
 80096dc:	682b      	ldr	r3, [r5, #0]
 80096de:	f104 0c14 	add.w	ip, r4, #20
 80096e2:	46ae      	mov	lr, r5
 80096e4:	f04f 0a00 	mov.w	sl, #0
 80096e8:	f8bc b000 	ldrh.w	fp, [ip]
 80096ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80096f0:	fb09 770b 	mla	r7, r9, fp, r7
 80096f4:	4457      	add	r7, sl
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80096fc:	f84e 3b04 	str.w	r3, [lr], #4
 8009700:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009704:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009708:	f8be 3000 	ldrh.w	r3, [lr]
 800970c:	fb09 330a 	mla	r3, r9, sl, r3
 8009710:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009714:	4562      	cmp	r2, ip
 8009716:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800971a:	d8e5      	bhi.n	80096e8 <__multiply+0x10c>
 800971c:	9f01      	ldr	r7, [sp, #4]
 800971e:	51eb      	str	r3, [r5, r7]
 8009720:	3504      	adds	r5, #4
 8009722:	e799      	b.n	8009658 <__multiply+0x7c>
 8009724:	3e01      	subs	r6, #1
 8009726:	e79b      	b.n	8009660 <__multiply+0x84>
 8009728:	0800a7d4 	.word	0x0800a7d4
 800972c:	0800a7e5 	.word	0x0800a7e5

08009730 <__pow5mult>:
 8009730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009734:	4615      	mov	r5, r2
 8009736:	f012 0203 	ands.w	r2, r2, #3
 800973a:	4607      	mov	r7, r0
 800973c:	460e      	mov	r6, r1
 800973e:	d007      	beq.n	8009750 <__pow5mult+0x20>
 8009740:	4c25      	ldr	r4, [pc, #148]	@ (80097d8 <__pow5mult+0xa8>)
 8009742:	3a01      	subs	r2, #1
 8009744:	2300      	movs	r3, #0
 8009746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800974a:	f7ff fe9f 	bl	800948c <__multadd>
 800974e:	4606      	mov	r6, r0
 8009750:	10ad      	asrs	r5, r5, #2
 8009752:	d03d      	beq.n	80097d0 <__pow5mult+0xa0>
 8009754:	69fc      	ldr	r4, [r7, #28]
 8009756:	b97c      	cbnz	r4, 8009778 <__pow5mult+0x48>
 8009758:	2010      	movs	r0, #16
 800975a:	f7ff fd7f 	bl	800925c <malloc>
 800975e:	4602      	mov	r2, r0
 8009760:	61f8      	str	r0, [r7, #28]
 8009762:	b928      	cbnz	r0, 8009770 <__pow5mult+0x40>
 8009764:	4b1d      	ldr	r3, [pc, #116]	@ (80097dc <__pow5mult+0xac>)
 8009766:	481e      	ldr	r0, [pc, #120]	@ (80097e0 <__pow5mult+0xb0>)
 8009768:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800976c:	f000 fbdc 	bl	8009f28 <__assert_func>
 8009770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009774:	6004      	str	r4, [r0, #0]
 8009776:	60c4      	str	r4, [r0, #12]
 8009778:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800977c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009780:	b94c      	cbnz	r4, 8009796 <__pow5mult+0x66>
 8009782:	f240 2171 	movw	r1, #625	@ 0x271
 8009786:	4638      	mov	r0, r7
 8009788:	f7ff ff12 	bl	80095b0 <__i2b>
 800978c:	2300      	movs	r3, #0
 800978e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009792:	4604      	mov	r4, r0
 8009794:	6003      	str	r3, [r0, #0]
 8009796:	f04f 0900 	mov.w	r9, #0
 800979a:	07eb      	lsls	r3, r5, #31
 800979c:	d50a      	bpl.n	80097b4 <__pow5mult+0x84>
 800979e:	4631      	mov	r1, r6
 80097a0:	4622      	mov	r2, r4
 80097a2:	4638      	mov	r0, r7
 80097a4:	f7ff ff1a 	bl	80095dc <__multiply>
 80097a8:	4631      	mov	r1, r6
 80097aa:	4680      	mov	r8, r0
 80097ac:	4638      	mov	r0, r7
 80097ae:	f7ff fe4b 	bl	8009448 <_Bfree>
 80097b2:	4646      	mov	r6, r8
 80097b4:	106d      	asrs	r5, r5, #1
 80097b6:	d00b      	beq.n	80097d0 <__pow5mult+0xa0>
 80097b8:	6820      	ldr	r0, [r4, #0]
 80097ba:	b938      	cbnz	r0, 80097cc <__pow5mult+0x9c>
 80097bc:	4622      	mov	r2, r4
 80097be:	4621      	mov	r1, r4
 80097c0:	4638      	mov	r0, r7
 80097c2:	f7ff ff0b 	bl	80095dc <__multiply>
 80097c6:	6020      	str	r0, [r4, #0]
 80097c8:	f8c0 9000 	str.w	r9, [r0]
 80097cc:	4604      	mov	r4, r0
 80097ce:	e7e4      	b.n	800979a <__pow5mult+0x6a>
 80097d0:	4630      	mov	r0, r6
 80097d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097d6:	bf00      	nop
 80097d8:	0800a840 	.word	0x0800a840
 80097dc:	0800a765 	.word	0x0800a765
 80097e0:	0800a7e5 	.word	0x0800a7e5

080097e4 <__lshift>:
 80097e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e8:	460c      	mov	r4, r1
 80097ea:	6849      	ldr	r1, [r1, #4]
 80097ec:	6923      	ldr	r3, [r4, #16]
 80097ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097f2:	68a3      	ldr	r3, [r4, #8]
 80097f4:	4607      	mov	r7, r0
 80097f6:	4691      	mov	r9, r2
 80097f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097fc:	f108 0601 	add.w	r6, r8, #1
 8009800:	42b3      	cmp	r3, r6
 8009802:	db0b      	blt.n	800981c <__lshift+0x38>
 8009804:	4638      	mov	r0, r7
 8009806:	f7ff fddf 	bl	80093c8 <_Balloc>
 800980a:	4605      	mov	r5, r0
 800980c:	b948      	cbnz	r0, 8009822 <__lshift+0x3e>
 800980e:	4602      	mov	r2, r0
 8009810:	4b28      	ldr	r3, [pc, #160]	@ (80098b4 <__lshift+0xd0>)
 8009812:	4829      	ldr	r0, [pc, #164]	@ (80098b8 <__lshift+0xd4>)
 8009814:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009818:	f000 fb86 	bl	8009f28 <__assert_func>
 800981c:	3101      	adds	r1, #1
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	e7ee      	b.n	8009800 <__lshift+0x1c>
 8009822:	2300      	movs	r3, #0
 8009824:	f100 0114 	add.w	r1, r0, #20
 8009828:	f100 0210 	add.w	r2, r0, #16
 800982c:	4618      	mov	r0, r3
 800982e:	4553      	cmp	r3, sl
 8009830:	db33      	blt.n	800989a <__lshift+0xb6>
 8009832:	6920      	ldr	r0, [r4, #16]
 8009834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009838:	f104 0314 	add.w	r3, r4, #20
 800983c:	f019 091f 	ands.w	r9, r9, #31
 8009840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009844:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009848:	d02b      	beq.n	80098a2 <__lshift+0xbe>
 800984a:	f1c9 0e20 	rsb	lr, r9, #32
 800984e:	468a      	mov	sl, r1
 8009850:	2200      	movs	r2, #0
 8009852:	6818      	ldr	r0, [r3, #0]
 8009854:	fa00 f009 	lsl.w	r0, r0, r9
 8009858:	4310      	orrs	r0, r2
 800985a:	f84a 0b04 	str.w	r0, [sl], #4
 800985e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009862:	459c      	cmp	ip, r3
 8009864:	fa22 f20e 	lsr.w	r2, r2, lr
 8009868:	d8f3      	bhi.n	8009852 <__lshift+0x6e>
 800986a:	ebac 0304 	sub.w	r3, ip, r4
 800986e:	3b15      	subs	r3, #21
 8009870:	f023 0303 	bic.w	r3, r3, #3
 8009874:	3304      	adds	r3, #4
 8009876:	f104 0015 	add.w	r0, r4, #21
 800987a:	4584      	cmp	ip, r0
 800987c:	bf38      	it	cc
 800987e:	2304      	movcc	r3, #4
 8009880:	50ca      	str	r2, [r1, r3]
 8009882:	b10a      	cbz	r2, 8009888 <__lshift+0xa4>
 8009884:	f108 0602 	add.w	r6, r8, #2
 8009888:	3e01      	subs	r6, #1
 800988a:	4638      	mov	r0, r7
 800988c:	612e      	str	r6, [r5, #16]
 800988e:	4621      	mov	r1, r4
 8009890:	f7ff fdda 	bl	8009448 <_Bfree>
 8009894:	4628      	mov	r0, r5
 8009896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800989a:	f842 0f04 	str.w	r0, [r2, #4]!
 800989e:	3301      	adds	r3, #1
 80098a0:	e7c5      	b.n	800982e <__lshift+0x4a>
 80098a2:	3904      	subs	r1, #4
 80098a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80098ac:	459c      	cmp	ip, r3
 80098ae:	d8f9      	bhi.n	80098a4 <__lshift+0xc0>
 80098b0:	e7ea      	b.n	8009888 <__lshift+0xa4>
 80098b2:	bf00      	nop
 80098b4:	0800a7d4 	.word	0x0800a7d4
 80098b8:	0800a7e5 	.word	0x0800a7e5

080098bc <__mcmp>:
 80098bc:	690a      	ldr	r2, [r1, #16]
 80098be:	4603      	mov	r3, r0
 80098c0:	6900      	ldr	r0, [r0, #16]
 80098c2:	1a80      	subs	r0, r0, r2
 80098c4:	b530      	push	{r4, r5, lr}
 80098c6:	d10e      	bne.n	80098e6 <__mcmp+0x2a>
 80098c8:	3314      	adds	r3, #20
 80098ca:	3114      	adds	r1, #20
 80098cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80098d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80098d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098dc:	4295      	cmp	r5, r2
 80098de:	d003      	beq.n	80098e8 <__mcmp+0x2c>
 80098e0:	d205      	bcs.n	80098ee <__mcmp+0x32>
 80098e2:	f04f 30ff 	mov.w	r0, #4294967295
 80098e6:	bd30      	pop	{r4, r5, pc}
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	d3f3      	bcc.n	80098d4 <__mcmp+0x18>
 80098ec:	e7fb      	b.n	80098e6 <__mcmp+0x2a>
 80098ee:	2001      	movs	r0, #1
 80098f0:	e7f9      	b.n	80098e6 <__mcmp+0x2a>
	...

080098f4 <__mdiff>:
 80098f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f8:	4689      	mov	r9, r1
 80098fa:	4606      	mov	r6, r0
 80098fc:	4611      	mov	r1, r2
 80098fe:	4648      	mov	r0, r9
 8009900:	4614      	mov	r4, r2
 8009902:	f7ff ffdb 	bl	80098bc <__mcmp>
 8009906:	1e05      	subs	r5, r0, #0
 8009908:	d112      	bne.n	8009930 <__mdiff+0x3c>
 800990a:	4629      	mov	r1, r5
 800990c:	4630      	mov	r0, r6
 800990e:	f7ff fd5b 	bl	80093c8 <_Balloc>
 8009912:	4602      	mov	r2, r0
 8009914:	b928      	cbnz	r0, 8009922 <__mdiff+0x2e>
 8009916:	4b3f      	ldr	r3, [pc, #252]	@ (8009a14 <__mdiff+0x120>)
 8009918:	f240 2137 	movw	r1, #567	@ 0x237
 800991c:	483e      	ldr	r0, [pc, #248]	@ (8009a18 <__mdiff+0x124>)
 800991e:	f000 fb03 	bl	8009f28 <__assert_func>
 8009922:	2301      	movs	r3, #1
 8009924:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009928:	4610      	mov	r0, r2
 800992a:	b003      	add	sp, #12
 800992c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009930:	bfbc      	itt	lt
 8009932:	464b      	movlt	r3, r9
 8009934:	46a1      	movlt	r9, r4
 8009936:	4630      	mov	r0, r6
 8009938:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800993c:	bfba      	itte	lt
 800993e:	461c      	movlt	r4, r3
 8009940:	2501      	movlt	r5, #1
 8009942:	2500      	movge	r5, #0
 8009944:	f7ff fd40 	bl	80093c8 <_Balloc>
 8009948:	4602      	mov	r2, r0
 800994a:	b918      	cbnz	r0, 8009954 <__mdiff+0x60>
 800994c:	4b31      	ldr	r3, [pc, #196]	@ (8009a14 <__mdiff+0x120>)
 800994e:	f240 2145 	movw	r1, #581	@ 0x245
 8009952:	e7e3      	b.n	800991c <__mdiff+0x28>
 8009954:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009958:	6926      	ldr	r6, [r4, #16]
 800995a:	60c5      	str	r5, [r0, #12]
 800995c:	f109 0310 	add.w	r3, r9, #16
 8009960:	f109 0514 	add.w	r5, r9, #20
 8009964:	f104 0e14 	add.w	lr, r4, #20
 8009968:	f100 0b14 	add.w	fp, r0, #20
 800996c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009970:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	46d9      	mov	r9, fp
 8009978:	f04f 0c00 	mov.w	ip, #0
 800997c:	9b01      	ldr	r3, [sp, #4]
 800997e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009982:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	fa1f f38a 	uxth.w	r3, sl
 800998c:	4619      	mov	r1, r3
 800998e:	b283      	uxth	r3, r0
 8009990:	1acb      	subs	r3, r1, r3
 8009992:	0c00      	lsrs	r0, r0, #16
 8009994:	4463      	add	r3, ip
 8009996:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800999a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800999e:	b29b      	uxth	r3, r3
 80099a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80099a4:	4576      	cmp	r6, lr
 80099a6:	f849 3b04 	str.w	r3, [r9], #4
 80099aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099ae:	d8e5      	bhi.n	800997c <__mdiff+0x88>
 80099b0:	1b33      	subs	r3, r6, r4
 80099b2:	3b15      	subs	r3, #21
 80099b4:	f023 0303 	bic.w	r3, r3, #3
 80099b8:	3415      	adds	r4, #21
 80099ba:	3304      	adds	r3, #4
 80099bc:	42a6      	cmp	r6, r4
 80099be:	bf38      	it	cc
 80099c0:	2304      	movcc	r3, #4
 80099c2:	441d      	add	r5, r3
 80099c4:	445b      	add	r3, fp
 80099c6:	461e      	mov	r6, r3
 80099c8:	462c      	mov	r4, r5
 80099ca:	4544      	cmp	r4, r8
 80099cc:	d30e      	bcc.n	80099ec <__mdiff+0xf8>
 80099ce:	f108 0103 	add.w	r1, r8, #3
 80099d2:	1b49      	subs	r1, r1, r5
 80099d4:	f021 0103 	bic.w	r1, r1, #3
 80099d8:	3d03      	subs	r5, #3
 80099da:	45a8      	cmp	r8, r5
 80099dc:	bf38      	it	cc
 80099de:	2100      	movcc	r1, #0
 80099e0:	440b      	add	r3, r1
 80099e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099e6:	b191      	cbz	r1, 8009a0e <__mdiff+0x11a>
 80099e8:	6117      	str	r7, [r2, #16]
 80099ea:	e79d      	b.n	8009928 <__mdiff+0x34>
 80099ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80099f0:	46e6      	mov	lr, ip
 80099f2:	0c08      	lsrs	r0, r1, #16
 80099f4:	fa1c fc81 	uxtah	ip, ip, r1
 80099f8:	4471      	add	r1, lr
 80099fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099fe:	b289      	uxth	r1, r1
 8009a00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a04:	f846 1b04 	str.w	r1, [r6], #4
 8009a08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a0c:	e7dd      	b.n	80099ca <__mdiff+0xd6>
 8009a0e:	3f01      	subs	r7, #1
 8009a10:	e7e7      	b.n	80099e2 <__mdiff+0xee>
 8009a12:	bf00      	nop
 8009a14:	0800a7d4 	.word	0x0800a7d4
 8009a18:	0800a7e5 	.word	0x0800a7e5

08009a1c <__d2b>:
 8009a1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a20:	460f      	mov	r7, r1
 8009a22:	2101      	movs	r1, #1
 8009a24:	ec59 8b10 	vmov	r8, r9, d0
 8009a28:	4616      	mov	r6, r2
 8009a2a:	f7ff fccd 	bl	80093c8 <_Balloc>
 8009a2e:	4604      	mov	r4, r0
 8009a30:	b930      	cbnz	r0, 8009a40 <__d2b+0x24>
 8009a32:	4602      	mov	r2, r0
 8009a34:	4b23      	ldr	r3, [pc, #140]	@ (8009ac4 <__d2b+0xa8>)
 8009a36:	4824      	ldr	r0, [pc, #144]	@ (8009ac8 <__d2b+0xac>)
 8009a38:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a3c:	f000 fa74 	bl	8009f28 <__assert_func>
 8009a40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a48:	b10d      	cbz	r5, 8009a4e <__d2b+0x32>
 8009a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	f1b8 0300 	subs.w	r3, r8, #0
 8009a54:	d023      	beq.n	8009a9e <__d2b+0x82>
 8009a56:	4668      	mov	r0, sp
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	f7ff fd7c 	bl	8009556 <__lo0bits>
 8009a5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a62:	b1d0      	cbz	r0, 8009a9a <__d2b+0x7e>
 8009a64:	f1c0 0320 	rsb	r3, r0, #32
 8009a68:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6c:	430b      	orrs	r3, r1
 8009a6e:	40c2      	lsrs	r2, r0
 8009a70:	6163      	str	r3, [r4, #20]
 8009a72:	9201      	str	r2, [sp, #4]
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	61a3      	str	r3, [r4, #24]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	bf0c      	ite	eq
 8009a7c:	2201      	moveq	r2, #1
 8009a7e:	2202      	movne	r2, #2
 8009a80:	6122      	str	r2, [r4, #16]
 8009a82:	b1a5      	cbz	r5, 8009aae <__d2b+0x92>
 8009a84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a88:	4405      	add	r5, r0
 8009a8a:	603d      	str	r5, [r7, #0]
 8009a8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a90:	6030      	str	r0, [r6, #0]
 8009a92:	4620      	mov	r0, r4
 8009a94:	b003      	add	sp, #12
 8009a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a9a:	6161      	str	r1, [r4, #20]
 8009a9c:	e7ea      	b.n	8009a74 <__d2b+0x58>
 8009a9e:	a801      	add	r0, sp, #4
 8009aa0:	f7ff fd59 	bl	8009556 <__lo0bits>
 8009aa4:	9b01      	ldr	r3, [sp, #4]
 8009aa6:	6163      	str	r3, [r4, #20]
 8009aa8:	3020      	adds	r0, #32
 8009aaa:	2201      	movs	r2, #1
 8009aac:	e7e8      	b.n	8009a80 <__d2b+0x64>
 8009aae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ab2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009ab6:	6038      	str	r0, [r7, #0]
 8009ab8:	6918      	ldr	r0, [r3, #16]
 8009aba:	f7ff fd2d 	bl	8009518 <__hi0bits>
 8009abe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ac2:	e7e5      	b.n	8009a90 <__d2b+0x74>
 8009ac4:	0800a7d4 	.word	0x0800a7d4
 8009ac8:	0800a7e5 	.word	0x0800a7e5

08009acc <__ssputs_r>:
 8009acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	688e      	ldr	r6, [r1, #8]
 8009ad2:	461f      	mov	r7, r3
 8009ad4:	42be      	cmp	r6, r7
 8009ad6:	680b      	ldr	r3, [r1, #0]
 8009ad8:	4682      	mov	sl, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	4690      	mov	r8, r2
 8009ade:	d82d      	bhi.n	8009b3c <__ssputs_r+0x70>
 8009ae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ae4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ae8:	d026      	beq.n	8009b38 <__ssputs_r+0x6c>
 8009aea:	6965      	ldr	r5, [r4, #20]
 8009aec:	6909      	ldr	r1, [r1, #16]
 8009aee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009af2:	eba3 0901 	sub.w	r9, r3, r1
 8009af6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009afa:	1c7b      	adds	r3, r7, #1
 8009afc:	444b      	add	r3, r9
 8009afe:	106d      	asrs	r5, r5, #1
 8009b00:	429d      	cmp	r5, r3
 8009b02:	bf38      	it	cc
 8009b04:	461d      	movcc	r5, r3
 8009b06:	0553      	lsls	r3, r2, #21
 8009b08:	d527      	bpl.n	8009b5a <__ssputs_r+0x8e>
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	f7ff fbd0 	bl	80092b0 <_malloc_r>
 8009b10:	4606      	mov	r6, r0
 8009b12:	b360      	cbz	r0, 8009b6e <__ssputs_r+0xa2>
 8009b14:	6921      	ldr	r1, [r4, #16]
 8009b16:	464a      	mov	r2, r9
 8009b18:	f7fe fcfb 	bl	8008512 <memcpy>
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b26:	81a3      	strh	r3, [r4, #12]
 8009b28:	6126      	str	r6, [r4, #16]
 8009b2a:	6165      	str	r5, [r4, #20]
 8009b2c:	444e      	add	r6, r9
 8009b2e:	eba5 0509 	sub.w	r5, r5, r9
 8009b32:	6026      	str	r6, [r4, #0]
 8009b34:	60a5      	str	r5, [r4, #8]
 8009b36:	463e      	mov	r6, r7
 8009b38:	42be      	cmp	r6, r7
 8009b3a:	d900      	bls.n	8009b3e <__ssputs_r+0x72>
 8009b3c:	463e      	mov	r6, r7
 8009b3e:	6820      	ldr	r0, [r4, #0]
 8009b40:	4632      	mov	r2, r6
 8009b42:	4641      	mov	r1, r8
 8009b44:	f000 f9c6 	bl	8009ed4 <memmove>
 8009b48:	68a3      	ldr	r3, [r4, #8]
 8009b4a:	1b9b      	subs	r3, r3, r6
 8009b4c:	60a3      	str	r3, [r4, #8]
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	4433      	add	r3, r6
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	2000      	movs	r0, #0
 8009b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5a:	462a      	mov	r2, r5
 8009b5c:	f000 fa28 	bl	8009fb0 <_realloc_r>
 8009b60:	4606      	mov	r6, r0
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d1e0      	bne.n	8009b28 <__ssputs_r+0x5c>
 8009b66:	6921      	ldr	r1, [r4, #16]
 8009b68:	4650      	mov	r0, sl
 8009b6a:	f7ff fb2d 	bl	80091c8 <_free_r>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	f8ca 3000 	str.w	r3, [sl]
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b80:	e7e9      	b.n	8009b56 <__ssputs_r+0x8a>
	...

08009b84 <_svfiprintf_r>:
 8009b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b88:	4698      	mov	r8, r3
 8009b8a:	898b      	ldrh	r3, [r1, #12]
 8009b8c:	061b      	lsls	r3, r3, #24
 8009b8e:	b09d      	sub	sp, #116	@ 0x74
 8009b90:	4607      	mov	r7, r0
 8009b92:	460d      	mov	r5, r1
 8009b94:	4614      	mov	r4, r2
 8009b96:	d510      	bpl.n	8009bba <_svfiprintf_r+0x36>
 8009b98:	690b      	ldr	r3, [r1, #16]
 8009b9a:	b973      	cbnz	r3, 8009bba <_svfiprintf_r+0x36>
 8009b9c:	2140      	movs	r1, #64	@ 0x40
 8009b9e:	f7ff fb87 	bl	80092b0 <_malloc_r>
 8009ba2:	6028      	str	r0, [r5, #0]
 8009ba4:	6128      	str	r0, [r5, #16]
 8009ba6:	b930      	cbnz	r0, 8009bb6 <_svfiprintf_r+0x32>
 8009ba8:	230c      	movs	r3, #12
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb0:	b01d      	add	sp, #116	@ 0x74
 8009bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb6:	2340      	movs	r3, #64	@ 0x40
 8009bb8:	616b      	str	r3, [r5, #20]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bbe:	2320      	movs	r3, #32
 8009bc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bc8:	2330      	movs	r3, #48	@ 0x30
 8009bca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d68 <_svfiprintf_r+0x1e4>
 8009bce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bd2:	f04f 0901 	mov.w	r9, #1
 8009bd6:	4623      	mov	r3, r4
 8009bd8:	469a      	mov	sl, r3
 8009bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bde:	b10a      	cbz	r2, 8009be4 <_svfiprintf_r+0x60>
 8009be0:	2a25      	cmp	r2, #37	@ 0x25
 8009be2:	d1f9      	bne.n	8009bd8 <_svfiprintf_r+0x54>
 8009be4:	ebba 0b04 	subs.w	fp, sl, r4
 8009be8:	d00b      	beq.n	8009c02 <_svfiprintf_r+0x7e>
 8009bea:	465b      	mov	r3, fp
 8009bec:	4622      	mov	r2, r4
 8009bee:	4629      	mov	r1, r5
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	f7ff ff6b 	bl	8009acc <__ssputs_r>
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	f000 80a7 	beq.w	8009d4a <_svfiprintf_r+0x1c6>
 8009bfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bfe:	445a      	add	r2, fp
 8009c00:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c02:	f89a 3000 	ldrb.w	r3, [sl]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 809f 	beq.w	8009d4a <_svfiprintf_r+0x1c6>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c16:	f10a 0a01 	add.w	sl, sl, #1
 8009c1a:	9304      	str	r3, [sp, #16]
 8009c1c:	9307      	str	r3, [sp, #28]
 8009c1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c22:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c24:	4654      	mov	r4, sl
 8009c26:	2205      	movs	r2, #5
 8009c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c2c:	484e      	ldr	r0, [pc, #312]	@ (8009d68 <_svfiprintf_r+0x1e4>)
 8009c2e:	f7f6 faef 	bl	8000210 <memchr>
 8009c32:	9a04      	ldr	r2, [sp, #16]
 8009c34:	b9d8      	cbnz	r0, 8009c6e <_svfiprintf_r+0xea>
 8009c36:	06d0      	lsls	r0, r2, #27
 8009c38:	bf44      	itt	mi
 8009c3a:	2320      	movmi	r3, #32
 8009c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c40:	0711      	lsls	r1, r2, #28
 8009c42:	bf44      	itt	mi
 8009c44:	232b      	movmi	r3, #43	@ 0x2b
 8009c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c50:	d015      	beq.n	8009c7e <_svfiprintf_r+0xfa>
 8009c52:	9a07      	ldr	r2, [sp, #28]
 8009c54:	4654      	mov	r4, sl
 8009c56:	2000      	movs	r0, #0
 8009c58:	f04f 0c0a 	mov.w	ip, #10
 8009c5c:	4621      	mov	r1, r4
 8009c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c62:	3b30      	subs	r3, #48	@ 0x30
 8009c64:	2b09      	cmp	r3, #9
 8009c66:	d94b      	bls.n	8009d00 <_svfiprintf_r+0x17c>
 8009c68:	b1b0      	cbz	r0, 8009c98 <_svfiprintf_r+0x114>
 8009c6a:	9207      	str	r2, [sp, #28]
 8009c6c:	e014      	b.n	8009c98 <_svfiprintf_r+0x114>
 8009c6e:	eba0 0308 	sub.w	r3, r0, r8
 8009c72:	fa09 f303 	lsl.w	r3, r9, r3
 8009c76:	4313      	orrs	r3, r2
 8009c78:	9304      	str	r3, [sp, #16]
 8009c7a:	46a2      	mov	sl, r4
 8009c7c:	e7d2      	b.n	8009c24 <_svfiprintf_r+0xa0>
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	1d19      	adds	r1, r3, #4
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	9103      	str	r1, [sp, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bfbb      	ittet	lt
 8009c8a:	425b      	neglt	r3, r3
 8009c8c:	f042 0202 	orrlt.w	r2, r2, #2
 8009c90:	9307      	strge	r3, [sp, #28]
 8009c92:	9307      	strlt	r3, [sp, #28]
 8009c94:	bfb8      	it	lt
 8009c96:	9204      	strlt	r2, [sp, #16]
 8009c98:	7823      	ldrb	r3, [r4, #0]
 8009c9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c9c:	d10a      	bne.n	8009cb4 <_svfiprintf_r+0x130>
 8009c9e:	7863      	ldrb	r3, [r4, #1]
 8009ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca2:	d132      	bne.n	8009d0a <_svfiprintf_r+0x186>
 8009ca4:	9b03      	ldr	r3, [sp, #12]
 8009ca6:	1d1a      	adds	r2, r3, #4
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	9203      	str	r2, [sp, #12]
 8009cac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cb0:	3402      	adds	r4, #2
 8009cb2:	9305      	str	r3, [sp, #20]
 8009cb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d78 <_svfiprintf_r+0x1f4>
 8009cb8:	7821      	ldrb	r1, [r4, #0]
 8009cba:	2203      	movs	r2, #3
 8009cbc:	4650      	mov	r0, sl
 8009cbe:	f7f6 faa7 	bl	8000210 <memchr>
 8009cc2:	b138      	cbz	r0, 8009cd4 <_svfiprintf_r+0x150>
 8009cc4:	9b04      	ldr	r3, [sp, #16]
 8009cc6:	eba0 000a 	sub.w	r0, r0, sl
 8009cca:	2240      	movs	r2, #64	@ 0x40
 8009ccc:	4082      	lsls	r2, r0
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	3401      	adds	r4, #1
 8009cd2:	9304      	str	r3, [sp, #16]
 8009cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd8:	4824      	ldr	r0, [pc, #144]	@ (8009d6c <_svfiprintf_r+0x1e8>)
 8009cda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cde:	2206      	movs	r2, #6
 8009ce0:	f7f6 fa96 	bl	8000210 <memchr>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d036      	beq.n	8009d56 <_svfiprintf_r+0x1d2>
 8009ce8:	4b21      	ldr	r3, [pc, #132]	@ (8009d70 <_svfiprintf_r+0x1ec>)
 8009cea:	bb1b      	cbnz	r3, 8009d34 <_svfiprintf_r+0x1b0>
 8009cec:	9b03      	ldr	r3, [sp, #12]
 8009cee:	3307      	adds	r3, #7
 8009cf0:	f023 0307 	bic.w	r3, r3, #7
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	9303      	str	r3, [sp, #12]
 8009cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfa:	4433      	add	r3, r6
 8009cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cfe:	e76a      	b.n	8009bd6 <_svfiprintf_r+0x52>
 8009d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d04:	460c      	mov	r4, r1
 8009d06:	2001      	movs	r0, #1
 8009d08:	e7a8      	b.n	8009c5c <_svfiprintf_r+0xd8>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	3401      	adds	r4, #1
 8009d0e:	9305      	str	r3, [sp, #20]
 8009d10:	4619      	mov	r1, r3
 8009d12:	f04f 0c0a 	mov.w	ip, #10
 8009d16:	4620      	mov	r0, r4
 8009d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d1c:	3a30      	subs	r2, #48	@ 0x30
 8009d1e:	2a09      	cmp	r2, #9
 8009d20:	d903      	bls.n	8009d2a <_svfiprintf_r+0x1a6>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0c6      	beq.n	8009cb4 <_svfiprintf_r+0x130>
 8009d26:	9105      	str	r1, [sp, #20]
 8009d28:	e7c4      	b.n	8009cb4 <_svfiprintf_r+0x130>
 8009d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d2e:	4604      	mov	r4, r0
 8009d30:	2301      	movs	r3, #1
 8009d32:	e7f0      	b.n	8009d16 <_svfiprintf_r+0x192>
 8009d34:	ab03      	add	r3, sp, #12
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	462a      	mov	r2, r5
 8009d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d74 <_svfiprintf_r+0x1f0>)
 8009d3c:	a904      	add	r1, sp, #16
 8009d3e:	4638      	mov	r0, r7
 8009d40:	f7fd fe8a 	bl	8007a58 <_printf_float>
 8009d44:	1c42      	adds	r2, r0, #1
 8009d46:	4606      	mov	r6, r0
 8009d48:	d1d6      	bne.n	8009cf8 <_svfiprintf_r+0x174>
 8009d4a:	89ab      	ldrh	r3, [r5, #12]
 8009d4c:	065b      	lsls	r3, r3, #25
 8009d4e:	f53f af2d 	bmi.w	8009bac <_svfiprintf_r+0x28>
 8009d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d54:	e72c      	b.n	8009bb0 <_svfiprintf_r+0x2c>
 8009d56:	ab03      	add	r3, sp, #12
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	4b05      	ldr	r3, [pc, #20]	@ (8009d74 <_svfiprintf_r+0x1f0>)
 8009d5e:	a904      	add	r1, sp, #16
 8009d60:	4638      	mov	r0, r7
 8009d62:	f7fe f911 	bl	8007f88 <_printf_i>
 8009d66:	e7ed      	b.n	8009d44 <_svfiprintf_r+0x1c0>
 8009d68:	0800a940 	.word	0x0800a940
 8009d6c:	0800a94a 	.word	0x0800a94a
 8009d70:	08007a59 	.word	0x08007a59
 8009d74:	08009acd 	.word	0x08009acd
 8009d78:	0800a946 	.word	0x0800a946

08009d7c <__sflush_r>:
 8009d7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d84:	0716      	lsls	r6, r2, #28
 8009d86:	4605      	mov	r5, r0
 8009d88:	460c      	mov	r4, r1
 8009d8a:	d454      	bmi.n	8009e36 <__sflush_r+0xba>
 8009d8c:	684b      	ldr	r3, [r1, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	dc02      	bgt.n	8009d98 <__sflush_r+0x1c>
 8009d92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	dd48      	ble.n	8009e2a <__sflush_r+0xae>
 8009d98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d9a:	2e00      	cmp	r6, #0
 8009d9c:	d045      	beq.n	8009e2a <__sflush_r+0xae>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009da4:	682f      	ldr	r7, [r5, #0]
 8009da6:	6a21      	ldr	r1, [r4, #32]
 8009da8:	602b      	str	r3, [r5, #0]
 8009daa:	d030      	beq.n	8009e0e <__sflush_r+0x92>
 8009dac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	0759      	lsls	r1, r3, #29
 8009db2:	d505      	bpl.n	8009dc0 <__sflush_r+0x44>
 8009db4:	6863      	ldr	r3, [r4, #4]
 8009db6:	1ad2      	subs	r2, r2, r3
 8009db8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009dba:	b10b      	cbz	r3, 8009dc0 <__sflush_r+0x44>
 8009dbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009dbe:	1ad2      	subs	r2, r2, r3
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009dc4:	6a21      	ldr	r1, [r4, #32]
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	47b0      	blx	r6
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	d106      	bne.n	8009dde <__sflush_r+0x62>
 8009dd0:	6829      	ldr	r1, [r5, #0]
 8009dd2:	291d      	cmp	r1, #29
 8009dd4:	d82b      	bhi.n	8009e2e <__sflush_r+0xb2>
 8009dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8009e80 <__sflush_r+0x104>)
 8009dd8:	410a      	asrs	r2, r1
 8009dda:	07d6      	lsls	r6, r2, #31
 8009ddc:	d427      	bmi.n	8009e2e <__sflush_r+0xb2>
 8009dde:	2200      	movs	r2, #0
 8009de0:	6062      	str	r2, [r4, #4]
 8009de2:	04d9      	lsls	r1, r3, #19
 8009de4:	6922      	ldr	r2, [r4, #16]
 8009de6:	6022      	str	r2, [r4, #0]
 8009de8:	d504      	bpl.n	8009df4 <__sflush_r+0x78>
 8009dea:	1c42      	adds	r2, r0, #1
 8009dec:	d101      	bne.n	8009df2 <__sflush_r+0x76>
 8009dee:	682b      	ldr	r3, [r5, #0]
 8009df0:	b903      	cbnz	r3, 8009df4 <__sflush_r+0x78>
 8009df2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009df4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009df6:	602f      	str	r7, [r5, #0]
 8009df8:	b1b9      	cbz	r1, 8009e2a <__sflush_r+0xae>
 8009dfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dfe:	4299      	cmp	r1, r3
 8009e00:	d002      	beq.n	8009e08 <__sflush_r+0x8c>
 8009e02:	4628      	mov	r0, r5
 8009e04:	f7ff f9e0 	bl	80091c8 <_free_r>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e0c:	e00d      	b.n	8009e2a <__sflush_r+0xae>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4628      	mov	r0, r5
 8009e12:	47b0      	blx	r6
 8009e14:	4602      	mov	r2, r0
 8009e16:	1c50      	adds	r0, r2, #1
 8009e18:	d1c9      	bne.n	8009dae <__sflush_r+0x32>
 8009e1a:	682b      	ldr	r3, [r5, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d0c6      	beq.n	8009dae <__sflush_r+0x32>
 8009e20:	2b1d      	cmp	r3, #29
 8009e22:	d001      	beq.n	8009e28 <__sflush_r+0xac>
 8009e24:	2b16      	cmp	r3, #22
 8009e26:	d11e      	bne.n	8009e66 <__sflush_r+0xea>
 8009e28:	602f      	str	r7, [r5, #0]
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	e022      	b.n	8009e74 <__sflush_r+0xf8>
 8009e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e32:	b21b      	sxth	r3, r3
 8009e34:	e01b      	b.n	8009e6e <__sflush_r+0xf2>
 8009e36:	690f      	ldr	r7, [r1, #16]
 8009e38:	2f00      	cmp	r7, #0
 8009e3a:	d0f6      	beq.n	8009e2a <__sflush_r+0xae>
 8009e3c:	0793      	lsls	r3, r2, #30
 8009e3e:	680e      	ldr	r6, [r1, #0]
 8009e40:	bf08      	it	eq
 8009e42:	694b      	ldreq	r3, [r1, #20]
 8009e44:	600f      	str	r7, [r1, #0]
 8009e46:	bf18      	it	ne
 8009e48:	2300      	movne	r3, #0
 8009e4a:	eba6 0807 	sub.w	r8, r6, r7
 8009e4e:	608b      	str	r3, [r1, #8]
 8009e50:	f1b8 0f00 	cmp.w	r8, #0
 8009e54:	dde9      	ble.n	8009e2a <__sflush_r+0xae>
 8009e56:	6a21      	ldr	r1, [r4, #32]
 8009e58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e5a:	4643      	mov	r3, r8
 8009e5c:	463a      	mov	r2, r7
 8009e5e:	4628      	mov	r0, r5
 8009e60:	47b0      	blx	r6
 8009e62:	2800      	cmp	r0, #0
 8009e64:	dc08      	bgt.n	8009e78 <__sflush_r+0xfc>
 8009e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e6e:	81a3      	strh	r3, [r4, #12]
 8009e70:	f04f 30ff 	mov.w	r0, #4294967295
 8009e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e78:	4407      	add	r7, r0
 8009e7a:	eba8 0800 	sub.w	r8, r8, r0
 8009e7e:	e7e7      	b.n	8009e50 <__sflush_r+0xd4>
 8009e80:	dfbffffe 	.word	0xdfbffffe

08009e84 <_fflush_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	690b      	ldr	r3, [r1, #16]
 8009e88:	4605      	mov	r5, r0
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	b913      	cbnz	r3, 8009e94 <_fflush_r+0x10>
 8009e8e:	2500      	movs	r5, #0
 8009e90:	4628      	mov	r0, r5
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
 8009e94:	b118      	cbz	r0, 8009e9e <_fflush_r+0x1a>
 8009e96:	6a03      	ldr	r3, [r0, #32]
 8009e98:	b90b      	cbnz	r3, 8009e9e <_fflush_r+0x1a>
 8009e9a:	f7fe fa21 	bl	80082e0 <__sinit>
 8009e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0f3      	beq.n	8009e8e <_fflush_r+0xa>
 8009ea6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ea8:	07d0      	lsls	r0, r2, #31
 8009eaa:	d404      	bmi.n	8009eb6 <_fflush_r+0x32>
 8009eac:	0599      	lsls	r1, r3, #22
 8009eae:	d402      	bmi.n	8009eb6 <_fflush_r+0x32>
 8009eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009eb2:	f7fe fb2c 	bl	800850e <__retarget_lock_acquire_recursive>
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	4621      	mov	r1, r4
 8009eba:	f7ff ff5f 	bl	8009d7c <__sflush_r>
 8009ebe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ec0:	07da      	lsls	r2, r3, #31
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	d4e4      	bmi.n	8009e90 <_fflush_r+0xc>
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	059b      	lsls	r3, r3, #22
 8009eca:	d4e1      	bmi.n	8009e90 <_fflush_r+0xc>
 8009ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ece:	f7fe fb1f 	bl	8008510 <__retarget_lock_release_recursive>
 8009ed2:	e7dd      	b.n	8009e90 <_fflush_r+0xc>

08009ed4 <memmove>:
 8009ed4:	4288      	cmp	r0, r1
 8009ed6:	b510      	push	{r4, lr}
 8009ed8:	eb01 0402 	add.w	r4, r1, r2
 8009edc:	d902      	bls.n	8009ee4 <memmove+0x10>
 8009ede:	4284      	cmp	r4, r0
 8009ee0:	4623      	mov	r3, r4
 8009ee2:	d807      	bhi.n	8009ef4 <memmove+0x20>
 8009ee4:	1e43      	subs	r3, r0, #1
 8009ee6:	42a1      	cmp	r1, r4
 8009ee8:	d008      	beq.n	8009efc <memmove+0x28>
 8009eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ef2:	e7f8      	b.n	8009ee6 <memmove+0x12>
 8009ef4:	4402      	add	r2, r0
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	428a      	cmp	r2, r1
 8009efa:	d100      	bne.n	8009efe <memmove+0x2a>
 8009efc:	bd10      	pop	{r4, pc}
 8009efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f06:	e7f7      	b.n	8009ef8 <memmove+0x24>

08009f08 <_sbrk_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d06      	ldr	r5, [pc, #24]	@ (8009f24 <_sbrk_r+0x1c>)
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4608      	mov	r0, r1
 8009f12:	602b      	str	r3, [r5, #0]
 8009f14:	f7f8 f8d8 	bl	80020c8 <_sbrk>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d102      	bne.n	8009f22 <_sbrk_r+0x1a>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b103      	cbz	r3, 8009f22 <_sbrk_r+0x1a>
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	20004b38 	.word	0x20004b38

08009f28 <__assert_func>:
 8009f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f2a:	4614      	mov	r4, r2
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4b09      	ldr	r3, [pc, #36]	@ (8009f54 <__assert_func+0x2c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4605      	mov	r5, r0
 8009f34:	68d8      	ldr	r0, [r3, #12]
 8009f36:	b954      	cbnz	r4, 8009f4e <__assert_func+0x26>
 8009f38:	4b07      	ldr	r3, [pc, #28]	@ (8009f58 <__assert_func+0x30>)
 8009f3a:	461c      	mov	r4, r3
 8009f3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f40:	9100      	str	r1, [sp, #0]
 8009f42:	462b      	mov	r3, r5
 8009f44:	4905      	ldr	r1, [pc, #20]	@ (8009f5c <__assert_func+0x34>)
 8009f46:	f000 f86f 	bl	800a028 <fiprintf>
 8009f4a:	f000 f87f 	bl	800a04c <abort>
 8009f4e:	4b04      	ldr	r3, [pc, #16]	@ (8009f60 <__assert_func+0x38>)
 8009f50:	e7f4      	b.n	8009f3c <__assert_func+0x14>
 8009f52:	bf00      	nop
 8009f54:	2000001c 	.word	0x2000001c
 8009f58:	0800a996 	.word	0x0800a996
 8009f5c:	0800a968 	.word	0x0800a968
 8009f60:	0800a95b 	.word	0x0800a95b

08009f64 <_calloc_r>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	fba1 5402 	umull	r5, r4, r1, r2
 8009f6a:	b93c      	cbnz	r4, 8009f7c <_calloc_r+0x18>
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	f7ff f99f 	bl	80092b0 <_malloc_r>
 8009f72:	4606      	mov	r6, r0
 8009f74:	b928      	cbnz	r0, 8009f82 <_calloc_r+0x1e>
 8009f76:	2600      	movs	r6, #0
 8009f78:	4630      	mov	r0, r6
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	220c      	movs	r2, #12
 8009f7e:	6002      	str	r2, [r0, #0]
 8009f80:	e7f9      	b.n	8009f76 <_calloc_r+0x12>
 8009f82:	462a      	mov	r2, r5
 8009f84:	4621      	mov	r1, r4
 8009f86:	f7fe fa44 	bl	8008412 <memset>
 8009f8a:	e7f5      	b.n	8009f78 <_calloc_r+0x14>

08009f8c <__ascii_mbtowc>:
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	b901      	cbnz	r1, 8009f92 <__ascii_mbtowc+0x6>
 8009f90:	a901      	add	r1, sp, #4
 8009f92:	b142      	cbz	r2, 8009fa6 <__ascii_mbtowc+0x1a>
 8009f94:	b14b      	cbz	r3, 8009faa <__ascii_mbtowc+0x1e>
 8009f96:	7813      	ldrb	r3, [r2, #0]
 8009f98:	600b      	str	r3, [r1, #0]
 8009f9a:	7812      	ldrb	r2, [r2, #0]
 8009f9c:	1e10      	subs	r0, r2, #0
 8009f9e:	bf18      	it	ne
 8009fa0:	2001      	movne	r0, #1
 8009fa2:	b002      	add	sp, #8
 8009fa4:	4770      	bx	lr
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	e7fb      	b.n	8009fa2 <__ascii_mbtowc+0x16>
 8009faa:	f06f 0001 	mvn.w	r0, #1
 8009fae:	e7f8      	b.n	8009fa2 <__ascii_mbtowc+0x16>

08009fb0 <_realloc_r>:
 8009fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	4615      	mov	r5, r2
 8009fb8:	460c      	mov	r4, r1
 8009fba:	b921      	cbnz	r1, 8009fc6 <_realloc_r+0x16>
 8009fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	f7ff b975 	b.w	80092b0 <_malloc_r>
 8009fc6:	b92a      	cbnz	r2, 8009fd4 <_realloc_r+0x24>
 8009fc8:	f7ff f8fe 	bl	80091c8 <_free_r>
 8009fcc:	2400      	movs	r4, #0
 8009fce:	4620      	mov	r0, r4
 8009fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd4:	f000 f841 	bl	800a05a <_malloc_usable_size_r>
 8009fd8:	4285      	cmp	r5, r0
 8009fda:	4606      	mov	r6, r0
 8009fdc:	d802      	bhi.n	8009fe4 <_realloc_r+0x34>
 8009fde:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009fe2:	d8f4      	bhi.n	8009fce <_realloc_r+0x1e>
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	f7ff f962 	bl	80092b0 <_malloc_r>
 8009fec:	4607      	mov	r7, r0
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d0ec      	beq.n	8009fcc <_realloc_r+0x1c>
 8009ff2:	42b5      	cmp	r5, r6
 8009ff4:	462a      	mov	r2, r5
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	bf28      	it	cs
 8009ffa:	4632      	movcs	r2, r6
 8009ffc:	f7fe fa89 	bl	8008512 <memcpy>
 800a000:	4621      	mov	r1, r4
 800a002:	4640      	mov	r0, r8
 800a004:	f7ff f8e0 	bl	80091c8 <_free_r>
 800a008:	463c      	mov	r4, r7
 800a00a:	e7e0      	b.n	8009fce <_realloc_r+0x1e>

0800a00c <__ascii_wctomb>:
 800a00c:	4603      	mov	r3, r0
 800a00e:	4608      	mov	r0, r1
 800a010:	b141      	cbz	r1, 800a024 <__ascii_wctomb+0x18>
 800a012:	2aff      	cmp	r2, #255	@ 0xff
 800a014:	d904      	bls.n	800a020 <__ascii_wctomb+0x14>
 800a016:	228a      	movs	r2, #138	@ 0x8a
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	f04f 30ff 	mov.w	r0, #4294967295
 800a01e:	4770      	bx	lr
 800a020:	700a      	strb	r2, [r1, #0]
 800a022:	2001      	movs	r0, #1
 800a024:	4770      	bx	lr
	...

0800a028 <fiprintf>:
 800a028:	b40e      	push	{r1, r2, r3}
 800a02a:	b503      	push	{r0, r1, lr}
 800a02c:	4601      	mov	r1, r0
 800a02e:	ab03      	add	r3, sp, #12
 800a030:	4805      	ldr	r0, [pc, #20]	@ (800a048 <fiprintf+0x20>)
 800a032:	f853 2b04 	ldr.w	r2, [r3], #4
 800a036:	6800      	ldr	r0, [r0, #0]
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	f000 f83f 	bl	800a0bc <_vfiprintf_r>
 800a03e:	b002      	add	sp, #8
 800a040:	f85d eb04 	ldr.w	lr, [sp], #4
 800a044:	b003      	add	sp, #12
 800a046:	4770      	bx	lr
 800a048:	2000001c 	.word	0x2000001c

0800a04c <abort>:
 800a04c:	b508      	push	{r3, lr}
 800a04e:	2006      	movs	r0, #6
 800a050:	f000 fa08 	bl	800a464 <raise>
 800a054:	2001      	movs	r0, #1
 800a056:	f7f7 ffbf 	bl	8001fd8 <_exit>

0800a05a <_malloc_usable_size_r>:
 800a05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a05e:	1f18      	subs	r0, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	bfbc      	itt	lt
 800a064:	580b      	ldrlt	r3, [r1, r0]
 800a066:	18c0      	addlt	r0, r0, r3
 800a068:	4770      	bx	lr

0800a06a <__sfputc_r>:
 800a06a:	6893      	ldr	r3, [r2, #8]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	b410      	push	{r4}
 800a072:	6093      	str	r3, [r2, #8]
 800a074:	da08      	bge.n	800a088 <__sfputc_r+0x1e>
 800a076:	6994      	ldr	r4, [r2, #24]
 800a078:	42a3      	cmp	r3, r4
 800a07a:	db01      	blt.n	800a080 <__sfputc_r+0x16>
 800a07c:	290a      	cmp	r1, #10
 800a07e:	d103      	bne.n	800a088 <__sfputc_r+0x1e>
 800a080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a084:	f000 b932 	b.w	800a2ec <__swbuf_r>
 800a088:	6813      	ldr	r3, [r2, #0]
 800a08a:	1c58      	adds	r0, r3, #1
 800a08c:	6010      	str	r0, [r2, #0]
 800a08e:	7019      	strb	r1, [r3, #0]
 800a090:	4608      	mov	r0, r1
 800a092:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <__sfputs_r>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	4606      	mov	r6, r0
 800a09c:	460f      	mov	r7, r1
 800a09e:	4614      	mov	r4, r2
 800a0a0:	18d5      	adds	r5, r2, r3
 800a0a2:	42ac      	cmp	r4, r5
 800a0a4:	d101      	bne.n	800a0aa <__sfputs_r+0x12>
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	e007      	b.n	800a0ba <__sfputs_r+0x22>
 800a0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ae:	463a      	mov	r2, r7
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	f7ff ffda 	bl	800a06a <__sfputc_r>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	d1f3      	bne.n	800a0a2 <__sfputs_r+0xa>
 800a0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0bc <_vfiprintf_r>:
 800a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	b09d      	sub	sp, #116	@ 0x74
 800a0c4:	4614      	mov	r4, r2
 800a0c6:	4698      	mov	r8, r3
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	b118      	cbz	r0, 800a0d4 <_vfiprintf_r+0x18>
 800a0cc:	6a03      	ldr	r3, [r0, #32]
 800a0ce:	b90b      	cbnz	r3, 800a0d4 <_vfiprintf_r+0x18>
 800a0d0:	f7fe f906 	bl	80082e0 <__sinit>
 800a0d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0d6:	07d9      	lsls	r1, r3, #31
 800a0d8:	d405      	bmi.n	800a0e6 <_vfiprintf_r+0x2a>
 800a0da:	89ab      	ldrh	r3, [r5, #12]
 800a0dc:	059a      	lsls	r2, r3, #22
 800a0de:	d402      	bmi.n	800a0e6 <_vfiprintf_r+0x2a>
 800a0e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0e2:	f7fe fa14 	bl	800850e <__retarget_lock_acquire_recursive>
 800a0e6:	89ab      	ldrh	r3, [r5, #12]
 800a0e8:	071b      	lsls	r3, r3, #28
 800a0ea:	d501      	bpl.n	800a0f0 <_vfiprintf_r+0x34>
 800a0ec:	692b      	ldr	r3, [r5, #16]
 800a0ee:	b99b      	cbnz	r3, 800a118 <_vfiprintf_r+0x5c>
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f000 f938 	bl	800a368 <__swsetup_r>
 800a0f8:	b170      	cbz	r0, 800a118 <_vfiprintf_r+0x5c>
 800a0fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0fc:	07dc      	lsls	r4, r3, #31
 800a0fe:	d504      	bpl.n	800a10a <_vfiprintf_r+0x4e>
 800a100:	f04f 30ff 	mov.w	r0, #4294967295
 800a104:	b01d      	add	sp, #116	@ 0x74
 800a106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10a:	89ab      	ldrh	r3, [r5, #12]
 800a10c:	0598      	lsls	r0, r3, #22
 800a10e:	d4f7      	bmi.n	800a100 <_vfiprintf_r+0x44>
 800a110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a112:	f7fe f9fd 	bl	8008510 <__retarget_lock_release_recursive>
 800a116:	e7f3      	b.n	800a100 <_vfiprintf_r+0x44>
 800a118:	2300      	movs	r3, #0
 800a11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a11c:	2320      	movs	r3, #32
 800a11e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a122:	f8cd 800c 	str.w	r8, [sp, #12]
 800a126:	2330      	movs	r3, #48	@ 0x30
 800a128:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a2d8 <_vfiprintf_r+0x21c>
 800a12c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a130:	f04f 0901 	mov.w	r9, #1
 800a134:	4623      	mov	r3, r4
 800a136:	469a      	mov	sl, r3
 800a138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a13c:	b10a      	cbz	r2, 800a142 <_vfiprintf_r+0x86>
 800a13e:	2a25      	cmp	r2, #37	@ 0x25
 800a140:	d1f9      	bne.n	800a136 <_vfiprintf_r+0x7a>
 800a142:	ebba 0b04 	subs.w	fp, sl, r4
 800a146:	d00b      	beq.n	800a160 <_vfiprintf_r+0xa4>
 800a148:	465b      	mov	r3, fp
 800a14a:	4622      	mov	r2, r4
 800a14c:	4629      	mov	r1, r5
 800a14e:	4630      	mov	r0, r6
 800a150:	f7ff ffa2 	bl	800a098 <__sfputs_r>
 800a154:	3001      	adds	r0, #1
 800a156:	f000 80a7 	beq.w	800a2a8 <_vfiprintf_r+0x1ec>
 800a15a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a15c:	445a      	add	r2, fp
 800a15e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a160:	f89a 3000 	ldrb.w	r3, [sl]
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 809f 	beq.w	800a2a8 <_vfiprintf_r+0x1ec>
 800a16a:	2300      	movs	r3, #0
 800a16c:	f04f 32ff 	mov.w	r2, #4294967295
 800a170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a174:	f10a 0a01 	add.w	sl, sl, #1
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	9307      	str	r3, [sp, #28]
 800a17c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a180:	931a      	str	r3, [sp, #104]	@ 0x68
 800a182:	4654      	mov	r4, sl
 800a184:	2205      	movs	r2, #5
 800a186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a18a:	4853      	ldr	r0, [pc, #332]	@ (800a2d8 <_vfiprintf_r+0x21c>)
 800a18c:	f7f6 f840 	bl	8000210 <memchr>
 800a190:	9a04      	ldr	r2, [sp, #16]
 800a192:	b9d8      	cbnz	r0, 800a1cc <_vfiprintf_r+0x110>
 800a194:	06d1      	lsls	r1, r2, #27
 800a196:	bf44      	itt	mi
 800a198:	2320      	movmi	r3, #32
 800a19a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a19e:	0713      	lsls	r3, r2, #28
 800a1a0:	bf44      	itt	mi
 800a1a2:	232b      	movmi	r3, #43	@ 0x2b
 800a1a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1ae:	d015      	beq.n	800a1dc <_vfiprintf_r+0x120>
 800a1b0:	9a07      	ldr	r2, [sp, #28]
 800a1b2:	4654      	mov	r4, sl
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	f04f 0c0a 	mov.w	ip, #10
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1c0:	3b30      	subs	r3, #48	@ 0x30
 800a1c2:	2b09      	cmp	r3, #9
 800a1c4:	d94b      	bls.n	800a25e <_vfiprintf_r+0x1a2>
 800a1c6:	b1b0      	cbz	r0, 800a1f6 <_vfiprintf_r+0x13a>
 800a1c8:	9207      	str	r2, [sp, #28]
 800a1ca:	e014      	b.n	800a1f6 <_vfiprintf_r+0x13a>
 800a1cc:	eba0 0308 	sub.w	r3, r0, r8
 800a1d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	9304      	str	r3, [sp, #16]
 800a1d8:	46a2      	mov	sl, r4
 800a1da:	e7d2      	b.n	800a182 <_vfiprintf_r+0xc6>
 800a1dc:	9b03      	ldr	r3, [sp, #12]
 800a1de:	1d19      	adds	r1, r3, #4
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	9103      	str	r1, [sp, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bfbb      	ittet	lt
 800a1e8:	425b      	neglt	r3, r3
 800a1ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a1ee:	9307      	strge	r3, [sp, #28]
 800a1f0:	9307      	strlt	r3, [sp, #28]
 800a1f2:	bfb8      	it	lt
 800a1f4:	9204      	strlt	r2, [sp, #16]
 800a1f6:	7823      	ldrb	r3, [r4, #0]
 800a1f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1fa:	d10a      	bne.n	800a212 <_vfiprintf_r+0x156>
 800a1fc:	7863      	ldrb	r3, [r4, #1]
 800a1fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a200:	d132      	bne.n	800a268 <_vfiprintf_r+0x1ac>
 800a202:	9b03      	ldr	r3, [sp, #12]
 800a204:	1d1a      	adds	r2, r3, #4
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	9203      	str	r2, [sp, #12]
 800a20a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a20e:	3402      	adds	r4, #2
 800a210:	9305      	str	r3, [sp, #20]
 800a212:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a2e8 <_vfiprintf_r+0x22c>
 800a216:	7821      	ldrb	r1, [r4, #0]
 800a218:	2203      	movs	r2, #3
 800a21a:	4650      	mov	r0, sl
 800a21c:	f7f5 fff8 	bl	8000210 <memchr>
 800a220:	b138      	cbz	r0, 800a232 <_vfiprintf_r+0x176>
 800a222:	9b04      	ldr	r3, [sp, #16]
 800a224:	eba0 000a 	sub.w	r0, r0, sl
 800a228:	2240      	movs	r2, #64	@ 0x40
 800a22a:	4082      	lsls	r2, r0
 800a22c:	4313      	orrs	r3, r2
 800a22e:	3401      	adds	r4, #1
 800a230:	9304      	str	r3, [sp, #16]
 800a232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a236:	4829      	ldr	r0, [pc, #164]	@ (800a2dc <_vfiprintf_r+0x220>)
 800a238:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a23c:	2206      	movs	r2, #6
 800a23e:	f7f5 ffe7 	bl	8000210 <memchr>
 800a242:	2800      	cmp	r0, #0
 800a244:	d03f      	beq.n	800a2c6 <_vfiprintf_r+0x20a>
 800a246:	4b26      	ldr	r3, [pc, #152]	@ (800a2e0 <_vfiprintf_r+0x224>)
 800a248:	bb1b      	cbnz	r3, 800a292 <_vfiprintf_r+0x1d6>
 800a24a:	9b03      	ldr	r3, [sp, #12]
 800a24c:	3307      	adds	r3, #7
 800a24e:	f023 0307 	bic.w	r3, r3, #7
 800a252:	3308      	adds	r3, #8
 800a254:	9303      	str	r3, [sp, #12]
 800a256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a258:	443b      	add	r3, r7
 800a25a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a25c:	e76a      	b.n	800a134 <_vfiprintf_r+0x78>
 800a25e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a262:	460c      	mov	r4, r1
 800a264:	2001      	movs	r0, #1
 800a266:	e7a8      	b.n	800a1ba <_vfiprintf_r+0xfe>
 800a268:	2300      	movs	r3, #0
 800a26a:	3401      	adds	r4, #1
 800a26c:	9305      	str	r3, [sp, #20]
 800a26e:	4619      	mov	r1, r3
 800a270:	f04f 0c0a 	mov.w	ip, #10
 800a274:	4620      	mov	r0, r4
 800a276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a27a:	3a30      	subs	r2, #48	@ 0x30
 800a27c:	2a09      	cmp	r2, #9
 800a27e:	d903      	bls.n	800a288 <_vfiprintf_r+0x1cc>
 800a280:	2b00      	cmp	r3, #0
 800a282:	d0c6      	beq.n	800a212 <_vfiprintf_r+0x156>
 800a284:	9105      	str	r1, [sp, #20]
 800a286:	e7c4      	b.n	800a212 <_vfiprintf_r+0x156>
 800a288:	fb0c 2101 	mla	r1, ip, r1, r2
 800a28c:	4604      	mov	r4, r0
 800a28e:	2301      	movs	r3, #1
 800a290:	e7f0      	b.n	800a274 <_vfiprintf_r+0x1b8>
 800a292:	ab03      	add	r3, sp, #12
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	462a      	mov	r2, r5
 800a298:	4b12      	ldr	r3, [pc, #72]	@ (800a2e4 <_vfiprintf_r+0x228>)
 800a29a:	a904      	add	r1, sp, #16
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7fd fbdb 	bl	8007a58 <_printf_float>
 800a2a2:	4607      	mov	r7, r0
 800a2a4:	1c78      	adds	r0, r7, #1
 800a2a6:	d1d6      	bne.n	800a256 <_vfiprintf_r+0x19a>
 800a2a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2aa:	07d9      	lsls	r1, r3, #31
 800a2ac:	d405      	bmi.n	800a2ba <_vfiprintf_r+0x1fe>
 800a2ae:	89ab      	ldrh	r3, [r5, #12]
 800a2b0:	059a      	lsls	r2, r3, #22
 800a2b2:	d402      	bmi.n	800a2ba <_vfiprintf_r+0x1fe>
 800a2b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2b6:	f7fe f92b 	bl	8008510 <__retarget_lock_release_recursive>
 800a2ba:	89ab      	ldrh	r3, [r5, #12]
 800a2bc:	065b      	lsls	r3, r3, #25
 800a2be:	f53f af1f 	bmi.w	800a100 <_vfiprintf_r+0x44>
 800a2c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2c4:	e71e      	b.n	800a104 <_vfiprintf_r+0x48>
 800a2c6:	ab03      	add	r3, sp, #12
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	462a      	mov	r2, r5
 800a2cc:	4b05      	ldr	r3, [pc, #20]	@ (800a2e4 <_vfiprintf_r+0x228>)
 800a2ce:	a904      	add	r1, sp, #16
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7fd fe59 	bl	8007f88 <_printf_i>
 800a2d6:	e7e4      	b.n	800a2a2 <_vfiprintf_r+0x1e6>
 800a2d8:	0800a940 	.word	0x0800a940
 800a2dc:	0800a94a 	.word	0x0800a94a
 800a2e0:	08007a59 	.word	0x08007a59
 800a2e4:	0800a099 	.word	0x0800a099
 800a2e8:	0800a946 	.word	0x0800a946

0800a2ec <__swbuf_r>:
 800a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ee:	460e      	mov	r6, r1
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	b118      	cbz	r0, 800a2fe <__swbuf_r+0x12>
 800a2f6:	6a03      	ldr	r3, [r0, #32]
 800a2f8:	b90b      	cbnz	r3, 800a2fe <__swbuf_r+0x12>
 800a2fa:	f7fd fff1 	bl	80082e0 <__sinit>
 800a2fe:	69a3      	ldr	r3, [r4, #24]
 800a300:	60a3      	str	r3, [r4, #8]
 800a302:	89a3      	ldrh	r3, [r4, #12]
 800a304:	071a      	lsls	r2, r3, #28
 800a306:	d501      	bpl.n	800a30c <__swbuf_r+0x20>
 800a308:	6923      	ldr	r3, [r4, #16]
 800a30a:	b943      	cbnz	r3, 800a31e <__swbuf_r+0x32>
 800a30c:	4621      	mov	r1, r4
 800a30e:	4628      	mov	r0, r5
 800a310:	f000 f82a 	bl	800a368 <__swsetup_r>
 800a314:	b118      	cbz	r0, 800a31e <__swbuf_r+0x32>
 800a316:	f04f 37ff 	mov.w	r7, #4294967295
 800a31a:	4638      	mov	r0, r7
 800a31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	6922      	ldr	r2, [r4, #16]
 800a322:	1a98      	subs	r0, r3, r2
 800a324:	6963      	ldr	r3, [r4, #20]
 800a326:	b2f6      	uxtb	r6, r6
 800a328:	4283      	cmp	r3, r0
 800a32a:	4637      	mov	r7, r6
 800a32c:	dc05      	bgt.n	800a33a <__swbuf_r+0x4e>
 800a32e:	4621      	mov	r1, r4
 800a330:	4628      	mov	r0, r5
 800a332:	f7ff fda7 	bl	8009e84 <_fflush_r>
 800a336:	2800      	cmp	r0, #0
 800a338:	d1ed      	bne.n	800a316 <__swbuf_r+0x2a>
 800a33a:	68a3      	ldr	r3, [r4, #8]
 800a33c:	3b01      	subs	r3, #1
 800a33e:	60a3      	str	r3, [r4, #8]
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	1c5a      	adds	r2, r3, #1
 800a344:	6022      	str	r2, [r4, #0]
 800a346:	701e      	strb	r6, [r3, #0]
 800a348:	6962      	ldr	r2, [r4, #20]
 800a34a:	1c43      	adds	r3, r0, #1
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d004      	beq.n	800a35a <__swbuf_r+0x6e>
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	07db      	lsls	r3, r3, #31
 800a354:	d5e1      	bpl.n	800a31a <__swbuf_r+0x2e>
 800a356:	2e0a      	cmp	r6, #10
 800a358:	d1df      	bne.n	800a31a <__swbuf_r+0x2e>
 800a35a:	4621      	mov	r1, r4
 800a35c:	4628      	mov	r0, r5
 800a35e:	f7ff fd91 	bl	8009e84 <_fflush_r>
 800a362:	2800      	cmp	r0, #0
 800a364:	d0d9      	beq.n	800a31a <__swbuf_r+0x2e>
 800a366:	e7d6      	b.n	800a316 <__swbuf_r+0x2a>

0800a368 <__swsetup_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4b29      	ldr	r3, [pc, #164]	@ (800a410 <__swsetup_r+0xa8>)
 800a36c:	4605      	mov	r5, r0
 800a36e:	6818      	ldr	r0, [r3, #0]
 800a370:	460c      	mov	r4, r1
 800a372:	b118      	cbz	r0, 800a37c <__swsetup_r+0x14>
 800a374:	6a03      	ldr	r3, [r0, #32]
 800a376:	b90b      	cbnz	r3, 800a37c <__swsetup_r+0x14>
 800a378:	f7fd ffb2 	bl	80082e0 <__sinit>
 800a37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a380:	0719      	lsls	r1, r3, #28
 800a382:	d422      	bmi.n	800a3ca <__swsetup_r+0x62>
 800a384:	06da      	lsls	r2, r3, #27
 800a386:	d407      	bmi.n	800a398 <__swsetup_r+0x30>
 800a388:	2209      	movs	r2, #9
 800a38a:	602a      	str	r2, [r5, #0]
 800a38c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a390:	81a3      	strh	r3, [r4, #12]
 800a392:	f04f 30ff 	mov.w	r0, #4294967295
 800a396:	e033      	b.n	800a400 <__swsetup_r+0x98>
 800a398:	0758      	lsls	r0, r3, #29
 800a39a:	d512      	bpl.n	800a3c2 <__swsetup_r+0x5a>
 800a39c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a39e:	b141      	cbz	r1, 800a3b2 <__swsetup_r+0x4a>
 800a3a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3a4:	4299      	cmp	r1, r3
 800a3a6:	d002      	beq.n	800a3ae <__swsetup_r+0x46>
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f7fe ff0d 	bl	80091c8 <_free_r>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a3b8:	81a3      	strh	r3, [r4, #12]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	6063      	str	r3, [r4, #4]
 800a3be:	6923      	ldr	r3, [r4, #16]
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	f043 0308 	orr.w	r3, r3, #8
 800a3c8:	81a3      	strh	r3, [r4, #12]
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	b94b      	cbnz	r3, 800a3e2 <__swsetup_r+0x7a>
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a3d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3d8:	d003      	beq.n	800a3e2 <__swsetup_r+0x7a>
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f000 f883 	bl	800a4e8 <__smakebuf_r>
 800a3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3e6:	f013 0201 	ands.w	r2, r3, #1
 800a3ea:	d00a      	beq.n	800a402 <__swsetup_r+0x9a>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	60a2      	str	r2, [r4, #8]
 800a3f0:	6962      	ldr	r2, [r4, #20]
 800a3f2:	4252      	negs	r2, r2
 800a3f4:	61a2      	str	r2, [r4, #24]
 800a3f6:	6922      	ldr	r2, [r4, #16]
 800a3f8:	b942      	cbnz	r2, 800a40c <__swsetup_r+0xa4>
 800a3fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a3fe:	d1c5      	bne.n	800a38c <__swsetup_r+0x24>
 800a400:	bd38      	pop	{r3, r4, r5, pc}
 800a402:	0799      	lsls	r1, r3, #30
 800a404:	bf58      	it	pl
 800a406:	6962      	ldrpl	r2, [r4, #20]
 800a408:	60a2      	str	r2, [r4, #8]
 800a40a:	e7f4      	b.n	800a3f6 <__swsetup_r+0x8e>
 800a40c:	2000      	movs	r0, #0
 800a40e:	e7f7      	b.n	800a400 <__swsetup_r+0x98>
 800a410:	2000001c 	.word	0x2000001c

0800a414 <_raise_r>:
 800a414:	291f      	cmp	r1, #31
 800a416:	b538      	push	{r3, r4, r5, lr}
 800a418:	4605      	mov	r5, r0
 800a41a:	460c      	mov	r4, r1
 800a41c:	d904      	bls.n	800a428 <_raise_r+0x14>
 800a41e:	2316      	movs	r3, #22
 800a420:	6003      	str	r3, [r0, #0]
 800a422:	f04f 30ff 	mov.w	r0, #4294967295
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a42a:	b112      	cbz	r2, 800a432 <_raise_r+0x1e>
 800a42c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a430:	b94b      	cbnz	r3, 800a446 <_raise_r+0x32>
 800a432:	4628      	mov	r0, r5
 800a434:	f000 f830 	bl	800a498 <_getpid_r>
 800a438:	4622      	mov	r2, r4
 800a43a:	4601      	mov	r1, r0
 800a43c:	4628      	mov	r0, r5
 800a43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a442:	f000 b817 	b.w	800a474 <_kill_r>
 800a446:	2b01      	cmp	r3, #1
 800a448:	d00a      	beq.n	800a460 <_raise_r+0x4c>
 800a44a:	1c59      	adds	r1, r3, #1
 800a44c:	d103      	bne.n	800a456 <_raise_r+0x42>
 800a44e:	2316      	movs	r3, #22
 800a450:	6003      	str	r3, [r0, #0]
 800a452:	2001      	movs	r0, #1
 800a454:	e7e7      	b.n	800a426 <_raise_r+0x12>
 800a456:	2100      	movs	r1, #0
 800a458:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a45c:	4620      	mov	r0, r4
 800a45e:	4798      	blx	r3
 800a460:	2000      	movs	r0, #0
 800a462:	e7e0      	b.n	800a426 <_raise_r+0x12>

0800a464 <raise>:
 800a464:	4b02      	ldr	r3, [pc, #8]	@ (800a470 <raise+0xc>)
 800a466:	4601      	mov	r1, r0
 800a468:	6818      	ldr	r0, [r3, #0]
 800a46a:	f7ff bfd3 	b.w	800a414 <_raise_r>
 800a46e:	bf00      	nop
 800a470:	2000001c 	.word	0x2000001c

0800a474 <_kill_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	4d07      	ldr	r5, [pc, #28]	@ (800a494 <_kill_r+0x20>)
 800a478:	2300      	movs	r3, #0
 800a47a:	4604      	mov	r4, r0
 800a47c:	4608      	mov	r0, r1
 800a47e:	4611      	mov	r1, r2
 800a480:	602b      	str	r3, [r5, #0]
 800a482:	f7f7 fd99 	bl	8001fb8 <_kill>
 800a486:	1c43      	adds	r3, r0, #1
 800a488:	d102      	bne.n	800a490 <_kill_r+0x1c>
 800a48a:	682b      	ldr	r3, [r5, #0]
 800a48c:	b103      	cbz	r3, 800a490 <_kill_r+0x1c>
 800a48e:	6023      	str	r3, [r4, #0]
 800a490:	bd38      	pop	{r3, r4, r5, pc}
 800a492:	bf00      	nop
 800a494:	20004b38 	.word	0x20004b38

0800a498 <_getpid_r>:
 800a498:	f7f7 bd86 	b.w	8001fa8 <_getpid>

0800a49c <__swhatbuf_r>:
 800a49c:	b570      	push	{r4, r5, r6, lr}
 800a49e:	460c      	mov	r4, r1
 800a4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	b096      	sub	sp, #88	@ 0x58
 800a4a8:	4615      	mov	r5, r2
 800a4aa:	461e      	mov	r6, r3
 800a4ac:	da0d      	bge.n	800a4ca <__swhatbuf_r+0x2e>
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a4b4:	f04f 0100 	mov.w	r1, #0
 800a4b8:	bf14      	ite	ne
 800a4ba:	2340      	movne	r3, #64	@ 0x40
 800a4bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	6031      	str	r1, [r6, #0]
 800a4c4:	602b      	str	r3, [r5, #0]
 800a4c6:	b016      	add	sp, #88	@ 0x58
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ca:	466a      	mov	r2, sp
 800a4cc:	f000 f848 	bl	800a560 <_fstat_r>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	dbec      	blt.n	800a4ae <__swhatbuf_r+0x12>
 800a4d4:	9901      	ldr	r1, [sp, #4]
 800a4d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a4da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a4de:	4259      	negs	r1, r3
 800a4e0:	4159      	adcs	r1, r3
 800a4e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4e6:	e7eb      	b.n	800a4c0 <__swhatbuf_r+0x24>

0800a4e8 <__smakebuf_r>:
 800a4e8:	898b      	ldrh	r3, [r1, #12]
 800a4ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ec:	079d      	lsls	r5, r3, #30
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	d507      	bpl.n	800a504 <__smakebuf_r+0x1c>
 800a4f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	6123      	str	r3, [r4, #16]
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	6163      	str	r3, [r4, #20]
 800a500:	b003      	add	sp, #12
 800a502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a504:	ab01      	add	r3, sp, #4
 800a506:	466a      	mov	r2, sp
 800a508:	f7ff ffc8 	bl	800a49c <__swhatbuf_r>
 800a50c:	9f00      	ldr	r7, [sp, #0]
 800a50e:	4605      	mov	r5, r0
 800a510:	4639      	mov	r1, r7
 800a512:	4630      	mov	r0, r6
 800a514:	f7fe fecc 	bl	80092b0 <_malloc_r>
 800a518:	b948      	cbnz	r0, 800a52e <__smakebuf_r+0x46>
 800a51a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a51e:	059a      	lsls	r2, r3, #22
 800a520:	d4ee      	bmi.n	800a500 <__smakebuf_r+0x18>
 800a522:	f023 0303 	bic.w	r3, r3, #3
 800a526:	f043 0302 	orr.w	r3, r3, #2
 800a52a:	81a3      	strh	r3, [r4, #12]
 800a52c:	e7e2      	b.n	800a4f4 <__smakebuf_r+0xc>
 800a52e:	89a3      	ldrh	r3, [r4, #12]
 800a530:	6020      	str	r0, [r4, #0]
 800a532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	9b01      	ldr	r3, [sp, #4]
 800a53a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a53e:	b15b      	cbz	r3, 800a558 <__smakebuf_r+0x70>
 800a540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a544:	4630      	mov	r0, r6
 800a546:	f000 f81d 	bl	800a584 <_isatty_r>
 800a54a:	b128      	cbz	r0, 800a558 <__smakebuf_r+0x70>
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	f023 0303 	bic.w	r3, r3, #3
 800a552:	f043 0301 	orr.w	r3, r3, #1
 800a556:	81a3      	strh	r3, [r4, #12]
 800a558:	89a3      	ldrh	r3, [r4, #12]
 800a55a:	431d      	orrs	r5, r3
 800a55c:	81a5      	strh	r5, [r4, #12]
 800a55e:	e7cf      	b.n	800a500 <__smakebuf_r+0x18>

0800a560 <_fstat_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d07      	ldr	r5, [pc, #28]	@ (800a580 <_fstat_r+0x20>)
 800a564:	2300      	movs	r3, #0
 800a566:	4604      	mov	r4, r0
 800a568:	4608      	mov	r0, r1
 800a56a:	4611      	mov	r1, r2
 800a56c:	602b      	str	r3, [r5, #0]
 800a56e:	f7f7 fd83 	bl	8002078 <_fstat>
 800a572:	1c43      	adds	r3, r0, #1
 800a574:	d102      	bne.n	800a57c <_fstat_r+0x1c>
 800a576:	682b      	ldr	r3, [r5, #0]
 800a578:	b103      	cbz	r3, 800a57c <_fstat_r+0x1c>
 800a57a:	6023      	str	r3, [r4, #0]
 800a57c:	bd38      	pop	{r3, r4, r5, pc}
 800a57e:	bf00      	nop
 800a580:	20004b38 	.word	0x20004b38

0800a584 <_isatty_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d06      	ldr	r5, [pc, #24]	@ (800a5a0 <_isatty_r+0x1c>)
 800a588:	2300      	movs	r3, #0
 800a58a:	4604      	mov	r4, r0
 800a58c:	4608      	mov	r0, r1
 800a58e:	602b      	str	r3, [r5, #0]
 800a590:	f7f7 fd82 	bl	8002098 <_isatty>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d102      	bne.n	800a59e <_isatty_r+0x1a>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	b103      	cbz	r3, 800a59e <_isatty_r+0x1a>
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	bd38      	pop	{r3, r4, r5, pc}
 800a5a0:	20004b38 	.word	0x20004b38

0800a5a4 <_init>:
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	bf00      	nop
 800a5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5aa:	bc08      	pop	{r3}
 800a5ac:	469e      	mov	lr, r3
 800a5ae:	4770      	bx	lr

0800a5b0 <_fini>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	bf00      	nop
 800a5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5b6:	bc08      	pop	{r3}
 800a5b8:	469e      	mov	lr, r3
 800a5ba:	4770      	bx	lr
